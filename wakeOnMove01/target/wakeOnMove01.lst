
c:/Users/stok5262/Desktop/InitialTesting/particleProjects/wakeOnMove01/target/wakeOnMove01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08084730  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000a4  20000000  08084734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000968  200000a4  200000a4  000400a4  2**2
                  ALLOC
  5 .module_info_suffix 0000002c  080847d8  080847d8  000347d8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  6 .module_info_crc 00000004  08084804  08084804  00034804  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000c8a7f  00000000  00000000  00034808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00012b89  00000000  00000000  000fd287  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000168d9  00000000  00000000  0010fe10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002348  00000000  00000000  001266e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003730  00000000  00000000  00128a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000293f1  00000000  00000000  0012c161  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002bf3b  00000000  00000000  00155552  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a9a8d  00000000  00000000  0018148d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c4e0  00000000  00000000  0022af1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	dc 40 08 08                                         .@..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f003 ff41 	bl	8083eb4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f003 ff46 	bl	8083eca <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08084734 	.word	0x08084734
 808004c:	200000a4 	.word	0x200000a4
 8080050:	200000a4 	.word	0x200000a4
 8080054:	20000a0c 	.word	0x20000a0c
 8080058:	20000a0c 	.word	0x20000a0c

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 ffbd 	bl	8081fdc <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	080846ec 	.word	0x080846ec
 8080084:	08084730 	.word	0x08084730

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 bc32 	b.w	80808f0 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f90d 	bl	80802ac <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 bf63 	b.w	8081f60 <_post_loop>

0808009a <_Znwj>:
 808009a:	f001 bc1b 	b.w	80818d4 <malloc>

0808009e <_ZdlPv>:
 808009e:	f001 bc21 	b.w	80818e4 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <_Z10forceSleep6String>:
  }
  return c;
}

int forceSleep(String value)
{
 80800b4:	b510      	push	{r4, lr}
	aliveState = value.toInt();
 80800b6:	f001 fd6b 	bl	8081b90 <_ZNK6String5toIntEv>
 80800ba:	4c05      	ldr	r4, [pc, #20]	; (80800d0 <_Z10forceSleep6String+0x1c>)
 80800bc:	6020      	str	r0, [r4, #0]
	Serial.println(aliveState);
 80800be:	f002 fb69 	bl	8082794 <_Z16_fetch_usbserialv>
 80800c2:	220a      	movs	r2, #10
 80800c4:	6821      	ldr	r1, [r4, #0]
 80800c6:	f001 fdf9 	bl	8081cbc <_ZN5Print7printlnEii>
	return aliveState;
 80800ca:	6820      	ldr	r0, [r4, #0]
 80800cc:	bd10      	pop	{r4, pc}
 80800ce:	bf00      	nop
 80800d0:	20000028 	.word	0x20000028

080800d4 <_Z6pnpolyiPfS_ff>:
	}
}

// check if testx and testy are in the polygon defined by vertx and verty with nvert verticies
int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
{
 80800d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j, c = 0;
 80800d8:	2400      	movs	r4, #0
	}
}

// check if testx and testy are in the polygon defined by vertx and verty with nvert verticies
int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
{
 80800da:	4688      	mov	r8, r1
  int i, j, c = 0;
  for (i = 0, j = nvert-1; i < nvert; j = i++) {
 80800dc:	4627      	mov	r7, r4
	}
}

// check if testx and testy are in the polygon defined by vertx and verty with nvert verticies
int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
{
 80800de:	b085      	sub	sp, #20
 80800e0:	4691      	mov	r9, r2
 80800e2:	9001      	str	r0, [sp, #4]
 80800e4:	9302      	str	r3, [sp, #8]
  int i, j, c = 0;
  for (i = 0, j = nvert-1; i < nvert; j = i++) {
 80800e6:	1e42      	subs	r2, r0, #1
 80800e8:	9b01      	ldr	r3, [sp, #4]
 80800ea:	429f      	cmp	r7, r3
 80800ec:	da40      	bge.n	8080170 <_Z6pnpolyiPfS_ff+0x9c>
    if ( ((verty[i]>testy) != (verty[j]>testy)) &&
 80800ee:	f859 6027 	ldr.w	r6, [r9, r7, lsl #2]
 80800f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80800f4:	4630      	mov	r0, r6
 80800f6:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80800fa:	f859 a022 	ldr.w	sl, [r9, r2, lsl #2]
 80800fe:	f04f 0501 	mov.w	r5, #1
 8080102:	f003 febb 	bl	8083e7c <__aeabi_fcmpgt>
 8080106:	b900      	cbnz	r0, 808010a <_Z6pnpolyiPfS_ff+0x36>
 8080108:	4605      	mov	r5, r0
 808010a:	f04f 0201 	mov.w	r2, #1
 808010e:	4651      	mov	r1, sl
 8080110:	980e      	ldr	r0, [sp, #56]	; 0x38
 8080112:	9203      	str	r2, [sp, #12]
 8080114:	f003 fe94 	bl	8083e40 <__aeabi_fcmplt>
 8080118:	9a03      	ldr	r2, [sp, #12]
 808011a:	b900      	cbnz	r0, 808011e <_Z6pnpolyiPfS_ff+0x4a>
 808011c:	4602      	mov	r2, r0
 808011e:	b2ed      	uxtb	r5, r5
 8080120:	b2d2      	uxtb	r2, r2
 8080122:	4295      	cmp	r5, r2
 8080124:	d021      	beq.n	808016a <_Z6pnpolyiPfS_ff+0x96>
	 (testx < (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) )
 8080126:	f858 5027 	ldr.w	r5, [r8, r7, lsl #2]
// check if testx and testy are in the polygon defined by vertx and verty with nvert verticies
int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
{
  int i, j, c = 0;
  for (i = 0, j = nvert-1; i < nvert; j = i++) {
    if ( ((verty[i]>testy) != (verty[j]>testy)) &&
 808012a:	f858 000b 	ldr.w	r0, [r8, fp]
 808012e:	4629      	mov	r1, r5
 8080130:	f003 fbde 	bl	80838f0 <__aeabi_fsub>
 8080134:	4631      	mov	r1, r6
 8080136:	4683      	mov	fp, r0
 8080138:	980e      	ldr	r0, [sp, #56]	; 0x38
 808013a:	f003 fbd9 	bl	80838f0 <__aeabi_fsub>
 808013e:	4601      	mov	r1, r0
 8080140:	4658      	mov	r0, fp
 8080142:	f003 fcdf 	bl	8083b04 <__aeabi_fmul>
 8080146:	4631      	mov	r1, r6
 8080148:	4683      	mov	fp, r0
 808014a:	4650      	mov	r0, sl
 808014c:	f003 fbd0 	bl	80838f0 <__aeabi_fsub>
 8080150:	4601      	mov	r1, r0
 8080152:	4658      	mov	r0, fp
 8080154:	f003 fd8a 	bl	8083c6c <__aeabi_fdiv>
 8080158:	4629      	mov	r1, r5
 808015a:	f003 fbcb 	bl	80838f4 <__addsf3>
 808015e:	9902      	ldr	r1, [sp, #8]
 8080160:	f003 fe8c 	bl	8083e7c <__aeabi_fcmpgt>
 8080164:	b108      	cbz	r0, 808016a <_Z6pnpolyiPfS_ff+0x96>
 8080166:	f084 0401 	eor.w	r4, r4, #1

// check if testx and testy are in the polygon defined by vertx and verty with nvert verticies
int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
{
  int i, j, c = 0;
  for (i = 0, j = nvert-1; i < nvert; j = i++) {
 808016a:	463a      	mov	r2, r7
 808016c:	3701      	adds	r7, #1
 808016e:	e7bb      	b.n	80800e8 <_Z6pnpolyiPfS_ff+0x14>
    if ( ((verty[i]>testy) != (verty[j]>testy)) &&
	 (testx < (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) )
       c = !c;
  }
  return c;
}
 8080170:	4620      	mov	r0, r4
 8080172:	b005      	add	sp, #20
 8080174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08080178 <_Z11displayInfov>:
}



void displayInfo()
{
 8080178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808017c:	b0a5      	sub	sp, #148	; 0x94
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808017e:	f001 f9e3 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
 8080182:	4c3b      	ldr	r4, [pc, #236]	; (8080270 <_Z11displayInfov+0xf8>)
 8080184:	6823      	ldr	r3, [r4, #0]
 8080186:	1ac0      	subs	r0, r0, r3
 8080188:	f241 3387 	movw	r3, #4999	; 0x1387
 808018c:	4298      	cmp	r0, r3
 808018e:	d96c      	bls.n	808026a <_Z11displayInfov+0xf2>
 8080190:	f001 f9da 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
 8080194:	4d37      	ldr	r5, [pc, #220]	; (8080274 <_Z11displayInfov+0xfc>)
		lastSerial = millis();
 8080196:	6020      	str	r0, [r4, #0]

		char buf[128];
		if (gps.location.isValid()) {
 8080198:	782b      	ldrb	r3, [r5, #0]
 808019a:	4c37      	ldr	r4, [pc, #220]	; (8080278 <_Z11displayInfov+0x100>)
 808019c:	b30b      	cbz	r3, 80801e2 <_Z11displayInfov+0x6a>
			snprintf(buf, sizeof(buf), "%f,%f", gps.location.lat(), gps.location.lng());
 808019e:	4628      	mov	r0, r5
 80801a0:	f000 fd7e 	bl	8080ca0 <_ZN15TinyGPSLocation3latEv>
 80801a4:	4606      	mov	r6, r0
 80801a6:	4628      	mov	r0, r5
 80801a8:	460f      	mov	r7, r1
 80801aa:	f000 fd99 	bl	8080ce0 <_ZN15TinyGPSLocation3lngEv>
 80801ae:	e9cd 6700 	strd	r6, r7, [sp]
 80801b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80801b6:	4a31      	ldr	r2, [pc, #196]	; (808027c <_Z11displayInfov+0x104>)
 80801b8:	2180      	movs	r1, #128	; 0x80
 80801ba:	a804      	add	r0, sp, #16
 80801bc:	f001 fba2 	bl	8081904 <snprintf>
			if (gettingFix) {
 80801c0:	7823      	ldrb	r3, [r4, #0]
 80801c2:	b1d3      	cbz	r3, 80801fa <_Z11displayInfov+0x82>
				gettingFix = false;
 80801c4:	2300      	movs	r3, #0
 80801c6:	7023      	strb	r3, [r4, #0]
 80801c8:	f001 f9be 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
 80801cc:	4b2c      	ldr	r3, [pc, #176]	; (8080280 <_Z11displayInfov+0x108>)
 80801ce:	681c      	ldr	r4, [r3, #0]
 80801d0:	1b04      	subs	r4, r0, r4
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
 80801d2:	f002 fadf 	bl	8082794 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80801d6:	4623      	mov	r3, r4
 80801d8:	4a2a      	ldr	r2, [pc, #168]	; (8080284 <_Z11displayInfov+0x10c>)
 80801da:	2101      	movs	r1, #1
 80801dc:	f001 fd78 	bl	8081cd0 <_ZN5Print11printf_implEbPKcz>
 80801e0:	e00b      	b.n	80801fa <_Z11displayInfov+0x82>
			}
		}
		else {
			strcpy(buf, "no location");
 80801e2:	4929      	ldr	r1, [pc, #164]	; (8080288 <_Z11displayInfov+0x110>)
 80801e4:	a804      	add	r0, sp, #16
 80801e6:	f003 feab 	bl	8083f40 <strcpy>
			if (!gettingFix) {
 80801ea:	7823      	ldrb	r3, [r4, #0]
 80801ec:	b92b      	cbnz	r3, 80801fa <_Z11displayInfov+0x82>
				gettingFix = true;
 80801ee:	2301      	movs	r3, #1
 80801f0:	7023      	strb	r3, [r4, #0]
 80801f2:	f001 f9a9 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
 80801f6:	4b22      	ldr	r3, [pc, #136]	; (8080280 <_Z11displayInfov+0x108>)
 80801f8:	6018      	str	r0, [r3, #0]
			}
		}
		Serial.println(buf);
 80801fa:	f002 facb 	bl	8082794 <_Z16_fetch_usbserialv>
 80801fe:	a904      	add	r1, sp, #16
 8080200:	f001 fd04 	bl	8081c0c <_ZN5Print7printlnEPKc>
    Serial.print("In the Geo Fence: ");
 8080204:	f002 fac6 	bl	8082794 <_Z16_fetch_usbserialv>
 8080208:	4920      	ldr	r1, [pc, #128]	; (808028c <_Z11displayInfov+0x114>)
 808020a:	f001 fcec 	bl	8081be6 <_ZN5Print5printEPKc>
    Serial.println(pnpoly((sizeof(geoFenceLat)/sizeof(geoFenceLat[0])),geoFenceLat,geoFenceLon,gps.location.lat(),gps.location.lng()));
 808020e:	f002 fac1 	bl	8082794 <_Z16_fetch_usbserialv>
 8080212:	4604      	mov	r4, r0
 8080214:	4817      	ldr	r0, [pc, #92]	; (8080274 <_Z11displayInfov+0xfc>)
 8080216:	f000 fd43 	bl	8080ca0 <_ZN15TinyGPSLocation3latEv>
 808021a:	4680      	mov	r8, r0
 808021c:	4815      	ldr	r0, [pc, #84]	; (8080274 <_Z11displayInfov+0xfc>)
 808021e:	4689      	mov	r9, r1
 8080220:	f000 fd5e 	bl	8080ce0 <_ZN15TinyGPSLocation3lngEv>
 8080224:	4606      	mov	r6, r0
 8080226:	460f      	mov	r7, r1
 8080228:	4640      	mov	r0, r8
 808022a:	4649      	mov	r1, r9
 808022c:	f003 fb0c 	bl	8083848 <__aeabi_d2f>
 8080230:	4639      	mov	r1, r7
 8080232:	4605      	mov	r5, r0
 8080234:	4630      	mov	r0, r6
 8080236:	f003 fb07 	bl	8083848 <__aeabi_d2f>
 808023a:	462b      	mov	r3, r5
 808023c:	9000      	str	r0, [sp, #0]
 808023e:	4a14      	ldr	r2, [pc, #80]	; (8080290 <_Z11displayInfov+0x118>)
 8080240:	4914      	ldr	r1, [pc, #80]	; (8080294 <_Z11displayInfov+0x11c>)
 8080242:	2004      	movs	r0, #4
 8080244:	f7ff ff46 	bl	80800d4 <_Z6pnpolyiPfS_ff>
 8080248:	220a      	movs	r2, #10
 808024a:	4601      	mov	r1, r0
 808024c:	4620      	mov	r0, r4
 808024e:	f001 fd35 	bl	8081cbc <_ZN5Print7printlnEii>
	Serial.print("Alive State: ");
 8080252:	f002 fa9f 	bl	8082794 <_Z16_fetch_usbserialv>
 8080256:	4910      	ldr	r1, [pc, #64]	; (8080298 <_Z11displayInfov+0x120>)
 8080258:	f001 fcc5 	bl	8081be6 <_ZN5Print5printEPKc>
	Serial.println(aliveState);
 808025c:	f002 fa9a 	bl	8082794 <_Z16_fetch_usbserialv>
 8080260:	4b0e      	ldr	r3, [pc, #56]	; (808029c <_Z11displayInfov+0x124>)
 8080262:	220a      	movs	r2, #10
 8080264:	6819      	ldr	r1, [r3, #0]
 8080266:	f001 fd29 	bl	8081cbc <_ZN5Print7printlnEii>
	}
}
 808026a:	b025      	add	sp, #148	; 0x94
 808026c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080270:	2000026c 	.word	0x2000026c
 8080274:	200000b0 	.word	0x200000b0
 8080278:	20000284 	.word	0x20000284
 808027c:	080840f0 	.word	0x080840f0
 8080280:	200000a8 	.word	0x200000a8
 8080284:	080840f6 	.word	0x080840f6
 8080288:	08084116 	.word	0x08084116
 808028c:	08084122 	.word	0x08084122
 8080290:	20000000 	.word	0x20000000
 8080294:	20000018 	.word	0x20000018
 8080298:	08084135 	.word	0x08084135
 808029c:	20000028 	.word	0x20000028

080802a0 <_ZN5Print8printlnfIIiEEEjPKcDpT_>:
 80802a0:	4613      	mov	r3, r2
 80802a2:	460a      	mov	r2, r1
 80802a4:	2101      	movs	r1, #1
 80802a6:	f001 bd13 	b.w	8081cd0 <_ZN5Print11printf_implEbPKcz>
	...

080802ac <loop>:

	System.enableUpdates();
}


void loop() {
 80802ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80802b0:	b0cd      	sub	sp, #308	; 0x134
	while (Serial1.available() > 0) {
 80802b2:	f002 fba1 	bl	80829f8 <_Z22__fetch_global_Serial1v>
 80802b6:	6803      	ldr	r3, [r0, #0]
 80802b8:	691b      	ldr	r3, [r3, #16]
 80802ba:	4798      	blx	r3
 80802bc:	2800      	cmp	r0, #0
 80802be:	dd0d      	ble.n	80802dc <loop+0x30>
		if (gps.encode(Serial1.read())) {
 80802c0:	f002 fb9a 	bl	80829f8 <_Z22__fetch_global_Serial1v>
 80802c4:	6803      	ldr	r3, [r0, #0]
 80802c6:	695b      	ldr	r3, [r3, #20]
 80802c8:	4798      	blx	r3
 80802ca:	b2c1      	uxtb	r1, r0
 80802cc:	48a0      	ldr	r0, [pc, #640]	; (8080550 <loop+0x2a4>)
 80802ce:	f000 fee1 	bl	8081094 <_ZN11TinyGPSPlus6encodeEc>
 80802d2:	2800      	cmp	r0, #0
 80802d4:	d0ed      	beq.n	80802b2 <loop+0x6>
			displayInfo();
 80802d6:	f7ff ff4f 	bl	8080178 <_Z11displayInfov>
 80802da:	e7ea      	b.n	80802b2 <loop+0x6>
		}
	}

	switch(state) {
 80802dc:	4c9d      	ldr	r4, [pc, #628]	; (8080554 <loop+0x2a8>)
 80802de:	7823      	ldrb	r3, [r4, #0]
 80802e0:	2b09      	cmp	r3, #9
 80802e2:	f200 8297 	bhi.w	8080814 <loop+0x568>
 80802e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80802ea:	000a      	.short	0x000a
 80802ec:	02950022 	.word	0x02950022
 80802f0:	00e50057 	.word	0x00e50057
 80802f4:	01bf00cc 	.word	0x01bf00cc
 80802f8:	003a00d5 	.word	0x003a00d5
 80802fc:	0102      	.short	0x0102
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802fe:	f001 fad1 	bl	80818a4 <spark_cloud_flag_connected>
	case ONLINE_WAIT_STATE:
		if (Particle.connected()) {
 8080302:	b108      	cbz	r0, 8080308 <loop+0x5c>
			state = RESET_STATE;
 8080304:	2301      	movs	r3, #1
 8080306:	7023      	strb	r3, [r4, #0]
 8080308:	f001 f91e 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
		}
		if (millis() - stateTime > 5000) {
 808030c:	4c92      	ldr	r4, [pc, #584]	; (8080558 <loop+0x2ac>)
 808030e:	6823      	ldr	r3, [r4, #0]
 8080310:	1ac0      	subs	r0, r0, r3
 8080312:	f241 3388 	movw	r3, #5000	; 0x1388
 8080316:	4298      	cmp	r0, r3
 8080318:	f240 827c 	bls.w	8080814 <loop+0x568>
 808031c:	f001 f914 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
 8080320:	6020      	str	r0, [r4, #0]
			Serial.println("waiting to come online");
 8080322:	f002 fa37 	bl	8082794 <_Z16_fetch_usbserialv>
 8080326:	498d      	ldr	r1, [pc, #564]	; (808055c <loop+0x2b0>)
 8080328:	f001 fc70 	bl	8081c0c <_ZN5Print7printlnEPKc>
 808032c:	e272      	b.n	8080814 <loop+0x568>
		}
		break;

	case RESET_STATE: {
		Serial.println("resetting accelerometer");
 808032e:	f002 fa31 	bl	8082794 <_Z16_fetch_usbserialv>
 8080332:	498b      	ldr	r1, [pc, #556]	; (8080560 <loop+0x2b4>)
 8080334:	f001 fc6a 	bl	8081c0c <_ZN5Print7printlnEPKc>

		LIS3DHConfig config;
 8080338:	a80c      	add	r0, sp, #48	; 0x30
 808033a:	f000 ff51 	bl	80811e0 <_ZN12LIS3DHConfigC1Ev>
		config.setLowPowerWakeMode(16);
 808033e:	2110      	movs	r1, #16
 8080340:	a80c      	add	r0, sp, #48	; 0x30
 8080342:	f000 ff5a 	bl	80811fa <_ZN12LIS3DHConfig19setLowPowerWakeModeEh>

		if (!accel.setup(config)) {
 8080346:	a90c      	add	r1, sp, #48	; 0x30
 8080348:	4886      	ldr	r0, [pc, #536]	; (8080564 <loop+0x2b8>)
 808034a:	f000 ff89 	bl	8081260 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 808034e:	b918      	cbnz	r0, 8080358 <loop+0xac>
			Serial.println("accelerometer not found");
 8080350:	f002 fa20 	bl	8082794 <_Z16_fetch_usbserialv>
 8080354:	4984      	ldr	r1, [pc, #528]	; (8080568 <loop+0x2bc>)
 8080356:	e01b      	b.n	8080390 <loop+0xe4>
			state = SLEEP_STATE;
			break;
		}

		state = BOOT_WAIT_STATE;
 8080358:	2307      	movs	r3, #7
 808035a:	7023      	strb	r3, [r4, #0]
		}
		break;
 808035c:	e25a      	b.n	8080814 <loop+0x568>
 808035e:	4d7c      	ldr	r5, [pc, #496]	; (8080550 <loop+0x2a4>)

	case GPS_WAIT_STATE:
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
 8080360:	782b      	ldrb	r3, [r5, #0]
 8080362:	b14b      	cbz	r3, 8080378 <loop+0xcc>
 8080364:	f001 f8f0 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
 8080368:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 808036a:	1ac0      	subs	r0, r0, r3
 808036c:	f242 730f 	movw	r3, #9999	; 0x270f
 8080370:	4298      	cmp	r0, r3
 8080372:	d801      	bhi.n	8080378 <loop+0xcc>
			// Got a GPS fix
			state = PUBLISH_STATE;
 8080374:	2303      	movs	r3, #3
 8080376:	e7f0      	b.n	808035a <loop+0xae>
 8080378:	f001 f8e6 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			break;
		}
		if (millis() - stateTime >= MAX_TIME_FOR_GPS_FIX_MS) {
 808037c:	4b76      	ldr	r3, [pc, #472]	; (8080558 <loop+0x2ac>)
 808037e:	681b      	ldr	r3, [r3, #0]
 8080380:	1ac0      	subs	r0, r0, r3
 8080382:	4b7a      	ldr	r3, [pc, #488]	; (808056c <loop+0x2c0>)
 8080384:	4298      	cmp	r0, r3
 8080386:	f240 8245 	bls.w	8080814 <loop+0x568>
			Serial.println("failed to get GPS fix");
 808038a:	f002 fa03 	bl	8082794 <_Z16_fetch_usbserialv>
 808038e:	4978      	ldr	r1, [pc, #480]	; (8080570 <loop+0x2c4>)
 8080390:	f001 fc3c 	bl	8081c0c <_ZN5Print7printlnEPKc>
			state = SLEEP_STATE;
 8080394:	2304      	movs	r3, #4
 8080396:	e7e0      	b.n	808035a <loop+0xae>
 8080398:	f001 fa84 	bl	80818a4 <spark_cloud_flag_connected>
 808039c:	4e6e      	ldr	r6, [pc, #440]	; (8080558 <loop+0x2ac>)

		}
		break;

	case PUBLISH_STATE:
		if (Particle.connected()) {
 808039e:	2800      	cmp	r0, #0
 80803a0:	d065      	beq.n	808046e <loop+0x1c2>
			// logitude (decimal)
			// state of charge (decimal)
			// whether movement was detected (1) or not (0) The not detected publish is used for battery status updates
			// alive state (1) if alive (0) if not
			char data[256];
			float stateOfCharge = batteryMonitor.getSoC();
 80803a2:	4874      	ldr	r0, [pc, #464]	; (8080574 <loop+0x2c8>)
 80803a4:	f001 fd7a 	bl	8081e9c <_ZN9FuelGauge6getSoCEv>
 80803a8:	4605      	mov	r5, r0
      		snprintf(data, sizeof(data), "{\"La\":\"%f\",\"Lo\":\"%f\",\"C\":\"%.02f\",\"A\":\"%d\",\"S\":\"%d\"}",
 80803aa:	4869      	ldr	r0, [pc, #420]	; (8080550 <loop+0x2a4>)
 80803ac:	f000 fc78 	bl	8080ca0 <_ZN15TinyGPSLocation3latEv>
 80803b0:	4680      	mov	r8, r0
 80803b2:	4867      	ldr	r0, [pc, #412]	; (8080550 <loop+0x2a4>)
 80803b4:	4689      	mov	r9, r1
 80803b6:	f000 fc93 	bl	8080ce0 <_ZN15TinyGPSLocation3lngEv>
          	gps.location.lat(),gps.location.lng(), stateOfCharge, awake, aliveState);
 80803ba:	4b6f      	ldr	r3, [pc, #444]	; (8080578 <loop+0x2cc>)
			// state of charge (decimal)
			// whether movement was detected (1) or not (0) The not detected publish is used for battery status updates
			// alive state (1) if alive (0) if not
			char data[256];
			float stateOfCharge = batteryMonitor.getSoC();
      		snprintf(data, sizeof(data), "{\"La\":\"%f\",\"Lo\":\"%f\",\"C\":\"%.02f\",\"A\":\"%d\",\"S\":\"%d\"}",
 80803bc:	4682      	mov	sl, r0
          	gps.location.lat(),gps.location.lng(), stateOfCharge, awake, aliveState);
 80803be:	681b      	ldr	r3, [r3, #0]
 80803c0:	4628      	mov	r0, r5
 80803c2:	9307      	str	r3, [sp, #28]
 80803c4:	4b6d      	ldr	r3, [pc, #436]	; (808057c <loop+0x2d0>)
			// state of charge (decimal)
			// whether movement was detected (1) or not (0) The not detected publish is used for battery status updates
			// alive state (1) if alive (0) if not
			char data[256];
			float stateOfCharge = batteryMonitor.getSoC();
      		snprintf(data, sizeof(data), "{\"La\":\"%f\",\"Lo\":\"%f\",\"C\":\"%.02f\",\"A\":\"%d\",\"S\":\"%d\"}",
 80803c6:	468b      	mov	fp, r1
          	gps.location.lat(),gps.location.lng(), stateOfCharge, awake, aliveState);
 80803c8:	681b      	ldr	r3, [r3, #0]
 80803ca:	9306      	str	r3, [sp, #24]
 80803cc:	f002 ffd6 	bl	808337c <__aeabi_f2d>
 80803d0:	4a6b      	ldr	r2, [pc, #428]	; (8080580 <loop+0x2d4>)
 80803d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80803d6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80803da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80803de:	e9cd 8900 	strd	r8, r9, [sp]
 80803e2:	a80c      	add	r0, sp, #48	; 0x30
 80803e4:	f001 fa8e 	bl	8081904 <snprintf>

			Particle.publish(eventName, data, 60, PRIVATE);
 80803e8:	4b66      	ldr	r3, [pc, #408]	; (8080584 <loop+0x2d8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80803ea:	aa0c      	add	r2, sp, #48	; 0x30
 80803ec:	6819      	ldr	r1, [r3, #0]
 80803ee:	4b66      	ldr	r3, [pc, #408]	; (8080588 <loop+0x2dc>)
 80803f0:	a80a      	add	r0, sp, #40	; 0x28
 80803f2:	781b      	ldrb	r3, [r3, #0]
 80803f4:	f88d 3000 	strb.w	r3, [sp]
 80803f8:	233c      	movs	r3, #60	; 0x3c
 80803fa:	f001 ff89 	bl	8082310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80803fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8080400:	b17d      	cbz	r5, 8080422 <loop+0x176>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080402:	686b      	ldr	r3, [r5, #4]
 8080404:	3b01      	subs	r3, #1
 8080406:	606b      	str	r3, [r5, #4]
 8080408:	b95b      	cbnz	r3, 8080422 <loop+0x176>
        {
          _M_dispose();
 808040a:	682b      	ldr	r3, [r5, #0]
 808040c:	4628      	mov	r0, r5
 808040e:	689b      	ldr	r3, [r3, #8]
 8080410:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080412:	68ab      	ldr	r3, [r5, #8]
 8080414:	3b01      	subs	r3, #1
 8080416:	60ab      	str	r3, [r5, #8]
 8080418:	b91b      	cbnz	r3, 8080422 <loop+0x176>
            _M_destroy();
 808041a:	682b      	ldr	r3, [r5, #0]
 808041c:	4628      	mov	r0, r5
 808041e:	68db      	ldr	r3, [r3, #12]
 8080420:	4798      	blx	r3
			Serial.println(data);
 8080422:	f002 f9b7 	bl	8082794 <_Z16_fetch_usbserialv>
 8080426:	a90c      	add	r1, sp, #48	; 0x30
 8080428:	f001 fbf0 	bl	8081c0c <_ZN5Print7printlnEPKc>

			inGeoFence = pnpoly((sizeof(geoFenceLat)/sizeof(geoFenceLat[0])),geoFenceLat,geoFenceLon,gps.location.lat(),gps.location.lng());
 808042c:	4848      	ldr	r0, [pc, #288]	; (8080550 <loop+0x2a4>)
 808042e:	f000 fc37 	bl	8080ca0 <_ZN15TinyGPSLocation3latEv>
 8080432:	4682      	mov	sl, r0
 8080434:	4846      	ldr	r0, [pc, #280]	; (8080550 <loop+0x2a4>)
 8080436:	468b      	mov	fp, r1
 8080438:	f000 fc52 	bl	8080ce0 <_ZN15TinyGPSLocation3lngEv>
 808043c:	4680      	mov	r8, r0
 808043e:	4689      	mov	r9, r1
 8080440:	4650      	mov	r0, sl
 8080442:	4659      	mov	r1, fp
 8080444:	f003 fa00 	bl	8083848 <__aeabi_d2f>
 8080448:	4649      	mov	r1, r9
 808044a:	4605      	mov	r5, r0
 808044c:	4640      	mov	r0, r8
 808044e:	f003 f9fb 	bl	8083848 <__aeabi_d2f>
 8080452:	462b      	mov	r3, r5
 8080454:	9000      	str	r0, [sp, #0]
 8080456:	4a4d      	ldr	r2, [pc, #308]	; (808058c <loop+0x2e0>)
 8080458:	494d      	ldr	r1, [pc, #308]	; (8080590 <loop+0x2e4>)
 808045a:	2004      	movs	r0, #4
 808045c:	f7ff fe3a 	bl	80800d4 <_Z6pnpolyiPfS_ff>
 8080460:	4b4c      	ldr	r3, [pc, #304]	; (8080594 <loop+0x2e8>)
 8080462:	6018      	str	r0, [r3, #0]
 8080464:	f001 f870 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>

			// Wait for the publish to go out
			stateTime = millis();
			state = SLEEP_WAIT_STATE;
 8080468:	2305      	movs	r3, #5
			Serial.println(data);

			inGeoFence = pnpoly((sizeof(geoFenceLat)/sizeof(geoFenceLat[0])),geoFenceLat,geoFenceLon,gps.location.lat(),gps.location.lng());

			// Wait for the publish to go out
			stateTime = millis();
 808046a:	6030      	str	r0, [r6, #0]
 808046c:	e775      	b.n	808035a <loop+0xae>
 808046e:	f001 f86b 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			state = SLEEP_WAIT_STATE;
		}
		else {
			// Haven't come online yet
			if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS) {
 8080472:	6833      	ldr	r3, [r6, #0]
 8080474:	1ac0      	subs	r0, r0, r3
 8080476:	f64e 235f 	movw	r3, #59999	; 0xea5f
 808047a:	4298      	cmp	r0, r3
 808047c:	f240 81ca 	bls.w	8080814 <loop+0x568>
 8080480:	e788      	b.n	8080394 <loop+0xe8>
 8080482:	f001 f861 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			}
		}
		break;

	case SLEEP_WAIT_STATE:
		if (millis() - stateTime >= TIME_AFTER_PUBLISH_MS) {
 8080486:	4b34      	ldr	r3, [pc, #208]	; (8080558 <loop+0x2ac>)
 8080488:	681b      	ldr	r3, [r3, #0]
 808048a:	1ac0      	subs	r0, r0, r3
 808048c:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8080490:	d280      	bcs.n	8080394 <loop+0xe8>
 8080492:	e1bf      	b.n	8080814 <loop+0x568>
 8080494:	f001 f858 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			state = SLEEP_STATE;
		}
		break;

	case BOOT_WAIT_STATE:
		if (millis() - stateTime >= TIME_AFTER_BOOT_MS) {
 8080498:	4d2f      	ldr	r5, [pc, #188]	; (8080558 <loop+0x2ac>)
 808049a:	682b      	ldr	r3, [r5, #0]
 808049c:	1ac0      	subs	r0, r0, r3
 808049e:	f241 3387 	movw	r3, #4999	; 0x1387
 80804a2:	4298      	cmp	r0, r3
 80804a4:	f240 81b6 	bls.w	8080814 <loop+0x568>
			// To publish the battery stats after boot, set state to PUBLISH_STATE
			// To go to sleep immediately, set state to SLEEP_STATE
			state = GPS_WAIT_STATE;
 80804a8:	2308      	movs	r3, #8
 80804aa:	7023      	strb	r3, [r4, #0]
 80804ac:	f001 f84c 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
 80804b0:	6028      	str	r0, [r5, #0]
 80804b2:	e1af      	b.n	8080814 <loop+0x568>
	case SLEEP_STATE:
		// It's a good idea to reset the accelerometer here. It shouldn't be necessary, but 
		// sometimes if you don't do this, the Electron will never wake up again. This is
		// oddly correlated with powering down the GPS
		{
			LIS3DHConfig config;
 80804b4:	a80c      	add	r0, sp, #48	; 0x30
 80804b6:	f000 fe93 	bl	80811e0 <_ZN12LIS3DHConfigC1Ev>
			config.setLowPowerWakeMode(16);
 80804ba:	2110      	movs	r1, #16
 80804bc:	a80c      	add	r0, sp, #48	; 0x30
 80804be:	f000 fe9c 	bl	80811fa <_ZN12LIS3DHConfig19setLowPowerWakeModeEh>
	
			accel.setup(config);
 80804c2:	a90c      	add	r1, sp, #48	; 0x30
 80804c4:	4827      	ldr	r0, [pc, #156]	; (8080564 <loop+0x2b8>)
 80804c6:	f000 fecb 	bl	8081260 <_ZN6LIS3DH5setupER12LIS3DHConfig>
		}
		if(!aliveState || !inGeoFence){
 80804ca:	4b2b      	ldr	r3, [pc, #172]	; (8080578 <loop+0x2cc>)
 80804cc:	681b      	ldr	r3, [r3, #0]
 80804ce:	b113      	cbz	r3, 80804d6 <loop+0x22a>
 80804d0:	4b30      	ldr	r3, [pc, #192]	; (8080594 <loop+0x2e8>)
 80804d2:	681b      	ldr	r3, [r3, #0]
 80804d4:	b90b      	cbnz	r3, 80804da <loop+0x22e>
			state = SHUT_DOWN_STATE;
 80804d6:	2309      	movs	r3, #9
 80804d8:	e003      	b.n	80804e2 <loop+0x236>
		}
		else{
			powerToScooter = 100;
 80804da:	4b2f      	ldr	r3, [pc, #188]	; (8080598 <loop+0x2ec>)
 80804dc:	2264      	movs	r2, #100	; 0x64
 80804de:	601a      	str	r2, [r3, #0]
			state = CALIBRATE_STATE;
 80804e0:	2306      	movs	r3, #6
 80804e2:	7023      	strb	r3, [r4, #0]
 80804e4:	f001 f830 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
		}
		stateTime = millis();
 80804e8:	4b1b      	ldr	r3, [pc, #108]	; (8080558 <loop+0x2ac>)
 80804ea:	6018      	str	r0, [r3, #0]
		break;
 80804ec:	e192      	b.n	8080814 <loop+0x568>

	case SHUT_DOWN_STATE:
		Serial.println("Invalid");
		// If the aliveState is off then slowly lower power to scooter
		if(powerToScooter>0 && !aliveState){
 80804ee:	4d2a      	ldr	r5, [pc, #168]	; (8080598 <loop+0x2ec>)
		}
		stateTime = millis();
		break;

	case SHUT_DOWN_STATE:
		Serial.println("Invalid");
 80804f0:	f002 f950 	bl	8082794 <_Z16_fetch_usbserialv>
 80804f4:	4929      	ldr	r1, [pc, #164]	; (808059c <loop+0x2f0>)
 80804f6:	f001 fb89 	bl	8081c0c <_ZN5Print7printlnEPKc>
		// If the aliveState is off then slowly lower power to scooter
		if(powerToScooter>0 && !aliveState){
 80804fa:	682b      	ldr	r3, [r5, #0]
 80804fc:	f8df a058 	ldr.w	sl, [pc, #88]	; 8080558 <loop+0x2ac>
 8080500:	2b00      	cmp	r3, #0
 8080502:	4a1d      	ldr	r2, [pc, #116]	; (8080578 <loop+0x2cc>)
 8080504:	dd4c      	ble.n	80805a0 <loop+0x2f4>
 8080506:	6811      	ldr	r1, [r2, #0]
 8080508:	b911      	cbnz	r1, 8080510 <loop+0x264>
			powerToScooter--;
 808050a:	3b01      	subs	r3, #1
 808050c:	602b      	str	r3, [r5, #0]
 808050e:	e019      	b.n	8080544 <loop+0x298>
			state = SHUT_DOWN_STATE;
			stateTime = millis();
		}
		// If the scooter is not in the Geo Fence then slowly lower power to scooter
		// and check if the device gets back in Geo Fence
		else if(powerToScooter>0 && !inGeoFence){
 8080510:	f8df b080 	ldr.w	fp, [pc, #128]	; 8080594 <loop+0x2e8>
 8080514:	f8db 1000 	ldr.w	r1, [fp]
 8080518:	2900      	cmp	r1, #0
 808051a:	d141      	bne.n	80805a0 <loop+0x2f4>
			powerToScooter--;
 808051c:	3b01      	subs	r3, #1
			if(powerToScooter%10==0){
 808051e:	210a      	movs	r1, #10
 8080520:	fb93 f2f1 	sdiv	r2, r3, r1
			stateTime = millis();
		}
		// If the scooter is not in the Geo Fence then slowly lower power to scooter
		// and check if the device gets back in Geo Fence
		else if(powerToScooter>0 && !inGeoFence){
			powerToScooter--;
 8080524:	602b      	str	r3, [r5, #0]
			if(powerToScooter%10==0){
 8080526:	fb01 3312 	mls	r3, r1, r2, r3
 808052a:	b95b      	cbnz	r3, 8080544 <loop+0x298>
 808052c:	4e08      	ldr	r6, [pc, #32]	; (8080550 <loop+0x2a4>)
				if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
 808052e:	7833      	ldrb	r3, [r6, #0]
 8080530:	b143      	cbz	r3, 8080544 <loop+0x298>
 8080532:	f001 f809 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
 8080536:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8080538:	1ac0      	subs	r0, r0, r3
 808053a:	f242 730f 	movw	r3, #9999	; 0x270f
 808053e:	4298      	cmp	r0, r3
 8080540:	f240 814b 	bls.w	80807da <loop+0x52e>
					inGeoFence = pnpoly((sizeof(geoFenceLat)/sizeof(geoFenceLat[0])),geoFenceLat,geoFenceLon,gps.location.lat(),gps.location.lng());
				}
			}
			delay(1000);
 8080544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080548:	f001 fc2c 	bl	8081da4 <delay>
			state = SHUT_DOWN_STATE;
 808054c:	2309      	movs	r3, #9
 808054e:	e07a      	b.n	8080646 <loop+0x39a>
 8080550:	200000b0 	.word	0x200000b0
 8080554:	200000ac 	.word	0x200000ac
 8080558:	20000288 	.word	0x20000288
 808055c:	08084143 	.word	0x08084143
 8080560:	0808415a 	.word	0x0808415a
 8080564:	20000250 	.word	0x20000250
 8080568:	08084172 	.word	0x08084172
 808056c:	0002bf1f 	.word	0x0002bf1f
 8080570:	0808418a 	.word	0x0808418a
 8080574:	2000027c 	.word	0x2000027c
 8080578:	20000028 	.word	0x20000028
 808057c:	20000274 	.word	0x20000274
 8080580:	080841a0 	.word	0x080841a0
 8080584:	20000010 	.word	0x20000010
 8080588:	20000270 	.word	0x20000270
 808058c:	20000000 	.word	0x20000000
 8080590:	20000018 	.word	0x20000018
 8080594:	20000268 	.word	0x20000268
 8080598:	20000014 	.word	0x20000014
 808059c:	080841d4 	.word	0x080841d4
			stateTime = millis();
		}
		else if(aliveState && inGeoFence){
 80805a0:	6813      	ldr	r3, [r2, #0]
 80805a2:	4f9e      	ldr	r7, [pc, #632]	; (808081c <loop+0x570>)
 80805a4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8080840 <loop+0x594>
 80805a8:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8080844 <loop+0x598>
 80805ac:	b1b3      	cbz	r3, 80805dc <loop+0x330>
 80805ae:	4b9c      	ldr	r3, [pc, #624]	; (8080820 <loop+0x574>)
 80805b0:	681b      	ldr	r3, [r3, #0]
 80805b2:	b19b      	cbz	r3, 80805dc <loop+0x330>
			powerToScooter=100;
 80805b4:	2364      	movs	r3, #100	; 0x64
 80805b6:	602b      	str	r3, [r5, #0]

			Serial.printlnf("awake=%d", awake);
 80805b8:	f002 f8ec 	bl	8082794 <_Z16_fetch_usbserialv>
 80805bc:	683a      	ldr	r2, [r7, #0]
 80805be:	4999      	ldr	r1, [pc, #612]	; (8080824 <loop+0x578>)
 80805c0:	f7ff fe6e 	bl	80802a0 <_ZN5Print8printlnfIIiEEEjPKcDpT_>

			// Restart the GPS
			digitalWrite(D6, LOW);
 80805c4:	2100      	movs	r1, #0
 80805c6:	2006      	movs	r0, #6
 80805c8:	f002 fb6f 	bl	8082caa <digitalWrite>
 80805cc:	f000 ffbc 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			startFix = millis();
			gettingFix = true;
 80805d0:	2301      	movs	r3, #1

			Serial.printlnf("awake=%d", awake);

			// Restart the GPS
			digitalWrite(D6, LOW);
			startFix = millis();
 80805d2:	f8c9 0000 	str.w	r0, [r9]
			gettingFix = true;
 80805d6:	f888 3000 	strb.w	r3, [r8]
 80805da:	e033      	b.n	8080644 <loop+0x398>
			state = GPS_WAIT_STATE;
			stateTime = millis();
		}
		else{

			Serial.println("Going Into Invalid Sleep");
 80805dc:	f002 f8da 	bl	8082794 <_Z16_fetch_usbserialv>
 80805e0:	4991      	ldr	r1, [pc, #580]	; (8080828 <loop+0x57c>)
 80805e2:	f001 fb13 	bl	8081c0c <_ZN5Print7printlnEPKc>
			delay(500);
 80805e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80805ea:	f001 fbdb 	bl	8081da4 <delay>
 80805ee:	4b8f      	ldr	r3, [pc, #572]	; (808082c <loop+0x580>)
 80805f0:	2601      	movs	r6, #1
 80805f2:	681b      	ldr	r3, [r3, #0]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80805f4:	4632      	mov	r2, r6
 80805f6:	9302      	str	r3, [sp, #8]
 80805f8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80805fc:	a90a      	add	r1, sp, #40	; 0x28
 80805fe:	9301      	str	r3, [sp, #4]
 8080600:	a80c      	add	r0, sp, #48	; 0x30
 8080602:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8080606:	9600      	str	r6, [sp, #0]

			System.sleep(D1, RISING, TIME_FOR_SHUTDOWN, SLEEP_NETWORK_STANDBY);

			delay(500);

			awake = 0;
 8080608:	f04f 0b00 	mov.w	fp, #0
 808060c:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8080610:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8080614:	f001 fa16 	bl	8081a44 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
			Serial.println("Going Into Invalid Sleep");
			delay(500);

			System.sleep(D1, RISING, TIME_FOR_SHUTDOWN, SLEEP_NETWORK_STANDBY);

			delay(500);
 8080618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808061c:	f001 fbc2 	bl	8081da4 <delay>

			awake = 0;
 8080620:	f8c7 b000 	str.w	fp, [r7]

			Serial.printlnf("awake=%d", awake);
 8080624:	f002 f8b6 	bl	8082794 <_Z16_fetch_usbserialv>
 8080628:	683a      	ldr	r2, [r7, #0]
 808062a:	497e      	ldr	r1, [pc, #504]	; (8080824 <loop+0x578>)
 808062c:	f7ff fe38 	bl	80802a0 <_ZN5Print8printlnfIIiEEEjPKcDpT_>

			// Restart the GPS
			digitalWrite(D6, LOW);
 8080630:	4659      	mov	r1, fp
 8080632:	2006      	movs	r0, #6
 8080634:	f002 fb39 	bl	8082caa <digitalWrite>
 8080638:	f000 ff86 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			startFix = millis();
			gettingFix = true;
 808063c:	f888 6000 	strb.w	r6, [r8]

			Serial.printlnf("awake=%d", awake);

			// Restart the GPS
			digitalWrite(D6, LOW);
			startFix = millis();
 8080640:	f8c9 0000 	str.w	r0, [r9]
			gettingFix = true;

			state = GPS_WAIT_STATE;
 8080644:	2308      	movs	r3, #8
 8080646:	7023      	strb	r3, [r4, #0]
 8080648:	f000 ff7e 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
 808064c:	f8ca 0000 	str.w	r0, [sl]
		}
		Serial.print("Power to scooter: ");
 8080650:	f002 f8a0 	bl	8082794 <_Z16_fetch_usbserialv>
 8080654:	4976      	ldr	r1, [pc, #472]	; (8080830 <loop+0x584>)
 8080656:	f001 fac6 	bl	8081be6 <_ZN5Print5printEPKc>
		Serial.println(powerToScooter);
 808065a:	f002 f89b 	bl	8082794 <_Z16_fetch_usbserialv>
 808065e:	220a      	movs	r2, #10
 8080660:	6829      	ldr	r1, [r5, #0]
 8080662:	f001 fb2b 	bl	8081cbc <_ZN5Print7printlnEii>
		break;
 8080666:	e0d5      	b.n	8080814 <loop+0x568>

	case CALIBRATE_STATE:
		LIS3DHConfig config;
 8080668:	a80c      	add	r0, sp, #48	; 0x30
 808066a:	f000 fdb9 	bl	80811e0 <_ZN12LIS3DHConfigC1Ev>
		config.setLowPowerWakeMode(16);
 808066e:	2110      	movs	r1, #16
 8080670:	a80c      	add	r0, sp, #48	; 0x30
 8080672:	f000 fdc2 	bl	80811fa <_ZN12LIS3DHConfig19setLowPowerWakeModeEh>
	
		accel.setup(config);
 8080676:	a90c      	add	r1, sp, #48	; 0x30
 8080678:	486e      	ldr	r0, [pc, #440]	; (8080834 <loop+0x588>)
 808067a:	f000 fdf1 	bl	8081260 <_ZN6LIS3DH5setupER12LIS3DHConfig>
		// Wait for Electron to stop moving for 20 seconds so we can recalibrate the accelerometer
		// Wait for 40 seconds before looping again
		if (accel.calibrateFilter(20000, 40000)) {
 808067e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8080682:	f649 4240 	movw	r2, #40000	; 0x9c40
 8080686:	486b      	ldr	r0, [pc, #428]	; (8080834 <loop+0x588>)
 8080688:	f000 fe68 	bl	808135c <_ZN6LIS3DH15calibrateFilterEmm>
 808068c:	4680      	mov	r8, r0
			// We've stopped moving and the accelerometer is calibrated

			// Uncomment this line to power down the GPS. It saves power but will increase the amount
			// of time to get a fix.
			digitalWrite(D6, HIGH);
 808068e:	2101      	movs	r1, #1
 8080690:	2006      	movs	r0, #6
		config.setLowPowerWakeMode(16);
	
		accel.setup(config);
		// Wait for Electron to stop moving for 20 seconds so we can recalibrate the accelerometer
		// Wait for 40 seconds before looping again
		if (accel.calibrateFilter(20000, 40000)) {
 8080692:	f1b8 0f00 	cmp.w	r8, #0
 8080696:	d055      	beq.n	8080744 <loop+0x498>
			// We've stopped moving and the accelerometer is calibrated

			// Uncomment this line to power down the GPS. It saves power but will increase the amount
			// of time to get a fix.
			digitalWrite(D6, HIGH);
 8080698:	f002 fb07 	bl	8082caa <digitalWrite>

			Serial.println("Checking for Sleep");
 808069c:	f002 f87a 	bl	8082794 <_Z16_fetch_usbserialv>
 80806a0:	4965      	ldr	r1, [pc, #404]	; (8080838 <loop+0x58c>)
 80806a2:	f001 fab3 	bl	8081c0c <_ZN5Print7printlnEPKc>
			delay(500);
 80806a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80806aa:	f001 fb7b 	bl	8081da4 <delay>

			// If you use SLEEP_MODE_DEEP it's very important to make sure WKP is LOW before going to
			// sleep. If you go into SLEEP_MODE_DEEP with WKP high you will likely never wake up again
			// (until reset).
			if (digitalRead(WKP)) {
 80806ae:	2011      	movs	r0, #17
 80806b0:	f002 fb14 	bl	8082cdc <digitalRead>
 80806b4:	2800      	cmp	r0, #0
 80806b6:	f040 80ad 	bne.w	8080814 <loop+0x568>
				// Try to calibrate again
				break;
			}

			if(!awake){
 80806ba:	4d58      	ldr	r5, [pc, #352]	; (808081c <loop+0x570>)
 80806bc:	682b      	ldr	r3, [r5, #0]
 80806be:	b9bb      	cbnz	r3, 80806f0 <loop+0x444>
				// Sleep
				Serial.println("Going Into Soft Sleep");
 80806c0:	f002 f868 	bl	8082794 <_Z16_fetch_usbserialv>
 80806c4:	495d      	ldr	r1, [pc, #372]	; (808083c <loop+0x590>)
 80806c6:	f001 faa1 	bl	8081c0c <_ZN5Print7printlnEPKc>
 80806ca:	4b58      	ldr	r3, [pc, #352]	; (808082c <loop+0x580>)
 80806cc:	2211      	movs	r2, #17
 80806ce:	681b      	ldr	r3, [r3, #0]
 80806d0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80806d4:	9302      	str	r3, [sp, #8]
 80806d6:	2201      	movs	r2, #1
 80806d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80806dc:	e88d 000c 	stmia.w	sp, {r2, r3}
 80806e0:	a909      	add	r1, sp, #36	; 0x24
 80806e2:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80806e6:	a80a      	add	r0, sp, #40	; 0x28
 80806e8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80806ec:	f001 f9aa 	bl	8081a44 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				System.sleep(WKP, RISING, TIME_PUBLISH_BATTERY_SEC, SLEEP_NETWORK_STANDBY);
			}

			// This delay should not be necessary, but sometimes things don't seem to work right
			// immediately coming out of sleep.
			delay(500);
 80806f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80806f4:	f001 fb56 	bl	8081da4 <delay>

			awake = ((accel.clearInterrupt() & LIS3DH::INT1_SRC_IA) != 0);
 80806f8:	484e      	ldr	r0, [pc, #312]	; (8080834 <loop+0x588>)
 80806fa:	f000 fe0d 	bl	8081318 <_ZN6LIS3DH14clearInterruptEv>
 80806fe:	f000 0040 	and.w	r0, r0, #64	; 0x40
 8080702:	b2c2      	uxtb	r2, r0
 8080704:	2a00      	cmp	r2, #0
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value)
    {
        system_set_flag(flag, value, nullptr);
 8080706:	bf15      	itete	ne
 8080708:	2200      	movne	r2, #0
 808070a:	2101      	moveq	r1, #1
 808070c:	2301      	movne	r3, #1
 808070e:	2300      	moveq	r3, #0
 8080710:	bf16      	itet	ne
 8080712:	4611      	movne	r1, r2
 8080714:	4608      	moveq	r0, r1
 8080716:	2001      	movne	r0, #1
 8080718:	602b      	str	r3, [r5, #0]
 808071a:	f001 f82d 	bl	8081778 <system_set_flag>
			}
			else{
				System.enableUpdates();
			}

			Serial.printlnf("awake=%d", awake);
 808071e:	f002 f839 	bl	8082794 <_Z16_fetch_usbserialv>
 8080722:	682a      	ldr	r2, [r5, #0]
 8080724:	493f      	ldr	r1, [pc, #252]	; (8080824 <loop+0x578>)
 8080726:	f7ff fdbb 	bl	80802a0 <_ZN5Print8printlnfIIiEEEjPKcDpT_>

			// Restart the GPS
			digitalWrite(D6, LOW);
 808072a:	2100      	movs	r1, #0
 808072c:	2006      	movs	r0, #6
 808072e:	f002 fabc 	bl	8082caa <digitalWrite>
 8080732:	f000 ff09 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			startFix = millis();
 8080736:	4b42      	ldr	r3, [pc, #264]	; (8080840 <loop+0x594>)
			gettingFix = true;
 8080738:	2201      	movs	r2, #1

			Serial.printlnf("awake=%d", awake);

			// Restart the GPS
			digitalWrite(D6, LOW);
			startFix = millis();
 808073a:	6018      	str	r0, [r3, #0]
			gettingFix = true;
 808073c:	4b41      	ldr	r3, [pc, #260]	; (8080844 <loop+0x598>)
 808073e:	701a      	strb	r2, [r3, #0]

			state = GPS_WAIT_STATE;
 8080740:	2308      	movs	r3, #8
 8080742:	e6ce      	b.n	80804e2 <loop+0x236>
			stateTime = millis();
		}
		else {
			digitalWrite(D6, HIGH);
 8080744:	f002 fab1 	bl	8082caa <digitalWrite>

			Serial.println("Going Into Deep Sleep");
 8080748:	f002 f824 	bl	8082794 <_Z16_fetch_usbserialv>
 808074c:	493e      	ldr	r1, [pc, #248]	; (8080848 <loop+0x59c>)
 808074e:	f001 fa5d 	bl	8081c0c <_ZN5Print7printlnEPKc>
			delay(500);
 8080752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080756:	f001 fb25 	bl	8081da4 <delay>

			Serial.printlnf("still moving after %u sec", (millis() - stateTime) / 1000);
 808075a:	f002 f81b 	bl	8082794 <_Z16_fetch_usbserialv>
 808075e:	4605      	mov	r5, r0
 8080760:	f000 fef2 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
 8080764:	4f39      	ldr	r7, [pc, #228]	; (808084c <loop+0x5a0>)
 8080766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808076a:	683b      	ldr	r3, [r7, #0]
 808076c:	2101      	movs	r1, #1
 808076e:	1ac3      	subs	r3, r0, r3
 8080770:	fbb3 f3f2 	udiv	r3, r3, r2
 8080774:	4628      	mov	r0, r5
 8080776:	4a36      	ldr	r2, [pc, #216]	; (8080850 <loop+0x5a4>)
 8080778:	f001 faaa 	bl	8081cd0 <_ZN5Print11printf_implEbPKcz>
 808077c:	4b2b      	ldr	r3, [pc, #172]	; (808082c <loop+0x580>)
 808077e:	2501      	movs	r5, #1
 8080780:	681b      	ldr	r3, [r3, #0]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 8080782:	462a      	mov	r2, r5
 8080784:	9302      	str	r3, [sp, #8]
 8080786:	23b4      	movs	r3, #180	; 0xb4
 8080788:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 808078c:	9301      	str	r3, [sp, #4]
 808078e:	a80a      	add	r0, sp, #40	; 0x28
 8080790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
			System.sleep(D1, RISING, TIME_IF_MOVING, SLEEP_NETWORK_STANDBY);

			delay(500);

			awake = 1;
 8080794:	4e21      	ldr	r6, [pc, #132]	; (808081c <loop+0x570>)
 8080796:	9500      	str	r5, [sp, #0]
 8080798:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 808079c:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 80807a0:	f001 f950 	bl	8081a44 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
			delay(500);

			Serial.printlnf("still moving after %u sec", (millis() - stateTime) / 1000);
			System.sleep(D1, RISING, TIME_IF_MOVING, SLEEP_NETWORK_STANDBY);

			delay(500);
 80807a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80807a8:	f001 fafc 	bl	8081da4 <delay>

			awake = 1;
 80807ac:	6035      	str	r5, [r6, #0]

			Serial.printlnf("awake=%d", awake);
 80807ae:	f001 fff1 	bl	8082794 <_Z16_fetch_usbserialv>
 80807b2:	6832      	ldr	r2, [r6, #0]
 80807b4:	491b      	ldr	r1, [pc, #108]	; (8080824 <loop+0x578>)
 80807b6:	f7ff fd73 	bl	80802a0 <_ZN5Print8printlnfIIiEEEjPKcDpT_>

			// Restart the GPS
			digitalWrite(D6, LOW);
 80807ba:	4641      	mov	r1, r8
 80807bc:	2006      	movs	r0, #6
 80807be:	f002 fa74 	bl	8082caa <digitalWrite>
 80807c2:	f000 fec1 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			startFix = millis();
 80807c6:	4b1e      	ldr	r3, [pc, #120]	; (8080840 <loop+0x594>)
 80807c8:	6018      	str	r0, [r3, #0]
			gettingFix = true;
 80807ca:	4b1e      	ldr	r3, [pc, #120]	; (8080844 <loop+0x598>)
 80807cc:	701d      	strb	r5, [r3, #0]

			state = GPS_WAIT_STATE;
 80807ce:	2308      	movs	r3, #8
 80807d0:	7023      	strb	r3, [r4, #0]
 80807d2:	f000 feb9 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
 80807d6:	6038      	str	r0, [r7, #0]
		}
		break;
	}
}
 80807d8:	e01c      	b.n	8080814 <loop+0x568>
		// and check if the device gets back in Geo Fence
		else if(powerToScooter>0 && !inGeoFence){
			powerToScooter--;
			if(powerToScooter%10==0){
				if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
					inGeoFence = pnpoly((sizeof(geoFenceLat)/sizeof(geoFenceLat[0])),geoFenceLat,geoFenceLon,gps.location.lat(),gps.location.lng());
 80807da:	4630      	mov	r0, r6
 80807dc:	f000 fa60 	bl	8080ca0 <_ZN15TinyGPSLocation3latEv>
 80807e0:	4680      	mov	r8, r0
 80807e2:	4630      	mov	r0, r6
 80807e4:	4689      	mov	r9, r1
 80807e6:	f000 fa7b 	bl	8080ce0 <_ZN15TinyGPSLocation3lngEv>
 80807ea:	4606      	mov	r6, r0
 80807ec:	460f      	mov	r7, r1
 80807ee:	4640      	mov	r0, r8
 80807f0:	4649      	mov	r1, r9
 80807f2:	f003 f829 	bl	8083848 <__aeabi_d2f>
 80807f6:	4639      	mov	r1, r7
 80807f8:	4680      	mov	r8, r0
 80807fa:	4630      	mov	r0, r6
 80807fc:	f003 f824 	bl	8083848 <__aeabi_d2f>
 8080800:	4643      	mov	r3, r8
 8080802:	9000      	str	r0, [sp, #0]
 8080804:	4a13      	ldr	r2, [pc, #76]	; (8080854 <loop+0x5a8>)
 8080806:	4914      	ldr	r1, [pc, #80]	; (8080858 <loop+0x5ac>)
 8080808:	2004      	movs	r0, #4
 808080a:	f7ff fc63 	bl	80800d4 <_Z6pnpolyiPfS_ff>
 808080e:	f8cb 0000 	str.w	r0, [fp]
 8080812:	e697      	b.n	8080544 <loop+0x298>
			state = GPS_WAIT_STATE;
			stateTime = millis();
		}
		break;
	}
}
 8080814:	b04d      	add	sp, #308	; 0x134
 8080816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808081a:	bf00      	nop
 808081c:	20000274 	.word	0x20000274
 8080820:	20000268 	.word	0x20000268
 8080824:	080841dc 	.word	0x080841dc
 8080828:	080841e5 	.word	0x080841e5
 808082c:	20000278 	.word	0x20000278
 8080830:	080841fe 	.word	0x080841fe
 8080834:	20000250 	.word	0x20000250
 8080838:	08084211 	.word	0x08084211
 808083c:	08084224 	.word	0x08084224
 8080840:	200000a8 	.word	0x200000a8
 8080844:	20000284 	.word	0x20000284
 8080848:	0808423a 	.word	0x0808423a
 808084c:	20000288 	.word	0x20000288
 8080850:	08084250 	.word	0x08084250
 8080854:	20000000 	.word	0x20000000
 8080858:	20000018 	.word	0x20000018

0808085c <_GLOBAL__sub_I_batteryMonitor>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808085c:	4b1b      	ldr	r3, [pc, #108]	; (80808cc <_GLOBAL__sub_I_batteryMonitor+0x70>)
int forceSleep(String value)
{
	aliveState = value.toInt();
	Serial.println(aliveState);
	return aliveState;
 808085e:	b570      	push	{r4, r5, r6, lr}
 8080860:	2401      	movs	r4, #1
 8080862:	601c      	str	r4, [r3, #0]
 8080864:	4b1a      	ldr	r3, [pc, #104]	; (80808d0 <_GLOBAL__sub_I_batteryMonitor+0x74>)

// System threading is required for this project
SYSTEM_THREAD(ENABLED);

// Global objects
FuelGauge batteryMonitor;
 8080866:	4d1b      	ldr	r5, [pc, #108]	; (80808d4 <_GLOBAL__sub_I_batteryMonitor+0x78>)
 8080868:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808086a:	f000 fdfd 	bl	8081468 <HAL_Pin_Map>

// Edited by Austin Stokes


// System threading is required for this project
SYSTEM_THREAD(ENABLED);
 808086e:	4620      	mov	r0, r4

// Global objects
FuelGauge batteryMonitor;
 8080870:	4c19      	ldr	r4, [pc, #100]	; (80808d8 <_GLOBAL__sub_I_batteryMonitor+0x7c>)

// Edited by Austin Stokes


// System threading is required for this project
SYSTEM_THREAD(ENABLED);
 8080872:	2100      	movs	r1, #0
 8080874:	f000 ff78 	bl	8081768 <system_thread_set_state>

// Global objects
FuelGauge batteryMonitor;
 8080878:	2100      	movs	r1, #0
 808087a:	4620      	mov	r0, r4
 808087c:	f001 face 	bl	8081e1c <_ZN9FuelGaugeC1Eb>
 8080880:	4620      	mov	r0, r4
LIS3DHSPI accel(SPI, A2, WKP);
 8080882:	4c16      	ldr	r4, [pc, #88]	; (80808dc <_GLOBAL__sub_I_batteryMonitor+0x80>)

// System threading is required for this project
SYSTEM_THREAD(ENABLED);

// Global objects
FuelGauge batteryMonitor;
 8080884:	462a      	mov	r2, r5
 8080886:	4916      	ldr	r1, [pc, #88]	; (80808e0 <_GLOBAL__sub_I_batteryMonitor+0x84>)
 8080888:	f002 fac2 	bl	8082e10 <__aeabi_atexit>
LIS3DHSPI accel(SPI, A2, WKP);
 808088c:	2311      	movs	r3, #17
 808088e:	220c      	movs	r2, #12
 8080890:	4914      	ldr	r1, [pc, #80]	; (80808e4 <_GLOBAL__sub_I_batteryMonitor+0x88>)
 8080892:	4620      	mov	r0, r4
 8080894:	f000 fdc2 	bl	808141c <_ZN9LIS3DHSPIC1ER8SPIClassii>
 8080898:	462a      	mov	r2, r5
 808089a:	4913      	ldr	r1, [pc, #76]	; (80808e8 <_GLOBAL__sub_I_batteryMonitor+0x8c>)
 808089c:	4620      	mov	r0, r4
 808089e:	f002 fab7 	bl	8082e10 <__aeabi_atexit>

TinyGPSPlus gps;
 80808a2:	4812      	ldr	r0, [pc, #72]	; (80808ec <_GLOBAL__sub_I_batteryMonitor+0x90>)
 80808a4:	f000 f956 	bl	8080b54 <_ZN11TinyGPSPlusC1Ev>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 80808a8:	f002 f9b2 	bl	8082c10 <spark_protocol_instance>
 80808ac:	2300      	movs	r3, #0
 80808ae:	461a      	mov	r2, r3
 80808b0:	f242 21fd 	movw	r1, #8957	; 0x22fd
 80808b4:	f002 f9b4 	bl	8082c20 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80808b8:	f002 f9aa 	bl	8082c10 <spark_protocol_instance>
int forceSleep(String value)
{
	aliveState = value.toInt();
	Serial.println(aliveState);
	return aliveState;
 80808bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80808c0:	2300      	movs	r3, #0
 80808c2:	461a      	mov	r2, r3
 80808c4:	2104      	movs	r1, #4
 80808c6:	f002 b9b3 	b.w	8082c30 <spark_protocol_set_product_firmware_version>
 80808ca:	bf00      	nop
 80808cc:	20000278 	.word	0x20000278
 80808d0:	20000270 	.word	0x20000270
 80808d4:	200000a4 	.word	0x200000a4
 80808d8:	2000027c 	.word	0x2000027c
 80808dc:	20000250 	.word	0x20000250
 80808e0:	08081e3b 	.word	0x08081e3b
 80808e4:	20000900 	.word	0x20000900
 80808e8:	08081149 	.word	0x08081149
 80808ec:	200000b0 	.word	0x200000b0

080808f0 <setup>:

PRODUCT_ID(8957);
PRODUCT_VERSION(4);


void setup() {
 80808f0:	b510      	push	{r4, lr}
 80808f2:	b088      	sub	sp, #32
	Serial.begin(9600);
 80808f4:	f001 ff4e 	bl	8082794 <_Z16_fetch_usbserialv>
 80808f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80808fc:	f001 ff30 	bl	8082760 <_ZN9USBSerial5beginEl>

	// The GPS module on the AssetTracker is connected to Serial1 and D6
	Serial1.begin(9600);
 8080900:	f002 f87a 	bl	80829f8 <_Z22__fetch_global_Serial1v>
 8080904:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080908:	f002 f870 	bl	80829ec <_ZN11USARTSerial5beginEm>

	// Settings D6 LOW powers up the GPS module
    pinMode(D6, OUTPUT);
 808090c:	2101      	movs	r1, #1
 808090e:	2006      	movs	r0, #6
 8080910:	f002 f9ba 	bl	8082c88 <pinMode>
    digitalWrite(D6, LOW);
 8080914:	2100      	movs	r1, #0
 8080916:	2006      	movs	r0, #6
 8080918:	f002 f9c7 	bl	8082caa <digitalWrite>
 808091c:	f000 fe14 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
    startFix = millis();
 8080920:	4b0f      	ldr	r3, [pc, #60]	; (8080960 <setup+0x70>)
    gettingFix = true;
 8080922:	2401      	movs	r4, #1
	Serial1.begin(9600);

	// Settings D6 LOW powers up the GPS module
    pinMode(D6, OUTPUT);
    digitalWrite(D6, LOW);
    startFix = millis();
 8080924:	6018      	str	r0, [r3, #0]
    gettingFix = true;
 8080926:	4b0f      	ldr	r3, [pc, #60]	; (8080964 <setup+0x74>)

    // To use an external antenna, uncomment this line:
    { AssetTracker t; t.antennaExternal(); }
 8080928:	a801      	add	r0, sp, #4

	// Settings D6 LOW powers up the GPS module
    pinMode(D6, OUTPUT);
    digitalWrite(D6, LOW);
    startFix = millis();
    gettingFix = true;
 808092a:	701c      	strb	r4, [r3, #0]

    // To use an external antenna, uncomment this line:
    { AssetTracker t; t.antennaExternal(); }
 808092c:	f000 f83a 	bl	80809a4 <_ZN12AssetTrackerC1Ev>
 8080930:	a801      	add	r0, sp, #4
 8080932:	f000 f881 	bl	8080a38 <_ZN12AssetTracker15antennaExternalEv>
 8080936:	a801      	add	r0, sp, #4
 8080938:	f000 f820 	bl	808097c <_ZN12AssetTrackerD1Ev>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 808093c:	4a0a      	ldr	r2, [pc, #40]	; (8080968 <setup+0x78>)
 808093e:	490b      	ldr	r1, [pc, #44]	; (808096c <setup+0x7c>)
 8080940:	480b      	ldr	r0, [pc, #44]	; (8080970 <setup+0x80>)
 8080942:	f001 fbd5 	bl	80820f0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080946:	2300      	movs	r3, #0
 8080948:	2202      	movs	r2, #2
 808094a:	490a      	ldr	r1, [pc, #40]	; (8080974 <setup+0x84>)
 808094c:	480a      	ldr	r0, [pc, #40]	; (8080978 <setup+0x88>)
 808094e:	f000 ff99 	bl	8081884 <spark_variable>
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value)
    {
        system_set_flag(flag, value, nullptr);
 8080952:	2200      	movs	r2, #0
 8080954:	4621      	mov	r1, r4
 8080956:	4620      	mov	r0, r4
 8080958:	f000 ff0e 	bl	8081778 <system_set_flag>

	Particle.function("kill",forceSleep);
	Particle.variable("getAliveState", &aliveState, INT);

	System.enableUpdates();
}
 808095c:	b008      	add	sp, #32
 808095e:	bd10      	pop	{r4, pc}
 8080960:	200000a8 	.word	0x200000a8
 8080964:	20000284 	.word	0x20000284
 8080968:	0808426a 	.word	0x0808426a
 808096c:	080800b5 	.word	0x080800b5
 8080970:	080820c5 	.word	0x080820c5
 8080974:	20000028 	.word	0x20000028
 8080978:	0808426f 	.word	0x0808426f

0808097c <_ZN12AssetTrackerD1Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {

}

AssetTracker::~AssetTracker() {
 808097c:	b510      	push	{r4, lr}
 808097e:	4604      	mov	r4, r0
 8080980:	4b02      	ldr	r3, [pc, #8]	; (808098c <_ZN12AssetTrackerD1Ev+0x10>)
 8080982:	6003      	str	r3, [r0, #0]
 8080984:	f000 f880 	bl	8080a88 <_ZN13LegacyAdapterD1Ev>

}
 8080988:	4620      	mov	r0, r4
 808098a:	bd10      	pop	{r4, pc}
 808098c:	08084290 	.word	0x08084290

08080990 <_ZN12AssetTrackerD0Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {

}

AssetTracker::~AssetTracker() {
 8080990:	b510      	push	{r4, lr}
 8080992:	4604      	mov	r4, r0

}
 8080994:	f7ff fff2 	bl	808097c <_ZN12AssetTrackerD1Ev>
 8080998:	4620      	mov	r0, r4
 808099a:	211c      	movs	r1, #28
 808099c:	f002 fa3d 	bl	8082e1a <_ZdlPvj>
 80809a0:	4620      	mov	r0, r4
 80809a2:	bd10      	pop	{r4, pc}

080809a4 <_ZN12AssetTrackerC1Ev>:
#define LOCK_WIRE WITH_LOCK(wire)
#else
#define LOCK_WIRE
#endif

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
 80809a4:	b538      	push	{r3, r4, r5, lr}
 80809a6:	4604      	mov	r4, r0
 80809a8:	4908      	ldr	r1, [pc, #32]	; (80809cc <_ZN12AssetTrackerC1Ev+0x28>)
 80809aa:	f000 f875 	bl	8080a98 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
 80809ae:	4b08      	ldr	r3, [pc, #32]	; (80809d0 <_ZN12AssetTrackerC1Ev+0x2c>)
 80809b0:	2500      	movs	r5, #0
 80809b2:	6023      	str	r3, [r4, #0]
 80809b4:	7225      	strb	r5, [r4, #8]

	void threadFunction();
	static void threadFunctionStatic(void *param);

	bool useWire = false;
	TwoWire &wire = Wire;
 80809b6:	f002 f9eb 	bl	8082d90 <_Z19__fetch_global_Wirev>
 80809ba:	2342      	movs	r3, #66	; 0x42
 80809bc:	60e0      	str	r0, [r4, #12]
 80809be:	7423      	strb	r3, [r4, #16]
	uint8_t wireAddr = 0x42;
	USARTSerial &serialPort = Serial1;
 80809c0:	f002 f81a 	bl	80829f8 <_Z22__fetch_global_Serial1v>
 80809c4:	61a5      	str	r5, [r4, #24]
 80809c6:	6160      	str	r0, [r4, #20]

}
 80809c8:	4620      	mov	r0, r4
 80809ca:	bd38      	pop	{r3, r4, r5, pc}
 80809cc:	2000028c 	.word	0x2000028c
 80809d0:	08084290 	.word	0x08084290

080809d4 <_ZN12AssetTracker11sendCommandEPKhj>:

void AssetTracker::gpsOff(void) {
    digitalWrite(GPS_POWER_PIN, HIGH);
}

void AssetTracker::sendCommand(const uint8_t *cmd, size_t len) {
 80809d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!useWire) {
 80809d8:	7a03      	ldrb	r3, [r0, #8]

void AssetTracker::gpsOff(void) {
    digitalWrite(GPS_POWER_PIN, HIGH);
}

void AssetTracker::sendCommand(const uint8_t *cmd, size_t len) {
 80809da:	4604      	mov	r4, r0
 80809dc:	4689      	mov	r9, r1
 80809de:	4617      	mov	r7, r2
	if (!useWire) {
 80809e0:	b92b      	cbnz	r3, 80809ee <_ZN12AssetTracker11sendCommandEPKhj+0x1a>

				res = wire.endTransmission((offset >= len));
			}
		}
	}
}
 80809e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    digitalWrite(GPS_POWER_PIN, HIGH);
}

void AssetTracker::sendCommand(const uint8_t *cmd, size_t len) {
	if (!useWire) {
		serialPort.write(cmd, len);
 80809e6:	6940      	ldr	r0, [r0, #20]
 80809e8:	6803      	ldr	r3, [r0, #0]
 80809ea:	68db      	ldr	r3, [r3, #12]
 80809ec:	4718      	bx	r3
	}
	else {
		// LOCK_WIRE is WITH_LOCK(wire) on 0.8.0 and later
		LOCK_WIRE {
 80809ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80809f2:	2500      	movs	r5, #0
 80809f4:	4640      	mov	r0, r8
 80809f6:	f002 f894 	bl	8082b22 <_ZN7TwoWire4lockEv>
			size_t offset = 0;

			while(offset < len) {
 80809fa:	42bd      	cmp	r5, r7
 80809fc:	d217      	bcs.n	8080a2e <_ZN12AssetTracker11sendCommandEPKhj+0x5a>
				uint8_t res;

				size_t reqLen = (len - offset);
 80809fe:	1b7e      	subs	r6, r7, r5
 8080a00:	2e20      	cmp	r6, #32
				if (reqLen > 32) {
					reqLen = 32;
				}

				wire.beginTransmission(wireAddr);
 8080a02:	7c21      	ldrb	r1, [r4, #16]
 8080a04:	68e0      	ldr	r0, [r4, #12]
 8080a06:	bf28      	it	cs
 8080a08:	2620      	movcs	r6, #32
 8080a0a:	f002 f87b 	bl	8082b04 <_ZN7TwoWire17beginTransmissionEh>

				wire.write(&cmd[offset], reqLen);
 8080a0e:	68e0      	ldr	r0, [r4, #12]
 8080a10:	eb09 0105 	add.w	r1, r9, r5
 8080a14:	6803      	ldr	r3, [r0, #0]
 8080a16:	4632      	mov	r2, r6
 8080a18:	68db      	ldr	r3, [r3, #12]

				offset += reqLen;
 8080a1a:	4435      	add	r5, r6
					reqLen = 32;
				}

				wire.beginTransmission(wireAddr);

				wire.write(&cmd[offset], reqLen);
 8080a1c:	4798      	blx	r3

				offset += reqLen;

				res = wire.endTransmission((offset >= len));
 8080a1e:	42af      	cmp	r7, r5
 8080a20:	bf8c      	ite	hi
 8080a22:	2100      	movhi	r1, #0
 8080a24:	2101      	movls	r1, #1
 8080a26:	68e0      	ldr	r0, [r4, #12]
 8080a28:	f002 f873 	bl	8082b12 <_ZN7TwoWire15endTransmissionEh>
	else {
		// LOCK_WIRE is WITH_LOCK(wire) on 0.8.0 and later
		LOCK_WIRE {
			size_t offset = 0;

			while(offset < len) {
 8080a2c:	e7e5      	b.n	80809fa <_ZN12AssetTracker11sendCommandEPKhj+0x26>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8080a2e:	4640      	mov	r0, r8

				res = wire.endTransmission((offset >= len));
			}
		}
	}
}
 8080a30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080a34:	f002 b87e 	b.w	8082b34 <_ZN7TwoWire6unlockEv>

08080a38 <_ZN12AssetTracker15antennaExternalEv>:
bool AssetTracker::antennaInternal() {
	sendCommand(internalANT, sizeof(internalANT));
	return true;
}

bool AssetTracker::antennaExternal() {
 8080a38:	b508      	push	{r3, lr}
	sendCommand(externalANT, sizeof(externalANT));
 8080a3a:	220c      	movs	r2, #12
 8080a3c:	4902      	ldr	r1, [pc, #8]	; (8080a48 <_ZN12AssetTracker15antennaExternalEv+0x10>)
 8080a3e:	f7ff ffc9 	bl	80809d4 <_ZN12AssetTracker11sendCommandEPKhj>
	return true;
}
 8080a42:	2001      	movs	r0, #1
 8080a44:	bd08      	pop	{r3, pc}
 8080a46:	bf00      	nop
 8080a48:	2000002c 	.word	0x2000002c

08080a4c <_GLOBAL__sub_I_emptyResponse>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
 8080a4c:	b510      	push	{r4, lr}
 */

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
 8080a4e:	4c09      	ldr	r4, [pc, #36]	; (8080a74 <_GLOBAL__sub_I_emptyResponse+0x28>)
 8080a50:	f000 fd0a 	bl	8081468 <HAL_Pin_Map>
 8080a54:	2311      	movs	r3, #17
 8080a56:	220c      	movs	r2, #12
 8080a58:	4907      	ldr	r1, [pc, #28]	; (8080a78 <_GLOBAL__sub_I_emptyResponse+0x2c>)
 8080a5a:	4620      	mov	r0, r4
 8080a5c:	f000 fcde 	bl	808141c <_ZN9LIS3DHSPIC1ER8SPIClassii>
 8080a60:	4620      	mov	r0, r4
 8080a62:	4a06      	ldr	r2, [pc, #24]	; (8080a7c <_GLOBAL__sub_I_emptyResponse+0x30>)
 8080a64:	4906      	ldr	r1, [pc, #24]	; (8080a80 <_GLOBAL__sub_I_emptyResponse+0x34>)
 8080a66:	f002 f9d3 	bl	8082e10 <__aeabi_atexit>
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
 8080a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
static TinyGPSPlus gps;
 8080a6e:	4805      	ldr	r0, [pc, #20]	; (8080a84 <_GLOBAL__sub_I_emptyResponse+0x38>)
 8080a70:	f000 b870 	b.w	8080b54 <_ZN11TinyGPSPlusC1Ev>
 8080a74:	2000042c 	.word	0x2000042c
 8080a78:	20000900 	.word	0x20000900
 8080a7c:	200000a4 	.word	0x200000a4
 8080a80:	08081149 	.word	0x08081149
 8080a84:	2000028c 	.word	0x2000028c

08080a88 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
 8080a88:	4770      	bx	lr

08080a8a <_ZN13LegacyAdapterD0Ev>:

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
 8080a8a:	b510      	push	{r4, lr}
 8080a8c:	4604      	mov	r4, r0

}
 8080a8e:	2108      	movs	r1, #8
 8080a90:	f002 f9c3 	bl	8082e1a <_ZdlPvj>
 8080a94:	4620      	mov	r0, r4
 8080a96:	bd10      	pop	{r4, pc}

08080a98 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:

#include "LegacyAdapter.h"


LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
 8080a98:	4a01      	ldr	r2, [pc, #4]	; (8080aa0 <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
 8080a9a:	6041      	str	r1, [r0, #4]
 8080a9c:	6002      	str	r2, [r0, #0]

}
 8080a9e:	4770      	bx	lr
 8080aa0:	080842a0 	.word	0x080842a0

08080aa4 <_GLOBAL__sub_I__ZN13LegacyAdapterC2ER11TinyGPSPlus>:
 8080aa4:	f000 bce0 	b.w	8081468 <HAL_Pin_Map>

08080aa8 <_ZN11TinyGPSDataC1Ev>:
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
 8080aa8:	2200      	movs	r2, #0
 8080aaa:	7002      	strb	r2, [r0, #0]
 8080aac:	7042      	strb	r2, [r0, #1]
{
	uint16_t deg; 			//!< Degree value (0 <= deg < 365)
	uint32_t billionths; 	//!< Billionths of a segree
	bool negative; 			//!< true if negative (south latitude or east longitude)
public:
	RawDegrees() : deg(0), billionths(0), negative(false)
 8080aae:	8082      	strh	r2, [r0, #4]
 8080ab0:	6082      	str	r2, [r0, #8]
 8080ab2:	7302      	strb	r2, [r0, #12]
 8080ab4:	8202      	strh	r2, [r0, #16]
 8080ab6:	6142      	str	r2, [r0, #20]
 8080ab8:	7602      	strb	r2, [r0, #24]
 8080aba:	8382      	strh	r2, [r0, #28]
 8080abc:	6202      	str	r2, [r0, #32]
 8080abe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8080ac2:	8502      	strh	r2, [r0, #40]	; 0x28
 8080ac4:	62c2      	str	r2, [r0, #44]	; 0x2c
 8080ac6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
 8080aca:	6342      	str	r2, [r0, #52]	; 0x34
	uint8_t day();

	/**
	 * @brief Constructor
	 */
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
 8080acc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8080ad0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 8080ad4:	63c2      	str	r2, [r0, #60]	; 0x3c
 8080ad6:	6402      	str	r2, [r0, #64]	; 0x40
 8080ad8:	6442      	str	r2, [r0, #68]	; 0x44
	uint8_t centisecond();

	/**
	 * @brief Constructor
	 */
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
 8080ada:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
 8080ade:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 8080ae2:	64c2      	str	r2, [r0, #76]	; 0x4c
 8080ae4:	6502      	str	r2, [r0, #80]	; 0x50
 8080ae6:	6542      	str	r2, [r0, #84]	; 0x54
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
 8080ae8:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
 8080aec:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
 8080af0:	65c2      	str	r2, [r0, #92]	; 0x5c
 8080af2:	6602      	str	r2, [r0, #96]	; 0x60
 8080af4:	6642      	str	r2, [r0, #100]	; 0x64
 8080af6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
 8080afa:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
 8080afe:	66c2      	str	r2, [r0, #108]	; 0x6c
 8080b00:	6702      	str	r2, [r0, #112]	; 0x70
 8080b02:	6742      	str	r2, [r0, #116]	; 0x74
 8080b04:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8080b08:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
 8080b0c:	67c2      	str	r2, [r0, #124]	; 0x7c
 8080b0e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8080b12:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8080b16:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
 8080b1a:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 8080b1e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 8080b22:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8080b26:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
 8080b2a:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 8080b2e:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
 8080b32:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
 8080b36:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
 8080b3a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
 8080b3e:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
 8080b42:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
 8080b46:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
 8080b4a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
 8080b4e:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
 *
 * For best thread safety, you should avoid using fields like location directly and instead should
 * use methods like getLocation() to make a copy of the location data. This will assure that your
 * data is valid and does not change while you are reading it.
 */
class TinyGPSData {
 8080b52:	4770      	bx	lr

08080b54 <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
 8080b54:	b510      	push	{r4, lr}
 8080b56:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
 8080b58:	f7ff ffa6 	bl	8080aa8 <_ZN11TinyGPSDataC1Ev>
 8080b5c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8080b60:	f7ff ffa2 	bl	8080aa8 <_ZN11TinyGPSDataC1Ev>
 8080b64:	2300      	movs	r3, #0
 8080b66:	2202      	movs	r2, #2
 8080b68:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
 8080b6c:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
 8080b70:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
 8080b74:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
 8080b78:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
 8080b7c:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
 8080b80:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8080b84:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8080b88:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
 8080b8c:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8080b90:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
 8080b94:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
{
  term[0] = '\0';
 8080b98:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
 8080b9c:	4620      	mov	r0, r4
 8080b9e:	bd10      	pop	{r4, pc}

08080ba0 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
 8080ba0:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8080ba4:	2b05      	cmp	r3, #5
 8080ba6:	d802      	bhi.n	8080bae <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
 8080ba8:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
 8080bac:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
 8080bae:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8080bb2:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
 8080bb4:	bf94      	ite	ls
 8080bb6:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
 8080bba:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
 8080bbe:	4770      	bx	lr

08080bc0 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
 8080bc0:	b538      	push	{r3, r4, r5, lr}
 8080bc2:	4604      	mov	r4, r0
  bool negative = *term == '-';
 8080bc4:	7805      	ldrb	r5, [r0, #0]
  if (negative) ++term;
 8080bc6:	2d2d      	cmp	r5, #45	; 0x2d
 8080bc8:	bf08      	it	eq
 8080bca:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
 8080bcc:	4620      	mov	r0, r4
 8080bce:	f003 f95f 	bl	8083e90 <atol>
 8080bd2:	2364      	movs	r3, #100	; 0x64
 8080bd4:	4358      	muls	r0, r3
 8080bd6:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
 8080bd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8080bdc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8080be0:	2909      	cmp	r1, #9
 8080be2:	d9f8      	bls.n	8080bd6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
 8080be4:	2b2e      	cmp	r3, #46	; 0x2e
 8080be6:	d10b      	bne.n	8080c00 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
 8080be8:	7853      	ldrb	r3, [r2, #1]
 8080bea:	3b30      	subs	r3, #48	; 0x30
 8080bec:	2b09      	cmp	r3, #9
 8080bee:	d807      	bhi.n	8080c00 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
 8080bf0:	210a      	movs	r1, #10
 8080bf2:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
 8080bf6:	7893      	ldrb	r3, [r2, #2]
 8080bf8:	3b30      	subs	r3, #48	; 0x30
 8080bfa:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
 8080bfc:	bf98      	it	ls
 8080bfe:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
 8080c00:	2d2d      	cmp	r5, #45	; 0x2d
 8080c02:	bf08      	it	eq
 8080c04:	4240      	negeq	r0, r0
}
 8080c06:	bd38      	pop	{r3, r4, r5, pc}

08080c08 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
 8080c08:	b538      	push	{r3, r4, r5, lr}
 8080c0a:	4604      	mov	r4, r0
 8080c0c:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
 8080c0e:	f003 f93f 	bl	8083e90 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 8080c12:	2364      	movs	r3, #100	; 0x64
 8080c14:	fbb0 f2f3 	udiv	r2, r0, r3
 8080c18:	fb03 0012 	mls	r0, r3, r2, r0
 8080c1c:	4b11      	ldr	r3, [pc, #68]	; (8080c64 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
 8080c1e:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 8080c20:	4343      	muls	r3, r0
 8080c22:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
 8080c24:	7802      	ldrb	r2, [r0, #0]
 8080c26:	4604      	mov	r4, r0
 8080c28:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8080c2c:	2909      	cmp	r1, #9
 8080c2e:	f100 0001 	add.w	r0, r0, #1
 8080c32:	d9f7      	bls.n	8080c24 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
 8080c34:	2a2e      	cmp	r2, #46	; 0x2e
 8080c36:	d10b      	bne.n	8080c50 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
 8080c38:	490a      	ldr	r1, [pc, #40]	; (8080c64 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
 8080c3a:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
 8080c3c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8080c40:	3a30      	subs	r2, #48	; 0x30
 8080c42:	2a09      	cmp	r2, #9
 8080c44:	d804      	bhi.n	8080c50 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
 8080c46:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
 8080c4a:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
 8080c4e:	e7f5      	b.n	8080c3c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 8080c50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080c54:	3301      	adds	r3, #1
 8080c56:	2203      	movs	r2, #3
 8080c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8080c5c:	606b      	str	r3, [r5, #4]
  deg.negative = false;
 8080c5e:	2300      	movs	r3, #0
 8080c60:	722b      	strb	r3, [r5, #8]
 8080c62:	bd38      	pop	{r3, r4, r5, pc}
 8080c64:	00989680 	.word	0x00989680

08080c68 <_ZN15TinyGPSLocation6commitEv>:
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
 8080c68:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 8080c6a:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
 8080c6c:	f853 2f1c 	ldr.w	r2, [r3, #28]!
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 8080c70:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
 8080c72:	6042      	str	r2, [r0, #4]
 8080c74:	685a      	ldr	r2, [r3, #4]
 8080c76:	6082      	str	r2, [r0, #8]
 8080c78:	7a1b      	ldrb	r3, [r3, #8]
 8080c7a:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
 8080c7c:	4603      	mov	r3, r0
 8080c7e:	f853 2f28 	ldr.w	r2, [r3, #40]!
 8080c82:	6102      	str	r2, [r0, #16]
 8080c84:	685a      	ldr	r2, [r3, #4]
 8080c86:	6142      	str	r2, [r0, #20]
 8080c88:	7a1b      	ldrb	r3, [r3, #8]
 8080c8a:	7603      	strb	r3, [r0, #24]
 8080c8c:	f000 fc5c 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080c90:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
 8080c92:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
 8080c94:	7063      	strb	r3, [r4, #1]
 8080c96:	7023      	strb	r3, [r4, #0]
 8080c98:	bd10      	pop	{r4, pc}
 8080c9a:	0000      	movs	r0, r0
 8080c9c:	0000      	movs	r0, r0
	...

08080ca0 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
 8080ca0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
 8080ca2:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
 8080ca4:	4604      	mov	r4, r0
   updated = false;
 8080ca6:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
 8080ca8:	6880      	ldr	r0, [r0, #8]
 8080caa:	f002 fb45 	bl	8083338 <__aeabi_ui2d>
 8080cae:	a30a      	add	r3, pc, #40	; (adr r3, 8080cd8 <_ZN15TinyGPSLocation3latEv+0x38>)
 8080cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080cb4:	f002 fce0 	bl	8083678 <__aeabi_ddiv>
 8080cb8:	4606      	mov	r6, r0
 8080cba:	88a0      	ldrh	r0, [r4, #4]
 8080cbc:	460f      	mov	r7, r1
 8080cbe:	f002 fb4b 	bl	8083358 <__aeabi_i2d>
 8080cc2:	460b      	mov	r3, r1
 8080cc4:	4602      	mov	r2, r0
 8080cc6:	4639      	mov	r1, r7
 8080cc8:	4630      	mov	r0, r6
 8080cca:	f002 f9f9 	bl	80830c0 <__adddf3>
   return rawLatData.negative ? -ret : ret;
 8080cce:	7b23      	ldrb	r3, [r4, #12]
 8080cd0:	b10b      	cbz	r3, 8080cd6 <_ZN15TinyGPSLocation3latEv+0x36>
 8080cd2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
}
 8080cd6:	bdd0      	pop	{r4, r6, r7, pc}
 8080cd8:	00000000 	.word	0x00000000
 8080cdc:	41cdcd65 	.word	0x41cdcd65

08080ce0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
 8080ce0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
 8080ce2:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
 8080ce4:	4604      	mov	r4, r0
   updated = false;
 8080ce6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
 8080ce8:	6940      	ldr	r0, [r0, #20]
 8080cea:	f002 fb25 	bl	8083338 <__aeabi_ui2d>
 8080cee:	a30a      	add	r3, pc, #40	; (adr r3, 8080d18 <_ZN15TinyGPSLocation3lngEv+0x38>)
 8080cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080cf4:	f002 fcc0 	bl	8083678 <__aeabi_ddiv>
 8080cf8:	4606      	mov	r6, r0
 8080cfa:	8a20      	ldrh	r0, [r4, #16]
 8080cfc:	460f      	mov	r7, r1
 8080cfe:	f002 fb2b 	bl	8083358 <__aeabi_i2d>
 8080d02:	460b      	mov	r3, r1
 8080d04:	4602      	mov	r2, r0
 8080d06:	4639      	mov	r1, r7
 8080d08:	4630      	mov	r0, r6
 8080d0a:	f002 f9d9 	bl	80830c0 <__adddf3>
   return rawLngData.negative ? -ret : ret;
 8080d0e:	7e23      	ldrb	r3, [r4, #24]
 8080d10:	b10b      	cbz	r3, 8080d16 <_ZN15TinyGPSLocation3lngEv+0x36>
 8080d12:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
}
 8080d16:	bdd0      	pop	{r4, r6, r7, pc}
 8080d18:	00000000 	.word	0x00000000
 8080d1c:	41cdcd65 	.word	0x41cdcd65

08080d20 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
 8080d20:	b510      	push	{r4, lr}
   date = newDate;
 8080d22:	6883      	ldr	r3, [r0, #8]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
 8080d24:	4604      	mov	r4, r0
   date = newDate;
 8080d26:	6043      	str	r3, [r0, #4]
 8080d28:	f000 fc0e 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080d2c:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
 8080d2e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
 8080d30:	7063      	strb	r3, [r4, #1]
 8080d32:	7023      	strb	r3, [r4, #0]
 8080d34:	bd10      	pop	{r4, pc}

08080d36 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
 8080d36:	b510      	push	{r4, lr}
   time = newTime;
 8080d38:	6883      	ldr	r3, [r0, #8]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
 8080d3a:	4604      	mov	r4, r0
   time = newTime;
 8080d3c:	6043      	str	r3, [r0, #4]
 8080d3e:	f000 fc03 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080d42:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
 8080d44:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
 8080d46:	7063      	strb	r3, [r4, #1]
 8080d48:	7023      	strb	r3, [r4, #0]
 8080d4a:	bd10      	pop	{r4, pc}

08080d4c <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
 8080d4c:	b510      	push	{r4, lr}
 8080d4e:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
 8080d50:	4608      	mov	r0, r1
 8080d52:	f7ff ff35 	bl	8080bc0 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 8080d56:	60a0      	str	r0, [r4, #8]
 8080d58:	bd10      	pop	{r4, pc}

08080d5a <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
 8080d5a:	b510      	push	{r4, lr}
 8080d5c:	4604      	mov	r4, r0
   newDate = atol(term);
 8080d5e:	4608      	mov	r0, r1
 8080d60:	f003 f896 	bl	8083e90 <atol>
 8080d64:	60a0      	str	r0, [r4, #8]
 8080d66:	bd10      	pop	{r4, pc}

08080d68 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 8080d68:	b510      	push	{r4, lr}
   val = newval;
 8080d6a:	68c3      	ldr	r3, [r0, #12]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 8080d6c:	4604      	mov	r4, r0
   val = newval;
 8080d6e:	6083      	str	r3, [r0, #8]
 8080d70:	f000 fbea 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080d74:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
 8080d76:	6060      	str	r0, [r4, #4]
   valid = updated = true;
 8080d78:	7063      	strb	r3, [r4, #1]
 8080d7a:	7023      	strb	r3, [r4, #0]
 8080d7c:	bd10      	pop	{r4, pc}

08080d7e <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
 8080d7e:	b510      	push	{r4, lr}
 8080d80:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
 8080d82:	4608      	mov	r0, r1
 8080d84:	f7ff ff1c 	bl	8080bc0 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 8080d88:	60e0      	str	r0, [r4, #12]
 8080d8a:	bd10      	pop	{r4, pc}

08080d8c <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
 8080d8c:	b510      	push	{r4, lr}
   val = newval;
 8080d8e:	68c3      	ldr	r3, [r0, #12]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
 8080d90:	4604      	mov	r4, r0
   val = newval;
 8080d92:	6083      	str	r3, [r0, #8]
 8080d94:	f000 fbd8 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080d98:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
 8080d9a:	6060      	str	r0, [r4, #4]
   valid = updated = true;
 8080d9c:	7063      	strb	r3, [r4, #1]
 8080d9e:	7023      	strb	r3, [r4, #0]
 8080da0:	bd10      	pop	{r4, pc}

08080da2 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
 8080da2:	b510      	push	{r4, lr}
 8080da4:	4604      	mov	r4, r0
   newval = atol(term);
 8080da6:	4608      	mov	r0, r1
 8080da8:	f003 f872 	bl	8083e90 <atol>
 8080dac:	60e0      	str	r0, [r4, #12]
 8080dae:	bd10      	pop	{r4, pc}

08080db0 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 8080db0:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
 8080db2:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 8080db4:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
 8080db6:	3010      	adds	r0, #16
 8080db8:	f003 f8c2 	bl	8083f40 <strcpy>
 8080dbc:	f000 fbc4 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080dc0:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
 8080dc2:	6220      	str	r0, [r4, #32]
   valid = updated = true;
 8080dc4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 8080dc8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8080dcc:	bd10      	pop	{r4, pc}

08080dce <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 8080dce:	2210      	movs	r2, #16
 8080dd0:	f003 b8e1 	b.w	8083f96 <strncpy>

08080dd4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 8080dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
 8080dd6:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 8080dda:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
 8080ddc:	2d00      	cmp	r5, #0
 8080dde:	f000 808b 	beq.w	8080ef8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x124>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 8080de2:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
 8080de6:	f7ff fedb 	bl	8080ba0 <_ZN11TinyGPSPlus7fromHexEc>
 8080dea:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
 8080dee:	4602      	mov	r2, r0
 8080df0:	4620      	mov	r0, r4
 8080df2:	f7ff fed5 	bl	8080ba0 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
 8080df6:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
 8080dfa:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8080dfe:	b2c0      	uxtb	r0, r0
 8080e00:	4283      	cmp	r3, r0
 8080e02:	d172      	bne.n	8080eea <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x116>
    {
      passedChecksumCount++;
 8080e04:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8080e08:	3301      	adds	r3, #1
 8080e0a:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
 8080e0e:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
 8080e12:	b123      	cbz	r3, 8080e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
 8080e14:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8080e18:	3301      	adds	r3, #1
 8080e1a:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194

      switch(curSentenceType)
 8080e1e:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
 8080e22:	b1fb      	cbz	r3, 8080e64 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x90>
 8080e24:	2b01      	cmp	r3, #1
 8080e26:	d14d      	bne.n	8080ec4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf0>
      {
      case GPS_SENTENCE_GPRMC:
    	tempData.date.commit();
 8080e28:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8080e2c:	f7ff ff78 	bl	8080d20 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
 8080e30:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8080e34:	f7ff ff7f 	bl	8080d36 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8080e38:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
 8080e3c:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8080e40:	b14b      	cbz	r3, 8080e56 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        {
           tempData.location.commit();
 8080e42:	4630      	mov	r0, r6
 8080e44:	f7ff ff10 	bl	8080c68 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
 8080e48:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8080e4c:	f7ff ff8c 	bl	8080d68 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
 8080e50:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8080e54:	e027      	b.n	8080ea6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
 8080e56:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
 8080e5a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
 8080e5e:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
 8080e62:	e022      	b.n	8080eaa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
        }
        break;
      case GPS_SENTENCE_GPGGA:
        tempData.time.commit();
 8080e64:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8080e68:	f7ff ff65 	bl	8080d36 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8080e6c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
 8080e70:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8080e74:	b15b      	cbz	r3, 8080e8e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xba>
        {
          tempData.location.commit();
 8080e76:	4630      	mov	r0, r6
 8080e78:	f7ff fef6 	bl	8080c68 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
 8080e7c:	f504 7098 	add.w	r0, r4, #304	; 0x130
 8080e80:	f7ff ff72 	bl	8080d68 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
 8080e84:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8080e88:	f7ff ff6e 	bl	8080d68 <_ZN14TinyGPSDecimal6commitEv>
 8080e8c:	e005      	b.n	8080e9a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
 8080e8e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
 8080e92:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
 8080e96:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
        {
            tempData.location.invalidate();
            tempData.altitude.invalidate();
            tempData.geoidSeparation.invalidate();
        }
        tempData.satellites.commit();
 8080e9a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8080e9e:	f7ff ff75 	bl	8080d8c <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
 8080ea2:	f504 70b0 	add.w	r0, r4, #352	; 0x160
 8080ea6:	f7ff ff5f 	bl	8080d68 <_ZN14TinyGPSDecimal6commitEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 8080eaa:	2100      	movs	r1, #0
 8080eac:	4608      	mov	r0, r1
 8080eae:	f000 fb53 	bl	8081558 <os_thread_scheduling>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
 8080eb2:	4631      	mov	r1, r6
 8080eb4:	22b8      	movs	r2, #184	; 0xb8
 8080eb6:	4620      	mov	r0, r4
 8080eb8:	f002 fffc 	bl	8083eb4 <memcpy>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 8080ebc:	2100      	movs	r1, #0
 8080ebe:	2001      	movs	r0, #1
 8080ec0:	f000 fb4a 	bl	8081558 <os_thread_scheduling>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 8080ec4:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
 8080ec8:	2e00      	cmp	r6, #0
 8080eca:	f000 80d9 	beq.w	8081080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
 8080ece:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8080ed2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8080ed4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8080ed6:	f003 f829 	bl	8083f2c <strcmp>
 8080eda:	2800      	cmp	r0, #0
 8080edc:	f040 80d0 	bne.w	8081080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
         p->commit();
 8080ee0:	4630      	mov	r0, r6
 8080ee2:	f7ff ff65 	bl	8080db0 <_ZN13TinyGPSCustom6commitEv>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 8080ee6:	6b36      	ldr	r6, [r6, #48]	; 0x30
 8080ee8:	e7ee      	b.n	8080ec8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      return true;
    }

    else
    {
      ++failedChecksumCount;
 8080eea:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    }

    return false;
 8080eee:	2500      	movs	r5, #0
      return true;
    }

    else
    {
      ++failedChecksumCount;
 8080ef0:	3301      	adds	r3, #1
 8080ef2:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    }

    return false;
 8080ef6:	e0c3      	b.n	8081080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
 8080ef8:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
 8080efc:	bb72      	cbnz	r2, 8080f5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
 8080efe:	f500 76b9 	add.w	r6, r0, #370	; 0x172
 8080f02:	4960      	ldr	r1, [pc, #384]	; (8081084 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
 8080f04:	4630      	mov	r0, r6
 8080f06:	f003 f811 	bl	8083f2c <strcmp>
 8080f0a:	b120      	cbz	r0, 8080f16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x142>
 8080f0c:	495e      	ldr	r1, [pc, #376]	; (8081088 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
 8080f0e:	4630      	mov	r0, r6
 8080f10:	f003 f80c 	bl	8083f2c <strcmp>
 8080f14:	b908      	cbnz	r0, 8080f1a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
      curSentenceType = GPS_SENTENCE_GPRMC;
 8080f16:	2301      	movs	r3, #1
 8080f18:	e00c      	b.n	8080f34 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
 8080f1a:	495c      	ldr	r1, [pc, #368]	; (808108c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
 8080f1c:	4630      	mov	r0, r6
 8080f1e:	f003 f805 	bl	8083f2c <strcmp>
 8080f22:	b120      	cbz	r0, 8080f2e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15a>
 8080f24:	495a      	ldr	r1, [pc, #360]	; (8081090 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2bc>)
 8080f26:	4630      	mov	r0, r6
 8080f28:	f003 f800 	bl	8083f2c <strcmp>
 8080f2c:	b908      	cbnz	r0, 8080f32 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
      curSentenceType = GPS_SENTENCE_GPGGA;
 8080f2e:	2300      	movs	r3, #0
 8080f30:	e000      	b.n	8080f34 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
 8080f32:	2302      	movs	r3, #2
 8080f34:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
 8080f38:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8080f3c:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8080f40:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
 8080f44:	2f00      	cmp	r7, #0
 8080f46:	f000 809b 	beq.w	8081080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
 8080f4a:	4631      	mov	r1, r6
 8080f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8080f4e:	f002 ffed 	bl	8083f2c <strcmp>
 8080f52:	2800      	cmp	r0, #0
 8080f54:	f280 8090 	bge.w	8081078 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a4>
 8080f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8080f5a:	e7ef      	b.n	8080f3c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x168>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
 8080f5c:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
 8080f60:	2902      	cmp	r1, #2
 8080f62:	d071      	beq.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
 8080f64:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
 8080f68:	2b00      	cmp	r3, #0
 8080f6a:	d06d      	beq.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    switch(COMBINE(curSentenceType, curTermNumber))
 8080f6c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8080f70:	3a01      	subs	r2, #1
 8080f72:	2a28      	cmp	r2, #40	; 0x28
 8080f74:	d868      	bhi.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
 8080f76:	e8df f002 	tbb	[pc, r2]
 8080f7a:	2115      	.short	0x2115
 8080f7c:	49322b24 	.word	0x49322b24
 8080f80:	675c5750 	.word	0x675c5750
 8080f84:	67676761 	.word	0x67676761
 8080f88:	67676767 	.word	0x67676767
 8080f8c:	67676767 	.word	0x67676767
 8080f90:	67676767 	.word	0x67676767
 8080f94:	67676767 	.word	0x67676767
 8080f98:	1c156767 	.word	0x1c156767
 8080f9c:	322b2421 	.word	0x322b2421
 8080fa0:	3e39      	.short	0x3e39
 8080fa2:	43          	.byte	0x43
 8080fa3:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
	  tempData.time.setTime(term);
 8080fa4:	f500 71b9 	add.w	r1, r0, #370	; 0x172
 8080fa8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8080fac:	f7ff fece 	bl	8080d4c <_ZN11TinyGPSTime7setTimeEPKc>
      break;
 8080fb0:	e04a      	b.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
 8080fb2:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8080fb6:	4243      	negs	r3, r0
 8080fb8:	4143      	adcs	r3, r0
 8080fba:	e02b      	b.n	8081014 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
 8080fbc:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
 8080fc0:	e008      	b.n	8080fd4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      tempData.location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      tempData.location.rawNewLatData.negative = term[0] == 'S';
 8080fc2:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
 8080fc6:	424b      	negs	r3, r1
 8080fc8:	414b      	adcs	r3, r1
 8080fca:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
 8080fce:	e03b      	b.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
 8080fd0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 8080fd4:	f504 70b9 	add.w	r0, r4, #370	; 0x172
 8080fd8:	f7ff fe16 	bl	8080c08 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
 8080fdc:	e034      	b.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      tempData.location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      tempData.location.rawNewLngData.negative = term[0] == 'W';
 8080fde:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
 8080fe2:	4253      	negs	r3, r2
 8080fe4:	4153      	adcs	r3, r2
 8080fe6:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
 8080fea:	e02d      	b.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
	  tempData.speed.set(term);
 8080fec:	f500 71b9 	add.w	r1, r0, #370	; 0x172
 8080ff0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8080ff4:	e026      	b.n	8081044 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
	  tempData.course.set(term);
 8080ff6:	f500 71b9 	add.w	r1, r0, #370	; 0x172
 8080ffa:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8080ffe:	e021      	b.n	8081044 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
	  tempData.date.setDate(term);
 8081000:	f500 71b9 	add.w	r1, r0, #370	; 0x172
 8081004:	30f0      	adds	r0, #240	; 0xf0
 8081006:	f7ff fea8 	bl	8080d5a <_ZN11TinyGPSDate7setDateEPKc>
      break;
 808100a:	e01d      	b.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
 808100c:	2b30      	cmp	r3, #48	; 0x30
 808100e:	bf94      	ite	ls
 8081010:	2300      	movls	r3, #0
 8081012:	2301      	movhi	r3, #1
 8081014:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
 8081018:	e016      	b.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
	  tempData.satellites.set(term);
 808101a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
 808101e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8081022:	f7ff febe 	bl	8080da2 <_ZN14TinyGPSInteger3setEPKc>
      break;
 8081026:	e00f      	b.n	8081048 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
	  tempData.hdop.set(term);
 8081028:	f500 71b9 	add.w	r1, r0, #370	; 0x172
 808102c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 8081030:	e008      	b.n	8081044 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
	  tempData.altitude.set(term);
 8081032:	f500 71b9 	add.w	r1, r0, #370	; 0x172
 8081036:	f500 7098 	add.w	r0, r0, #304	; 0x130
 808103a:	e003      	b.n	8081044 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 11): // Geoid Separation (GPGGA) (difference between ellipsoid and mean sea level)
	  tempData.geoidSeparation.set(term);
 808103c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
 8081040:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 8081044:	f7ff fe9b 	bl	8080d7e <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 8081048:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
    if (p->termNumber == curTermNumber)
         p->set(term);
 808104c:	f504 77b9 	add.w	r7, r4, #370	; 0x172
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 8081050:	b1b6      	cbz	r6, 8081080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
 8081052:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8081056:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8081058:	6a99      	ldr	r1, [r3, #40]	; 0x28
 808105a:	f002 ff67 	bl	8083f2c <strcmp>
 808105e:	b978      	cbnz	r0, 8081080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
 8081060:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8081062:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
 8081066:	429a      	cmp	r2, r3
 8081068:	dc0a      	bgt.n	8081080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
    if (p->termNumber == curTermNumber)
 808106a:	d103      	bne.n	8081074 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a0>
         p->set(term);
 808106c:	4639      	mov	r1, r7
 808106e:	4630      	mov	r0, r6
 8081070:	f7ff fead 	bl	8080dce <_ZN13TinyGPSCustom3setEPKc>
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 8081074:	6b36      	ldr	r6, [r6, #48]	; 0x30
 8081076:	e7eb      	b.n	8081050 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
 8081078:	d002      	beq.n	8081080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
       customCandidates = NULL;
 808107a:	2300      	movs	r3, #0
 808107c:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
 8081080:	4628      	mov	r0, r5
 8081082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8081084:	080842a8 	.word	0x080842a8
 8081088:	080842ae 	.word	0x080842ae
 808108c:	080842b4 	.word	0x080842b4
 8081090:	080842ba 	.word	0x080842ba

08081094 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 8081094:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
 8081096:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190

  switch(c)
 808109a:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
 808109c:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 80810a0:	4604      	mov	r4, r0
 80810a2:	460d      	mov	r5, r1
  ++encodedCharCount;
 80810a4:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190

  switch(c)
 80810a8:	d02a      	beq.n	8081100 <_ZN11TinyGPSPlus6encodeEc+0x6c>
 80810aa:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
 80810ae:	d804      	bhi.n	80810ba <_ZN11TinyGPSPlus6encodeEc+0x26>
 80810b0:	290a      	cmp	r1, #10
 80810b2:	d00c      	beq.n	80810ce <_ZN11TinyGPSPlus6encodeEc+0x3a>
 80810b4:	290d      	cmp	r1, #13
 80810b6:	d132      	bne.n	808111e <_ZN11TinyGPSPlus6encodeEc+0x8a>
 80810b8:	e009      	b.n	80810ce <_ZN11TinyGPSPlus6encodeEc+0x3a>
 80810ba:	292a      	cmp	r1, #42	; 0x2a
 80810bc:	d007      	beq.n	80810ce <_ZN11TinyGPSPlus6encodeEc+0x3a>
 80810be:	292c      	cmp	r1, #44	; 0x2c
 80810c0:	d12d      	bne.n	808111e <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
 80810c2:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
 80810c6:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
 80810ca:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
 80810ce:	2b0e      	cmp	r3, #14
 80810d0:	f04f 0000 	mov.w	r0, #0
 80810d4:	d805      	bhi.n	80810e2 <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
 80810d6:	4423      	add	r3, r4
 80810d8:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
 80810dc:	4620      	mov	r0, r4
 80810de:	f7ff fe79 	bl	8080dd4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
 80810e2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
 80810e6:	3301      	adds	r3, #1
 80810e8:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
 80810ec:	2300      	movs	r3, #0
 80810ee:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
 80810f2:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
 80810f6:	425d      	negs	r5, r3
 80810f8:	415d      	adcs	r5, r3
 80810fa:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
      return isValidSentence;
 80810fe:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 8081100:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
 8081102:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 8081104:	f884 0183 	strb.w	r0, [r4, #387]	; 0x183
 8081108:	f884 0182 	strb.w	r0, [r4, #386]	; 0x182
    parity = 0;
 808110c:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
 8081110:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    isChecksumTerm = false;
 8081114:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
    sentenceHasFix = false;
 8081118:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
 808111c:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
 808111e:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
 8081120:	bf9f      	itttt	ls
 8081122:	1c5a      	addls	r2, r3, #1
 8081124:	191b      	addls	r3, r3, r4
 8081126:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
 808112a:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
 808112e:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
 8081132:	b928      	cbnz	r0, 8081140 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
 8081134:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
 8081138:	404d      	eors	r5, r1
 808113a:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
 808113e:	bd38      	pop	{r3, r4, r5, pc}
    return false;
 8081140:	2000      	movs	r0, #0
  }

  return false;
}
 8081142:	bd38      	pop	{r3, r4, r5, pc}

08081144 <_GLOBAL__sub_I__Z7radiansd>:
 8081144:	f000 b990 	b.w	8081468 <HAL_Pin_Map>

08081148 <_ZN9LIS3DHSPID1Ev>:
		spiSetup();
	}
}

LIS3DHSPI::~LIS3DHSPI() {
}
 8081148:	4770      	bx	lr

0808114a <_ZN9LIS3DHSPID0Ev>:
	if (!spiShared) {
		spiSetup();
	}
}

LIS3DHSPI::~LIS3DHSPI() {
 808114a:	b510      	push	{r4, lr}
 808114c:	4604      	mov	r4, r0
}
 808114e:	2118      	movs	r1, #24
 8081150:	f001 fe63 	bl	8082e1a <_ZdlPvj>
 8081154:	4620      	mov	r0, r4
 8081156:	bd10      	pop	{r4, pc}

08081158 <_ZN9LIS3DHSPI14endTransactionEv>:

	// The SPI CS setup time tsu(CS) is 6 ns, should not require a delay here
}

void LIS3DHSPI::endTransaction() {
	digitalWrite(ss, HIGH);
 8081158:	2101      	movs	r1, #1
 808115a:	8a00      	ldrh	r0, [r0, #16]
 808115c:	f001 bda5 	b.w	8082caa <digitalWrite>

08081160 <_ZN9LIS3DHSPI8readDataEhPhj>:
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 8081160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081162:	461e      	mov	r6, r3
 8081164:	460f      	mov	r7, r1
 8081166:	4605      	mov	r5, r0
	beginTransaction();
 8081168:	6803      	ldr	r3, [r0, #0]

void LIS3DHSPI::endTransaction() {
	digitalWrite(ss, HIGH);
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 808116a:	4614      	mov	r4, r2
	beginTransaction();
 808116c:	691b      	ldr	r3, [r3, #16]
 808116e:	4798      	blx	r3

	if (numBytes > 1) {
 8081170:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
 8081172:	bf88      	it	hi
 8081174:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
 8081178:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 808117c:	68e8      	ldr	r0, [r5, #12]
 808117e:	f000 fc41 	bl	8081a04 <_ZN8SPIClass8transferEh>
 8081182:	4426      	add	r6, r4

	for(size_t ii = 0; ii < numBytes; ii++) {
 8081184:	42b4      	cmp	r4, r6
 8081186:	d006      	beq.n	8081196 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
 8081188:	2100      	movs	r1, #0
 808118a:	68e8      	ldr	r0, [r5, #12]
 808118c:	f000 fc3a 	bl	8081a04 <_ZN8SPIClass8transferEh>
 8081190:	f804 0b01 	strb.w	r0, [r4], #1
		addr |= SPI_INCREMENT;
	}

	spi.transfer(SPI_READ | addr);

	for(size_t ii = 0; ii < numBytes; ii++) {
 8081194:	e7f6      	b.n	8081184 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
		buf[ii] = spi.transfer(0);
	}

	endTransaction();
 8081196:	682b      	ldr	r3, [r5, #0]
 8081198:	4628      	mov	r0, r5
 808119a:	695b      	ldr	r3, [r3, #20]
 808119c:	4798      	blx	r3

	return true;
}
 808119e:	2001      	movs	r0, #1
 80811a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080811a2 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80811a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80811a4:	461e      	mov	r6, r3
 80811a6:	460f      	mov	r7, r1
 80811a8:	4605      	mov	r5, r0
	beginTransaction();
 80811aa:	6803      	ldr	r3, [r0, #0]
	endTransaction();

	return true;
}

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80811ac:	4614      	mov	r4, r2
	beginTransaction();
 80811ae:	691b      	ldr	r3, [r3, #16]
 80811b0:	4798      	blx	r3

	if (numBytes > 1) {
 80811b2:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
 80811b4:	bf88      	it	hi
 80811b6:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
 80811ba:	4639      	mov	r1, r7
 80811bc:	68e8      	ldr	r0, [r5, #12]
 80811be:	f000 fc21 	bl	8081a04 <_ZN8SPIClass8transferEh>
 80811c2:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80811c4:	42b4      	cmp	r4, r6
 80811c6:	d005      	beq.n	80811d4 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
 80811c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80811cc:	68e8      	ldr	r0, [r5, #12]
 80811ce:	f000 fc19 	bl	8081a04 <_ZN8SPIClass8transferEh>
	if (numBytes > 1) {
		addr |= SPI_INCREMENT;
	}

	spi.transfer(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80811d2:	e7f7      	b.n	80811c4 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
		spi.transfer(buf[ii]);
	}

	endTransaction();
 80811d4:	682b      	ldr	r3, [r5, #0]
 80811d6:	4628      	mov	r0, r5
 80811d8:	695b      	ldr	r3, [r3, #20]
 80811da:	4798      	blx	r3

	return true;
}
 80811dc:	2001      	movs	r0, #1
 80811de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080811e0 <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80811e0:	2200      	movs	r2, #0
 80811e2:	7002      	strb	r2, [r0, #0]
 80811e4:	7042      	strb	r2, [r0, #1]
 80811e6:	7082      	strb	r2, [r0, #2]
 80811e8:	70c2      	strb	r2, [r0, #3]
 80811ea:	7102      	strb	r2, [r0, #4]
 80811ec:	7142      	strb	r2, [r0, #5]
 80811ee:	7182      	strb	r2, [r0, #6]
 80811f0:	71c2      	strb	r2, [r0, #7]
 80811f2:	7202      	strb	r2, [r0, #8]
 80811f4:	7242      	strb	r2, [r0, #9]
 80811f6:	7282      	strb	r2, [r0, #10]
}
 80811f8:	4770      	bx	lr

080811fa <_ZN12LIS3DHConfig19setLowPowerWakeModeEh>:

LIS3DHConfig &LIS3DHConfig::setLowPowerWakeMode(uint8_t movementThreshold) {
	// Enable 10 Hz, low power, with XYZ detection enabled
	reg1 = LIS3DH::CTRL_REG1_ODR1 | LIS3DH::CTRL_REG1_LPEN | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80811fa:	222f      	movs	r2, #47	; 0x2f
 80811fc:	7002      	strb	r2, [r0, #0]

	// Enable high-pass filter
	reg2 = LIS3DH::CTRL_REG2_FDS | LIS3DH::CTRL_REG2_HPIS1;
 80811fe:	2209      	movs	r2, #9
 8081200:	7042      	strb	r2, [r0, #1]

	// Enable INT1
	reg3 = LIS3DH::CTRL_REG3_I1_INT1;
 8081202:	2240      	movs	r2, #64	; 0x40
 8081204:	7082      	strb	r2, [r0, #2]

	// Disable FIFO, enable latch interrupt on INT1_SRC
	reg5 = LIS3DH::CTRL_REG5_LIR_INT1;
 8081206:	2208      	movs	r2, #8
 8081208:	7102      	strb	r2, [r0, #4]

	// 250 mg threshold = 16
	int1_ths = movementThreshold;

	int1_cfg = LIS3DH::INT1_CFG_YHIE_YUPE | LIS3DH::INT1_CFG_XHIE_XUPE;
 808120a:	220a      	movs	r2, #10

	// Disable FIFO, enable latch interrupt on INT1_SRC
	reg5 = LIS3DH::CTRL_REG5_LIR_INT1;

	// 250 mg threshold = 16
	int1_ths = movementThreshold;
 808120c:	71c1      	strb	r1, [r0, #7]

	int1_cfg = LIS3DH::INT1_CFG_YHIE_YUPE | LIS3DH::INT1_CFG_XHIE_XUPE;
 808120e:	7242      	strb	r2, [r0, #9]

	return *this;
}
 8081210:	4770      	bx	lr

08081212 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 8081212:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 8081214:	6803      	ldr	r3, [r0, #0]
 8081216:	aa01      	add	r2, sp, #4
 8081218:	689c      	ldr	r4, [r3, #8]
 808121a:	2301      	movs	r3, #1
 808121c:	47a0      	blx	r4

	return resp[0];
}
 808121e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8081222:	b002      	add	sp, #8
 8081224:	bd10      	pop	{r4, pc}

08081226 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 8081226:	b538      	push	{r3, r4, r5, lr}
 8081228:	4605      	mov	r5, r0
 808122a:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 808122c:	210f      	movs	r1, #15
 808122e:	4628      	mov	r0, r5
 8081230:	f7ff ffef 	bl	8081212 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 8081234:	2833      	cmp	r0, #51	; 0x33
			found = true;
 8081236:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 808123a:	d005      	beq.n	8081248 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 808123c:	f000 fdb2 	bl	8081da4 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 8081240:	3c01      	subs	r4, #1
 8081242:	d1f3      	bne.n	808122c <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 8081244:	4620      	mov	r0, r4
 8081246:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 8081248:	bd38      	pop	{r3, r4, r5, pc}

0808124a <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 808124a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 808124c:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 808124e:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 8081250:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 8081254:	68dd      	ldr	r5, [r3, #12]
 8081256:	4622      	mov	r2, r4
 8081258:	2301      	movs	r3, #1
 808125a:	47a8      	blx	r5
}
 808125c:	b003      	add	sp, #12
 808125e:	bd30      	pop	{r4, r5, pc}

08081260 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 8081260:	b570      	push	{r4, r5, r6, lr}
 8081262:	4604      	mov	r4, r0
 8081264:	460d      	mov	r5, r1

	if (!hasDevice()) {
 8081266:	f7ff ffde 	bl	8081226 <_ZN6LIS3DH9hasDeviceEv>
 808126a:	4606      	mov	r6, r0
 808126c:	b928      	cbnz	r0, 808127a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 808126e:	f001 fa91 	bl	8082794 <_Z16_fetch_usbserialv>
 8081272:	4928      	ldr	r1, [pc, #160]	; (8081314 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 8081274:	f000 fcca 	bl	8081c0c <_ZN5Print7printlnEPKc>
		return false;
 8081278:	e049      	b.n	808130e <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 808127a:	782a      	ldrb	r2, [r5, #0]
 808127c:	2120      	movs	r1, #32
 808127e:	4620      	mov	r0, r4
 8081280:	f7ff ffe3 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 8081284:	786a      	ldrb	r2, [r5, #1]
 8081286:	2121      	movs	r1, #33	; 0x21
 8081288:	4620      	mov	r0, r4
 808128a:	f7ff ffde 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 808128e:	78aa      	ldrb	r2, [r5, #2]
 8081290:	2122      	movs	r1, #34	; 0x22
 8081292:	4620      	mov	r0, r4
 8081294:	f7ff ffd9 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 8081298:	78ea      	ldrb	r2, [r5, #3]
 808129a:	2123      	movs	r1, #35	; 0x23
 808129c:	4620      	mov	r0, r4
 808129e:	f7ff ffd4 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80812a2:	792a      	ldrb	r2, [r5, #4]
 80812a4:	2124      	movs	r1, #36	; 0x24
 80812a6:	4620      	mov	r0, r4
 80812a8:	f7ff ffcf 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80812ac:	796a      	ldrb	r2, [r5, #5]
 80812ae:	2125      	movs	r1, #37	; 0x25
 80812b0:	4620      	mov	r0, r4
 80812b2:	f7ff ffca 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80812b6:	79ab      	ldrb	r3, [r5, #6]
 80812b8:	b11b      	cbz	r3, 80812c2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80812ba:	2126      	movs	r1, #38	; 0x26
 80812bc:	4620      	mov	r0, r4
 80812be:	f7ff ffa8 	bl	8081212 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80812c2:	7aaa      	ldrb	r2, [r5, #10]
 80812c4:	212e      	movs	r1, #46	; 0x2e
 80812c6:	4620      	mov	r0, r4
 80812c8:	f7ff ffbf 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80812cc:	78ab      	ldrb	r3, [r5, #2]
 80812ce:	065b      	lsls	r3, r3, #25
 80812d0:	d51d      	bpl.n	808130e <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80812d2:	79ea      	ldrb	r2, [r5, #7]
 80812d4:	2132      	movs	r1, #50	; 0x32
 80812d6:	4620      	mov	r0, r4
 80812d8:	f7ff ffb7 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80812dc:	7a2a      	ldrb	r2, [r5, #8]
 80812de:	2133      	movs	r1, #51	; 0x33
 80812e0:	4620      	mov	r0, r4
 80812e2:	f7ff ffb2 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80812e6:	6863      	ldr	r3, [r4, #4]
 80812e8:	2b00      	cmp	r3, #0
 80812ea:	db0a      	blt.n	8081302 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80812ec:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80812ee:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80812f0:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80812f2:	2130      	movs	r1, #48	; 0x30
 80812f4:	f7ff ffa9 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80812f8:	2131      	movs	r1, #49	; 0x31
 80812fa:	4620      	mov	r0, r4
 80812fc:	f7ff ff89 	bl	8081212 <_ZN6LIS3DH13readRegister8Eh>
 8081300:	e005      	b.n	808130e <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 8081302:	2200      	movs	r2, #0
 8081304:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 8081306:	2130      	movs	r1, #48	; 0x30
 8081308:	4620      	mov	r0, r4
 808130a:	f7ff ff9e 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 808130e:	4630      	mov	r0, r6
 8081310:	bd70      	pop	{r4, r5, r6, pc}
 8081312:	bf00      	nop
 8081314:	08084304 	.word	0x08084304

08081318 <_ZN6LIS3DH14clearInterruptEv>:
	}

	return ready;
}

uint8_t LIS3DH::clearInterrupt() {
 8081318:	b538      	push	{r3, r4, r5, lr}
	uint8_t int1_src = readRegister8(REG_INT1_SRC);
 808131a:	2131      	movs	r1, #49	; 0x31
	}

	return ready;
}

uint8_t LIS3DH::clearInterrupt() {
 808131c:	4604      	mov	r4, r0
	uint8_t int1_src = readRegister8(REG_INT1_SRC);
 808131e:	f7ff ff78 	bl	8081212 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_INT1_CFG, int1_cfg);
 8081322:	7a22      	ldrb	r2, [r4, #8]

	return ready;
}

uint8_t LIS3DH::clearInterrupt() {
	uint8_t int1_src = readRegister8(REG_INT1_SRC);
 8081324:	4605      	mov	r5, r0
	writeRegister8(REG_INT1_CFG, int1_cfg);
 8081326:	2130      	movs	r1, #48	; 0x30
 8081328:	4620      	mov	r0, r4
 808132a:	f7ff ff8e 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>

	if (intPin >= 0) {
 808132e:	6863      	ldr	r3, [r4, #4]
 8081330:	2b00      	cmp	r3, #0
 8081332:	db11      	blt.n	8081358 <_ZN6LIS3DH14clearInterruptEv+0x40>
		while(digitalRead(intPin) == HIGH) {
 8081334:	88a0      	ldrh	r0, [r4, #4]
 8081336:	f001 fcd1 	bl	8082cdc <digitalRead>
 808133a:	2801      	cmp	r0, #1
 808133c:	d10c      	bne.n	8081358 <_ZN6LIS3DH14clearInterruptEv+0x40>
			delay(10);
 808133e:	200a      	movs	r0, #10
 8081340:	f000 fd30 	bl	8081da4 <delay>
			readRegister8(REG_INT1_SRC);
 8081344:	2131      	movs	r1, #49	; 0x31
 8081346:	4620      	mov	r0, r4
 8081348:	f7ff ff63 	bl	8081212 <_ZN6LIS3DH13readRegister8Eh>
			writeRegister8(REG_INT1_CFG, int1_cfg);
 808134c:	7a22      	ldrb	r2, [r4, #8]
 808134e:	2130      	movs	r1, #48	; 0x30
 8081350:	4620      	mov	r0, r4
 8081352:	f7ff ff7a 	bl	808124a <_ZN6LIS3DH14writeRegister8Ehh>
 8081356:	e7ed      	b.n	8081334 <_ZN6LIS3DH14clearInterruptEv+0x1c>
		}
	}

	return int1_src;
}
 8081358:	4628      	mov	r0, r5
 808135a:	bd38      	pop	{r3, r4, r5, pc}

0808135c <_ZN6LIS3DH15calibrateFilterEmm>:

	return true;
}


bool LIS3DH::calibrateFilter(unsigned long stationaryTime, unsigned long maxWaitTime) {
 808135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081360:	4605      	mov	r5, r0
 8081362:	468a      	mov	sl, r1
 8081364:	4690      	mov	r8, r2
 8081366:	f000 f8ef 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
 808136a:	4607      	mov	r7, r0
	bool ready = false;

	unsigned long start = millis();
	unsigned long lastMovement = start;
 808136c:	4606      	mov	r6, r0
	unsigned long lastRecalibrate = start - RECALIBRATION_MOVEMENT_DELAY;
 808136e:	f1a0 0464 	sub.w	r4, r0, #100	; 0x64

	while(maxWaitTime == 0 || millis() - start < maxWaitTime) {
 8081372:	f1b8 0f00 	cmp.w	r8, #0
 8081376:	d007      	beq.n	8081388 <_ZN6LIS3DH15calibrateFilterEmm+0x2c>
 8081378:	f000 f8e6 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
 808137c:	1bc0      	subs	r0, r0, r7
 808137e:	4580      	cmp	r8, r0
 8081380:	d802      	bhi.n	8081388 <_ZN6LIS3DH15calibrateFilterEmm+0x2c>
	return true;
}


bool LIS3DH::calibrateFilter(unsigned long stationaryTime, unsigned long maxWaitTime) {
	bool ready = false;
 8081382:	2000      	movs	r0, #0
 8081384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	unsigned long start = millis();
	unsigned long lastMovement = start;
	unsigned long lastRecalibrate = start - RECALIBRATION_MOVEMENT_DELAY;

	while(maxWaitTime == 0 || millis() - start < maxWaitTime) {
		uint8_t int1_src = readRegister8(REG_INT1_SRC);
 8081388:	2131      	movs	r1, #49	; 0x31
 808138a:	4628      	mov	r0, r5
 808138c:	f7ff ff41 	bl	8081212 <_ZN6LIS3DH13readRegister8Eh>
		if ((int1_src & INT1_SRC_IA) != 0) {
 8081390:	f010 0f40 	tst.w	r0, #64	; 0x40
	unsigned long start = millis();
	unsigned long lastMovement = start;
	unsigned long lastRecalibrate = start - RECALIBRATION_MOVEMENT_DELAY;

	while(maxWaitTime == 0 || millis() - start < maxWaitTime) {
		uint8_t int1_src = readRegister8(REG_INT1_SRC);
 8081394:	4681      	mov	r9, r0
		if ((int1_src & INT1_SRC_IA) != 0) {
 8081396:	d00d      	beq.n	80813b4 <_ZN6LIS3DH15calibrateFilterEmm+0x58>
			Serial.printlnf("resetting lastMovement int1_src=0x%x", int1_src);
 8081398:	f001 f9fc 	bl	8082794 <_Z16_fetch_usbserialv>
 808139c:	464b      	mov	r3, r9
 808139e:	4a13      	ldr	r2, [pc, #76]	; (80813ec <_ZN6LIS3DH15calibrateFilterEmm+0x90>)
 80813a0:	2101      	movs	r1, #1
 80813a2:	f000 fc95 	bl	8081cd0 <_ZN5Print11printf_implEbPKcz>
 80813a6:	f000 f8cf 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
 80813aa:	4606      	mov	r6, r0
			lastMovement = lastRecalibrate = millis();
			clearInterrupt();
 80813ac:	4628      	mov	r0, r5
 80813ae:	f7ff ffb3 	bl	8081318 <_ZN6LIS3DH14clearInterruptEv>

	while(maxWaitTime == 0 || millis() - start < maxWaitTime) {
		uint8_t int1_src = readRegister8(REG_INT1_SRC);
		if ((int1_src & INT1_SRC_IA) != 0) {
			Serial.printlnf("resetting lastMovement int1_src=0x%x", int1_src);
			lastMovement = lastRecalibrate = millis();
 80813b2:	4634      	mov	r4, r6
			clearInterrupt();
		}

		if (lastRecalibrate != 0 && millis() - lastRecalibrate >= RECALIBRATION_MOVEMENT_DELAY) {
 80813b4:	b124      	cbz	r4, 80813c0 <_ZN6LIS3DH15calibrateFilterEmm+0x64>
 80813b6:	f000 f8c7 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
 80813ba:	1b00      	subs	r0, r0, r4
 80813bc:	2863      	cmp	r0, #99	; 0x63
 80813be:	d807      	bhi.n	80813d0 <_ZN6LIS3DH15calibrateFilterEmm+0x74>
 80813c0:	f000 f8c2 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
			lastRecalibrate = 0;
			readRegister8(REG_REFERENCE);
			clearInterrupt();
		}

		if (millis() - lastMovement >= stationaryTime) {
 80813c4:	1b80      	subs	r0, r0, r6
 80813c6:	4550      	cmp	r0, sl
 80813c8:	d3d3      	bcc.n	8081372 <_ZN6LIS3DH15calibrateFilterEmm+0x16>
			ready = true;
 80813ca:	2001      	movs	r0, #1
			break;
		}
	}

	return ready;
 80813cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			lastMovement = lastRecalibrate = millis();
			clearInterrupt();
		}

		if (lastRecalibrate != 0 && millis() - lastRecalibrate >= RECALIBRATION_MOVEMENT_DELAY) {
			Serial.println("recalibrating");
 80813d0:	f001 f9e0 	bl	8082794 <_Z16_fetch_usbserialv>
 80813d4:	4906      	ldr	r1, [pc, #24]	; (80813f0 <_ZN6LIS3DH15calibrateFilterEmm+0x94>)
 80813d6:	f000 fc19 	bl	8081c0c <_ZN5Print7printlnEPKc>
			lastRecalibrate = 0;
			readRegister8(REG_REFERENCE);
 80813da:	2126      	movs	r1, #38	; 0x26
 80813dc:	4628      	mov	r0, r5
 80813de:	f7ff ff18 	bl	8081212 <_ZN6LIS3DH13readRegister8Eh>
			clearInterrupt();
 80813e2:	4628      	mov	r0, r5
 80813e4:	f7ff ff98 	bl	8081318 <_ZN6LIS3DH14clearInterruptEv>
			clearInterrupt();
		}

		if (lastRecalibrate != 0 && millis() - lastRecalibrate >= RECALIBRATION_MOVEMENT_DELAY) {
			Serial.println("recalibrating");
			lastRecalibrate = 0;
 80813e8:	2400      	movs	r4, #0
 80813ea:	e7e9      	b.n	80813c0 <_ZN6LIS3DH15calibrateFilterEmm+0x64>
 80813ec:	08084315 	.word	0x08084315
 80813f0:	0808433a 	.word	0x0808433a

080813f4 <_ZN9LIS3DHSPI8spiSetupEv>:
}

LIS3DHSPI::~LIS3DHSPI() {
}

void LIS3DHSPI::spiSetup() {
 80813f4:	b510      	push	{r4, lr}
 80813f6:	4604      	mov	r4, r0
	// The maximum SPI clock speed is 10 MHz. You can make it lower if needed

	spi.setBitOrder(MSBFIRST);
 80813f8:	2101      	movs	r1, #1
 80813fa:	68c0      	ldr	r0, [r0, #12]
 80813fc:	f000 fac4 	bl	8081988 <_ZN8SPIClass11setBitOrderEh>
	spi.setClockSpeed(10, MHZ);
 8081400:	210a      	movs	r1, #10
 8081402:	68e0      	ldr	r0, [r4, #12]
 8081404:	4a04      	ldr	r2, [pc, #16]	; (8081418 <_ZN9LIS3DHSPI8spiSetupEv+0x24>)
 8081406:	f000 fadb 	bl	80819c0 <_ZN8SPIClass13setClockSpeedEjj>
	spi.setDataMode(SPI_MODE0); // CPHA = 0, CPOL = 0 : MODE = 0
 808140a:	68e0      	ldr	r0, [r4, #12]
 808140c:	2100      	movs	r1, #0
}
 808140e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void LIS3DHSPI::spiSetup() {
	// The maximum SPI clock speed is 10 MHz. You can make it lower if needed

	spi.setBitOrder(MSBFIRST);
	spi.setClockSpeed(10, MHZ);
	spi.setDataMode(SPI_MODE0); // CPHA = 0, CPOL = 0 : MODE = 0
 8081412:	f000 babc 	b.w	808198e <_ZN8SPIClass11setDataModeEh>
 8081416:	bf00      	nop
 8081418:	000f4240 	.word	0x000f4240

0808141c <_ZN9LIS3DHSPIC1ER8SPIClassii>:

//
//
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss) {
 808141c:	b510      	push	{r4, lr}
 808141e:	4604      	mov	r4, r0
 8081420:	4608      	mov	r0, r1
 8081422:	4909      	ldr	r1, [pc, #36]	; (8081448 <_ZN9LIS3DHSPIC1ER8SPIClassii+0x2c>)

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 8081424:	6063      	str	r3, [r4, #4]
 8081426:	2300      	movs	r3, #0
 8081428:	7223      	strb	r3, [r4, #8]

//
//
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss) {
 808142a:	6021      	str	r1, [r4, #0]
 808142c:	7523      	strb	r3, [r4, #20]
 808142e:	60e0      	str	r0, [r4, #12]
 8081430:	6122      	str	r2, [r4, #16]

	spi.begin(ss);
 8081432:	b291      	uxth	r1, r2
 8081434:	f000 faa2 	bl	808197c <_ZN8SPIClass5beginEt>

	if (!spiShared) {
 8081438:	7d23      	ldrb	r3, [r4, #20]
 808143a:	b913      	cbnz	r3, 8081442 <_ZN9LIS3DHSPIC1ER8SPIClassii+0x26>
		spiSetup();
 808143c:	4620      	mov	r0, r4
 808143e:	f7ff ffd9 	bl	80813f4 <_ZN9LIS3DHSPI8spiSetupEv>
	}
}
 8081442:	4620      	mov	r0, r4
 8081444:	bd10      	pop	{r4, pc}
 8081446:	bf00      	nop
 8081448:	080842ec 	.word	0x080842ec

0808144c <_ZN9LIS3DHSPI16beginTransactionEv>:
	spi.setBitOrder(MSBFIRST);
	spi.setClockSpeed(10, MHZ);
	spi.setDataMode(SPI_MODE0); // CPHA = 0, CPOL = 0 : MODE = 0
}

void LIS3DHSPI::beginTransaction() {
 808144c:	b510      	push	{r4, lr}

	// This doesn't work. It should, but it doesn't, and I'm not sure why.
	if (spiShared) {
 808144e:	7d03      	ldrb	r3, [r0, #20]
	spi.setBitOrder(MSBFIRST);
	spi.setClockSpeed(10, MHZ);
	spi.setDataMode(SPI_MODE0); // CPHA = 0, CPOL = 0 : MODE = 0
}

void LIS3DHSPI::beginTransaction() {
 8081450:	4604      	mov	r4, r0

	// This doesn't work. It should, but it doesn't, and I'm not sure why.
	if (spiShared) {
 8081452:	b10b      	cbz	r3, 8081458 <_ZN9LIS3DHSPI16beginTransactionEv+0xc>
		spiSetup();
 8081454:	f7ff ffce 	bl	80813f4 <_ZN9LIS3DHSPI8spiSetupEv>
		// delay(10);
	}

	digitalWrite(ss, LOW);
 8081458:	8a20      	ldrh	r0, [r4, #16]
 808145a:	2100      	movs	r1, #0

	// The SPI CS setup time tsu(CS) is 6 ns, should not require a delay here
}
 808145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (spiShared) {
		spiSetup();
		// delay(10);
	}

	digitalWrite(ss, LOW);
 8081460:	f001 bc23 	b.w	8082caa <digitalWrite>

08081464 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 8081464:	f000 b800 	b.w	8081468 <HAL_Pin_Map>

08081468 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8081468:	b508      	push	{r3, lr}
 808146a:	4b02      	ldr	r3, [pc, #8]	; (8081474 <HAL_Pin_Map+0xc>)
 808146c:	681b      	ldr	r3, [r3, #0]
 808146e:	681b      	ldr	r3, [r3, #0]
 8081470:	9301      	str	r3, [sp, #4]
 8081472:	bd08      	pop	{r3, pc}
 8081474:	080401b0 	.word	0x080401b0

08081478 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081478:	b508      	push	{r3, lr}
 808147a:	4b02      	ldr	r3, [pc, #8]	; (8081484 <HAL_Pin_Mode+0xc>)
 808147c:	681b      	ldr	r3, [r3, #0]
 808147e:	689b      	ldr	r3, [r3, #8]
 8081480:	9301      	str	r3, [sp, #4]
 8081482:	bd08      	pop	{r3, pc}
 8081484:	080401b0 	.word	0x080401b0

08081488 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081488:	b508      	push	{r3, lr}
 808148a:	4b02      	ldr	r3, [pc, #8]	; (8081494 <HAL_Get_Pin_Mode+0xc>)
 808148c:	681b      	ldr	r3, [r3, #0]
 808148e:	68db      	ldr	r3, [r3, #12]
 8081490:	9301      	str	r3, [sp, #4]
 8081492:	bd08      	pop	{r3, pc}
 8081494:	080401b0 	.word	0x080401b0

08081498 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081498:	b508      	push	{r3, lr}
 808149a:	4b02      	ldr	r3, [pc, #8]	; (80814a4 <HAL_GPIO_Write+0xc>)
 808149c:	681b      	ldr	r3, [r3, #0]
 808149e:	691b      	ldr	r3, [r3, #16]
 80814a0:	9301      	str	r3, [sp, #4]
 80814a2:	bd08      	pop	{r3, pc}
 80814a4:	080401b0 	.word	0x080401b0

080814a8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80814a8:	b508      	push	{r3, lr}
 80814aa:	4b02      	ldr	r3, [pc, #8]	; (80814b4 <HAL_GPIO_Read+0xc>)
 80814ac:	681b      	ldr	r3, [r3, #0]
 80814ae:	695b      	ldr	r3, [r3, #20]
 80814b0:	9301      	str	r3, [sp, #4]
 80814b2:	bd08      	pop	{r3, pc}
 80814b4:	080401b0 	.word	0x080401b0

080814b8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80814b8:	b508      	push	{r3, lr}
 80814ba:	4b02      	ldr	r3, [pc, #8]	; (80814c4 <HAL_SPI_Begin+0xc>)
 80814bc:	681b      	ldr	r3, [r3, #0]
 80814be:	681b      	ldr	r3, [r3, #0]
 80814c0:	9301      	str	r3, [sp, #4]
 80814c2:	bd08      	pop	{r3, pc}
 80814c4:	080401b4 	.word	0x080401b4

080814c8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80814c8:	b508      	push	{r3, lr}
 80814ca:	4b02      	ldr	r3, [pc, #8]	; (80814d4 <HAL_SPI_Set_Bit_Order+0xc>)
 80814cc:	681b      	ldr	r3, [r3, #0]
 80814ce:	689b      	ldr	r3, [r3, #8]
 80814d0:	9301      	str	r3, [sp, #4]
 80814d2:	bd08      	pop	{r3, pc}
 80814d4:	080401b4 	.word	0x080401b4

080814d8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80814d8:	b508      	push	{r3, lr}
 80814da:	4b02      	ldr	r3, [pc, #8]	; (80814e4 <HAL_SPI_Set_Data_Mode+0xc>)
 80814dc:	681b      	ldr	r3, [r3, #0]
 80814de:	68db      	ldr	r3, [r3, #12]
 80814e0:	9301      	str	r3, [sp, #4]
 80814e2:	bd08      	pop	{r3, pc}
 80814e4:	080401b4 	.word	0x080401b4

080814e8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80814e8:	b508      	push	{r3, lr}
 80814ea:	4b02      	ldr	r3, [pc, #8]	; (80814f4 <HAL_SPI_Set_Clock_Divider+0xc>)
 80814ec:	681b      	ldr	r3, [r3, #0]
 80814ee:	691b      	ldr	r3, [r3, #16]
 80814f0:	9301      	str	r3, [sp, #4]
 80814f2:	bd08      	pop	{r3, pc}
 80814f4:	080401b4 	.word	0x080401b4

080814f8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80814f8:	b508      	push	{r3, lr}
 80814fa:	4b02      	ldr	r3, [pc, #8]	; (8081504 <HAL_SPI_Send_Receive_Data+0xc>)
 80814fc:	681b      	ldr	r3, [r3, #0]
 80814fe:	695b      	ldr	r3, [r3, #20]
 8081500:	9301      	str	r3, [sp, #4]
 8081502:	bd08      	pop	{r3, pc}
 8081504:	080401b4 	.word	0x080401b4

08081508 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081508:	b508      	push	{r3, lr}
 808150a:	4b02      	ldr	r3, [pc, #8]	; (8081514 <HAL_SPI_Init+0xc>)
 808150c:	681b      	ldr	r3, [r3, #0]
 808150e:	69db      	ldr	r3, [r3, #28]
 8081510:	9301      	str	r3, [sp, #4]
 8081512:	bd08      	pop	{r3, pc}
 8081514:	080401b4 	.word	0x080401b4

08081518 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081518:	b508      	push	{r3, lr}
 808151a:	4b02      	ldr	r3, [pc, #8]	; (8081524 <HAL_SPI_Is_Enabled+0xc>)
 808151c:	681b      	ldr	r3, [r3, #0]
 808151e:	6a1b      	ldr	r3, [r3, #32]
 8081520:	9301      	str	r3, [sp, #4]
 8081522:	bd08      	pop	{r3, pc}
 8081524:	080401b4 	.word	0x080401b4

08081528 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8081528:	b508      	push	{r3, lr}
 808152a:	4b02      	ldr	r3, [pc, #8]	; (8081534 <HAL_SPI_Info+0xc>)
 808152c:	681b      	ldr	r3, [r3, #0]
 808152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081530:	9301      	str	r3, [sp, #4]
 8081532:	bd08      	pop	{r3, pc}
 8081534:	080401b4 	.word	0x080401b4

08081538 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081538:	b508      	push	{r3, lr}
 808153a:	4b02      	ldr	r3, [pc, #8]	; (8081544 <HAL_RNG_GetRandomNumber+0xc>)
 808153c:	681b      	ldr	r3, [r3, #0]
 808153e:	685b      	ldr	r3, [r3, #4]
 8081540:	9301      	str	r3, [sp, #4]
 8081542:	bd08      	pop	{r3, pc}
 8081544:	0804019c 	.word	0x0804019c

08081548 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081548:	b508      	push	{r3, lr}
 808154a:	4b02      	ldr	r3, [pc, #8]	; (8081554 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808154c:	681b      	ldr	r3, [r3, #0]
 808154e:	695b      	ldr	r3, [r3, #20]
 8081550:	9301      	str	r3, [sp, #4]
 8081552:	bd08      	pop	{r3, pc}
 8081554:	0804019c 	.word	0x0804019c

08081558 <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8081558:	b508      	push	{r3, lr}
 808155a:	4b02      	ldr	r3, [pc, #8]	; (8081564 <os_thread_scheduling+0xc>)
 808155c:	681b      	ldr	r3, [r3, #0]
 808155e:	69db      	ldr	r3, [r3, #28]
 8081560:	9301      	str	r3, [sp, #4]
 8081562:	bd08      	pop	{r3, pc}
 8081564:	080401d0 	.word	0x080401d0

08081568 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081568:	b508      	push	{r3, lr}
 808156a:	4b02      	ldr	r3, [pc, #8]	; (8081574 <os_mutex_create+0xc>)
 808156c:	681b      	ldr	r3, [r3, #0]
 808156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081570:	9301      	str	r3, [sp, #4]
 8081572:	bd08      	pop	{r3, pc}
 8081574:	080401d0 	.word	0x080401d0

08081578 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081578:	b508      	push	{r3, lr}
 808157a:	4b02      	ldr	r3, [pc, #8]	; (8081584 <HAL_USART_Init+0xc>)
 808157c:	681b      	ldr	r3, [r3, #0]
 808157e:	699b      	ldr	r3, [r3, #24]
 8081580:	9301      	str	r3, [sp, #4]
 8081582:	bd08      	pop	{r3, pc}
 8081584:	080401c4 	.word	0x080401c4

08081588 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081588:	b508      	push	{r3, lr}
 808158a:	4b02      	ldr	r3, [pc, #8]	; (8081594 <HAL_USART_Write_Data+0xc>)
 808158c:	681b      	ldr	r3, [r3, #0]
 808158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081590:	9301      	str	r3, [sp, #4]
 8081592:	bd08      	pop	{r3, pc}
 8081594:	080401c4 	.word	0x080401c4

08081598 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081598:	b508      	push	{r3, lr}
 808159a:	4b02      	ldr	r3, [pc, #8]	; (80815a4 <HAL_USART_Available_Data+0xc>)
 808159c:	681b      	ldr	r3, [r3, #0]
 808159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80815a0:	9301      	str	r3, [sp, #4]
 80815a2:	bd08      	pop	{r3, pc}
 80815a4:	080401c4 	.word	0x080401c4

080815a8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80815a8:	b508      	push	{r3, lr}
 80815aa:	4b02      	ldr	r3, [pc, #8]	; (80815b4 <HAL_USART_Read_Data+0xc>)
 80815ac:	681b      	ldr	r3, [r3, #0]
 80815ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80815b0:	9301      	str	r3, [sp, #4]
 80815b2:	bd08      	pop	{r3, pc}
 80815b4:	080401c4 	.word	0x080401c4

080815b8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80815b8:	b508      	push	{r3, lr}
 80815ba:	4b02      	ldr	r3, [pc, #8]	; (80815c4 <HAL_USART_Peek_Data+0xc>)
 80815bc:	681b      	ldr	r3, [r3, #0]
 80815be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815c0:	9301      	str	r3, [sp, #4]
 80815c2:	bd08      	pop	{r3, pc}
 80815c4:	080401c4 	.word	0x080401c4

080815c8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80815c8:	b508      	push	{r3, lr}
 80815ca:	4b02      	ldr	r3, [pc, #8]	; (80815d4 <HAL_USART_Flush_Data+0xc>)
 80815cc:	681b      	ldr	r3, [r3, #0]
 80815ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80815d0:	9301      	str	r3, [sp, #4]
 80815d2:	bd08      	pop	{r3, pc}
 80815d4:	080401c4 	.word	0x080401c4

080815d8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80815d8:	b508      	push	{r3, lr}
 80815da:	4b02      	ldr	r3, [pc, #8]	; (80815e4 <HAL_USART_Is_Enabled+0xc>)
 80815dc:	681b      	ldr	r3, [r3, #0]
 80815de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80815e0:	9301      	str	r3, [sp, #4]
 80815e2:	bd08      	pop	{r3, pc}
 80815e4:	080401c4 	.word	0x080401c4

080815e8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80815e8:	b508      	push	{r3, lr}
 80815ea:	4b02      	ldr	r3, [pc, #8]	; (80815f4 <HAL_USART_Available_Data_For_Write+0xc>)
 80815ec:	681b      	ldr	r3, [r3, #0]
 80815ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80815f0:	9301      	str	r3, [sp, #4]
 80815f2:	bd08      	pop	{r3, pc}
 80815f4:	080401c4 	.word	0x080401c4

080815f8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80815f8:	b508      	push	{r3, lr}
 80815fa:	4b02      	ldr	r3, [pc, #8]	; (8081604 <HAL_USART_BeginConfig+0xc>)
 80815fc:	681b      	ldr	r3, [r3, #0]
 80815fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081600:	9301      	str	r3, [sp, #4]
 8081602:	bd08      	pop	{r3, pc}
 8081604:	080401c4 	.word	0x080401c4

08081608 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8081608:	b508      	push	{r3, lr}
 808160a:	4b02      	ldr	r3, [pc, #8]	; (8081614 <HAL_I2C_Request_Data+0xc>)
 808160c:	681b      	ldr	r3, [r3, #0]
 808160e:	695b      	ldr	r3, [r3, #20]
 8081610:	9301      	str	r3, [sp, #4]
 8081612:	bd08      	pop	{r3, pc}
 8081614:	080401ac 	.word	0x080401ac

08081618 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8081618:	b508      	push	{r3, lr}
 808161a:	4b02      	ldr	r3, [pc, #8]	; (8081624 <HAL_I2C_Begin_Transmission+0xc>)
 808161c:	681b      	ldr	r3, [r3, #0]
 808161e:	699b      	ldr	r3, [r3, #24]
 8081620:	9301      	str	r3, [sp, #4]
 8081622:	bd08      	pop	{r3, pc}
 8081624:	080401ac 	.word	0x080401ac

08081628 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081628:	b508      	push	{r3, lr}
 808162a:	4b02      	ldr	r3, [pc, #8]	; (8081634 <HAL_I2C_End_Transmission+0xc>)
 808162c:	681b      	ldr	r3, [r3, #0]
 808162e:	69db      	ldr	r3, [r3, #28]
 8081630:	9301      	str	r3, [sp, #4]
 8081632:	bd08      	pop	{r3, pc}
 8081634:	080401ac 	.word	0x080401ac

08081638 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081638:	b508      	push	{r3, lr}
 808163a:	4b02      	ldr	r3, [pc, #8]	; (8081644 <HAL_I2C_Write_Data+0xc>)
 808163c:	681b      	ldr	r3, [r3, #0]
 808163e:	6a1b      	ldr	r3, [r3, #32]
 8081640:	9301      	str	r3, [sp, #4]
 8081642:	bd08      	pop	{r3, pc}
 8081644:	080401ac 	.word	0x080401ac

08081648 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081648:	b508      	push	{r3, lr}
 808164a:	4b02      	ldr	r3, [pc, #8]	; (8081654 <HAL_I2C_Available_Data+0xc>)
 808164c:	681b      	ldr	r3, [r3, #0]
 808164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081650:	9301      	str	r3, [sp, #4]
 8081652:	bd08      	pop	{r3, pc}
 8081654:	080401ac 	.word	0x080401ac

08081658 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081658:	b508      	push	{r3, lr}
 808165a:	4b02      	ldr	r3, [pc, #8]	; (8081664 <HAL_I2C_Read_Data+0xc>)
 808165c:	681b      	ldr	r3, [r3, #0]
 808165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081660:	9301      	str	r3, [sp, #4]
 8081662:	bd08      	pop	{r3, pc}
 8081664:	080401ac 	.word	0x080401ac

08081668 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081668:	b508      	push	{r3, lr}
 808166a:	4b02      	ldr	r3, [pc, #8]	; (8081674 <HAL_I2C_Peek_Data+0xc>)
 808166c:	681b      	ldr	r3, [r3, #0]
 808166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081670:	9301      	str	r3, [sp, #4]
 8081672:	bd08      	pop	{r3, pc}
 8081674:	080401ac 	.word	0x080401ac

08081678 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081678:	b508      	push	{r3, lr}
 808167a:	4b02      	ldr	r3, [pc, #8]	; (8081684 <HAL_I2C_Flush_Data+0xc>)
 808167c:	681b      	ldr	r3, [r3, #0]
 808167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081680:	9301      	str	r3, [sp, #4]
 8081682:	bd08      	pop	{r3, pc}
 8081684:	080401ac 	.word	0x080401ac

08081688 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081688:	b508      	push	{r3, lr}
 808168a:	4b02      	ldr	r3, [pc, #8]	; (8081694 <HAL_I2C_Is_Enabled+0xc>)
 808168c:	681b      	ldr	r3, [r3, #0]
 808168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081690:	9301      	str	r3, [sp, #4]
 8081692:	bd08      	pop	{r3, pc}
 8081694:	080401ac 	.word	0x080401ac

08081698 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081698:	b508      	push	{r3, lr}
 808169a:	4b02      	ldr	r3, [pc, #8]	; (80816a4 <HAL_I2C_Init+0xc>)
 808169c:	681b      	ldr	r3, [r3, #0]
 808169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80816a0:	9301      	str	r3, [sp, #4]
 80816a2:	bd08      	pop	{r3, pc}
 80816a4:	080401ac 	.word	0x080401ac

080816a8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80816a8:	b508      	push	{r3, lr}
 80816aa:	4b02      	ldr	r3, [pc, #8]	; (80816b4 <HAL_I2C_Acquire+0xc>)
 80816ac:	681b      	ldr	r3, [r3, #0]
 80816ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80816b0:	9301      	str	r3, [sp, #4]
 80816b2:	bd08      	pop	{r3, pc}
 80816b4:	080401ac 	.word	0x080401ac

080816b8 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80816b8:	b508      	push	{r3, lr}
 80816ba:	4b02      	ldr	r3, [pc, #8]	; (80816c4 <HAL_I2C_Release+0xc>)
 80816bc:	681b      	ldr	r3, [r3, #0]
 80816be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80816c0:	9301      	str	r3, [sp, #4]
 80816c2:	bd08      	pop	{r3, pc}
 80816c4:	080401ac 	.word	0x080401ac

080816c8 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80816c8:	b508      	push	{r3, lr}
 80816ca:	4b02      	ldr	r3, [pc, #8]	; (80816d4 <inet_gethostbyname+0xc>)
 80816cc:	681b      	ldr	r3, [r3, #0]
 80816ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80816d0:	9301      	str	r3, [sp, #4]
 80816d2:	bd08      	pop	{r3, pc}
 80816d4:	08060020 	.word	0x08060020

080816d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80816d8:	b508      	push	{r3, lr}
 80816da:	4b02      	ldr	r3, [pc, #8]	; (80816e4 <HAL_USB_USART_Init+0xc>)
 80816dc:	681b      	ldr	r3, [r3, #0]
 80816de:	681b      	ldr	r3, [r3, #0]
 80816e0:	9301      	str	r3, [sp, #4]
 80816e2:	bd08      	pop	{r3, pc}
 80816e4:	0806001c 	.word	0x0806001c

080816e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80816e8:	b508      	push	{r3, lr}
 80816ea:	4b02      	ldr	r3, [pc, #8]	; (80816f4 <HAL_USB_USART_Begin+0xc>)
 80816ec:	681b      	ldr	r3, [r3, #0]
 80816ee:	685b      	ldr	r3, [r3, #4]
 80816f0:	9301      	str	r3, [sp, #4]
 80816f2:	bd08      	pop	{r3, pc}
 80816f4:	0806001c 	.word	0x0806001c

080816f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80816f8:	b508      	push	{r3, lr}
 80816fa:	4b02      	ldr	r3, [pc, #8]	; (8081704 <HAL_USB_USART_Available_Data+0xc>)
 80816fc:	681b      	ldr	r3, [r3, #0]
 80816fe:	691b      	ldr	r3, [r3, #16]
 8081700:	9301      	str	r3, [sp, #4]
 8081702:	bd08      	pop	{r3, pc}
 8081704:	0806001c 	.word	0x0806001c

08081708 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081708:	b508      	push	{r3, lr}
 808170a:	4b02      	ldr	r3, [pc, #8]	; (8081714 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808170c:	681b      	ldr	r3, [r3, #0]
 808170e:	695b      	ldr	r3, [r3, #20]
 8081710:	9301      	str	r3, [sp, #4]
 8081712:	bd08      	pop	{r3, pc}
 8081714:	0806001c 	.word	0x0806001c

08081718 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081718:	b508      	push	{r3, lr}
 808171a:	4b02      	ldr	r3, [pc, #8]	; (8081724 <HAL_USB_USART_Receive_Data+0xc>)
 808171c:	681b      	ldr	r3, [r3, #0]
 808171e:	699b      	ldr	r3, [r3, #24]
 8081720:	9301      	str	r3, [sp, #4]
 8081722:	bd08      	pop	{r3, pc}
 8081724:	0806001c 	.word	0x0806001c

08081728 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081728:	b508      	push	{r3, lr}
 808172a:	4b02      	ldr	r3, [pc, #8]	; (8081734 <HAL_USB_USART_Send_Data+0xc>)
 808172c:	681b      	ldr	r3, [r3, #0]
 808172e:	69db      	ldr	r3, [r3, #28]
 8081730:	9301      	str	r3, [sp, #4]
 8081732:	bd08      	pop	{r3, pc}
 8081734:	0806001c 	.word	0x0806001c

08081738 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081738:	b508      	push	{r3, lr}
 808173a:	4b02      	ldr	r3, [pc, #8]	; (8081744 <HAL_USB_USART_Flush_Data+0xc>)
 808173c:	681b      	ldr	r3, [r3, #0]
 808173e:	6a1b      	ldr	r3, [r3, #32]
 8081740:	9301      	str	r3, [sp, #4]
 8081742:	bd08      	pop	{r3, pc}
 8081744:	0806001c 	.word	0x0806001c

08081748 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081748:	b508      	push	{r3, lr}
 808174a:	4b02      	ldr	r3, [pc, #8]	; (8081754 <set_system_mode+0xc>)
 808174c:	681b      	ldr	r3, [r3, #0]
 808174e:	685b      	ldr	r3, [r3, #4]
 8081750:	9301      	str	r3, [sp, #4]
 8081752:	bd08      	pop	{r3, pc}
 8081754:	080401a4 	.word	0x080401a4

08081758 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081758:	b508      	push	{r3, lr}
 808175a:	4b02      	ldr	r3, [pc, #8]	; (8081764 <system_delay_ms+0xc>)
 808175c:	681b      	ldr	r3, [r3, #0]
 808175e:	695b      	ldr	r3, [r3, #20]
 8081760:	9301      	str	r3, [sp, #4]
 8081762:	bd08      	pop	{r3, pc}
 8081764:	080401a4 	.word	0x080401a4

08081768 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081768:	b508      	push	{r3, lr}
 808176a:	4b02      	ldr	r3, [pc, #8]	; (8081774 <system_thread_set_state+0xc>)
 808176c:	681b      	ldr	r3, [r3, #0]
 808176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081770:	9301      	str	r3, [sp, #4]
 8081772:	bd08      	pop	{r3, pc}
 8081774:	080401a4 	.word	0x080401a4

08081778 <system_set_flag>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
 8081778:	b508      	push	{r3, lr}
 808177a:	4b02      	ldr	r3, [pc, #8]	; (8081784 <system_set_flag+0xc>)
 808177c:	681b      	ldr	r3, [r3, #0]
 808177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081780:	9301      	str	r3, [sp, #4]
 8081782:	bd08      	pop	{r3, pc}
 8081784:	080401a4 	.word	0x080401a4

08081788 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081788:	b508      	push	{r3, lr}
 808178a:	4b02      	ldr	r3, [pc, #8]	; (8081794 <application_thread_current+0xc>)
 808178c:	681b      	ldr	r3, [r3, #0]
 808178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081790:	9301      	str	r3, [sp, #4]
 8081792:	bd08      	pop	{r3, pc}
 8081794:	080401a4 	.word	0x080401a4

08081798 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081798:	b508      	push	{r3, lr}
 808179a:	4b02      	ldr	r3, [pc, #8]	; (80817a4 <application_thread_invoke+0xc>)
 808179c:	681b      	ldr	r3, [r3, #0]
 808179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80817a0:	9301      	str	r3, [sp, #4]
 80817a2:	bd08      	pop	{r3, pc}
 80817a4:	080401a4 	.word	0x080401a4

080817a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80817a8:	b508      	push	{r3, lr}
 80817aa:	4b03      	ldr	r3, [pc, #12]	; (80817b8 <system_ctrl_set_app_request_handler+0x10>)
 80817ac:	681b      	ldr	r3, [r3, #0]
 80817ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80817b2:	9301      	str	r3, [sp, #4]
 80817b4:	bd08      	pop	{r3, pc}
 80817b6:	0000      	.short	0x0000
 80817b8:	080401a4 	.word	0x080401a4

080817bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80817bc:	b508      	push	{r3, lr}
 80817be:	4b03      	ldr	r3, [pc, #12]	; (80817cc <system_ctrl_set_result+0x10>)
 80817c0:	681b      	ldr	r3, [r3, #0]
 80817c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80817c6:	9301      	str	r3, [sp, #4]
 80817c8:	bd08      	pop	{r3, pc}
 80817ca:	0000      	.short	0x0000
 80817cc:	080401a4 	.word	0x080401a4

080817d0 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80817d0:	b508      	push	{r3, lr}
 80817d2:	4b03      	ldr	r3, [pc, #12]	; (80817e0 <system_sleep_pins+0x10>)
 80817d4:	681b      	ldr	r3, [r3, #0]
 80817d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80817da:	9301      	str	r3, [sp, #4]
 80817dc:	bd08      	pop	{r3, pc}
 80817de:	0000      	.short	0x0000
 80817e0:	080401a4 	.word	0x080401a4

080817e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80817e4:	b508      	push	{r3, lr}
 80817e6:	4b02      	ldr	r3, [pc, #8]	; (80817f0 <network_connect+0xc>)
 80817e8:	681b      	ldr	r3, [r3, #0]
 80817ea:	685b      	ldr	r3, [r3, #4]
 80817ec:	9301      	str	r3, [sp, #4]
 80817ee:	bd08      	pop	{r3, pc}
 80817f0:	080401c8 	.word	0x080401c8

080817f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80817f4:	b508      	push	{r3, lr}
 80817f6:	4b02      	ldr	r3, [pc, #8]	; (8081800 <network_connecting+0xc>)
 80817f8:	681b      	ldr	r3, [r3, #0]
 80817fa:	689b      	ldr	r3, [r3, #8]
 80817fc:	9301      	str	r3, [sp, #4]
 80817fe:	bd08      	pop	{r3, pc}
 8081800:	080401c8 	.word	0x080401c8

08081804 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081804:	b508      	push	{r3, lr}
 8081806:	4b02      	ldr	r3, [pc, #8]	; (8081810 <network_disconnect+0xc>)
 8081808:	681b      	ldr	r3, [r3, #0]
 808180a:	68db      	ldr	r3, [r3, #12]
 808180c:	9301      	str	r3, [sp, #4]
 808180e:	bd08      	pop	{r3, pc}
 8081810:	080401c8 	.word	0x080401c8

08081814 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081814:	b508      	push	{r3, lr}
 8081816:	4b02      	ldr	r3, [pc, #8]	; (8081820 <network_ready+0xc>)
 8081818:	681b      	ldr	r3, [r3, #0]
 808181a:	691b      	ldr	r3, [r3, #16]
 808181c:	9301      	str	r3, [sp, #4]
 808181e:	bd08      	pop	{r3, pc}
 8081820:	080401c8 	.word	0x080401c8

08081824 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081824:	b508      	push	{r3, lr}
 8081826:	4b02      	ldr	r3, [pc, #8]	; (8081830 <network_on+0xc>)
 8081828:	681b      	ldr	r3, [r3, #0]
 808182a:	695b      	ldr	r3, [r3, #20]
 808182c:	9301      	str	r3, [sp, #4]
 808182e:	bd08      	pop	{r3, pc}
 8081830:	080401c8 	.word	0x080401c8

08081834 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081834:	b508      	push	{r3, lr}
 8081836:	4b02      	ldr	r3, [pc, #8]	; (8081840 <network_off+0xc>)
 8081838:	681b      	ldr	r3, [r3, #0]
 808183a:	699b      	ldr	r3, [r3, #24]
 808183c:	9301      	str	r3, [sp, #4]
 808183e:	bd08      	pop	{r3, pc}
 8081840:	080401c8 	.word	0x080401c8

08081844 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081844:	b508      	push	{r3, lr}
 8081846:	4b02      	ldr	r3, [pc, #8]	; (8081850 <network_listen+0xc>)
 8081848:	681b      	ldr	r3, [r3, #0]
 808184a:	69db      	ldr	r3, [r3, #28]
 808184c:	9301      	str	r3, [sp, #4]
 808184e:	bd08      	pop	{r3, pc}
 8081850:	080401c8 	.word	0x080401c8

08081854 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081854:	b508      	push	{r3, lr}
 8081856:	4b02      	ldr	r3, [pc, #8]	; (8081860 <network_listening+0xc>)
 8081858:	681b      	ldr	r3, [r3, #0]
 808185a:	6a1b      	ldr	r3, [r3, #32]
 808185c:	9301      	str	r3, [sp, #4]
 808185e:	bd08      	pop	{r3, pc}
 8081860:	080401c8 	.word	0x080401c8

08081864 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081864:	b508      	push	{r3, lr}
 8081866:	4b02      	ldr	r3, [pc, #8]	; (8081870 <network_set_listen_timeout+0xc>)
 8081868:	681b      	ldr	r3, [r3, #0]
 808186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808186c:	9301      	str	r3, [sp, #4]
 808186e:	bd08      	pop	{r3, pc}
 8081870:	080401c8 	.word	0x080401c8

08081874 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081874:	b508      	push	{r3, lr}
 8081876:	4b02      	ldr	r3, [pc, #8]	; (8081880 <network_get_listen_timeout+0xc>)
 8081878:	681b      	ldr	r3, [r3, #0]
 808187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808187c:	9301      	str	r3, [sp, #4]
 808187e:	bd08      	pop	{r3, pc}
 8081880:	080401c8 	.word	0x080401c8

08081884 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081884:	b508      	push	{r3, lr}
 8081886:	4b02      	ldr	r3, [pc, #8]	; (8081890 <spark_variable+0xc>)
 8081888:	681b      	ldr	r3, [r3, #0]
 808188a:	681b      	ldr	r3, [r3, #0]
 808188c:	9301      	str	r3, [sp, #4]
 808188e:	bd08      	pop	{r3, pc}
 8081890:	080401cc 	.word	0x080401cc

08081894 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081894:	b508      	push	{r3, lr}
 8081896:	4b02      	ldr	r3, [pc, #8]	; (80818a0 <spark_function+0xc>)
 8081898:	681b      	ldr	r3, [r3, #0]
 808189a:	685b      	ldr	r3, [r3, #4]
 808189c:	9301      	str	r3, [sp, #4]
 808189e:	bd08      	pop	{r3, pc}
 80818a0:	080401cc 	.word	0x080401cc

080818a4 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80818a4:	b508      	push	{r3, lr}
 80818a6:	4b02      	ldr	r3, [pc, #8]	; (80818b0 <spark_cloud_flag_connected+0xc>)
 80818a8:	681b      	ldr	r3, [r3, #0]
 80818aa:	695b      	ldr	r3, [r3, #20]
 80818ac:	9301      	str	r3, [sp, #4]
 80818ae:	bd08      	pop	{r3, pc}
 80818b0:	080401cc 	.word	0x080401cc

080818b4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80818b4:	b508      	push	{r3, lr}
 80818b6:	4b02      	ldr	r3, [pc, #8]	; (80818c0 <spark_send_event+0xc>)
 80818b8:	681b      	ldr	r3, [r3, #0]
 80818ba:	6a1b      	ldr	r3, [r3, #32]
 80818bc:	9301      	str	r3, [sp, #4]
 80818be:	bd08      	pop	{r3, pc}
 80818c0:	080401cc 	.word	0x080401cc

080818c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80818c4:	b508      	push	{r3, lr}
 80818c6:	4b02      	ldr	r3, [pc, #8]	; (80818d0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80818c8:	681b      	ldr	r3, [r3, #0]
 80818ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80818cc:	9301      	str	r3, [sp, #4]
 80818ce:	bd08      	pop	{r3, pc}
 80818d0:	080401cc 	.word	0x080401cc

080818d4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80818d4:	b508      	push	{r3, lr}
 80818d6:	4b02      	ldr	r3, [pc, #8]	; (80818e0 <malloc+0xc>)
 80818d8:	681b      	ldr	r3, [r3, #0]
 80818da:	681b      	ldr	r3, [r3, #0]
 80818dc:	9301      	str	r3, [sp, #4]
 80818de:	bd08      	pop	{r3, pc}
 80818e0:	080401a0 	.word	0x080401a0

080818e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80818e4:	b508      	push	{r3, lr}
 80818e6:	4b02      	ldr	r3, [pc, #8]	; (80818f0 <free+0xc>)
 80818e8:	681b      	ldr	r3, [r3, #0]
 80818ea:	685b      	ldr	r3, [r3, #4]
 80818ec:	9301      	str	r3, [sp, #4]
 80818ee:	bd08      	pop	{r3, pc}
 80818f0:	080401a0 	.word	0x080401a0

080818f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80818f4:	b508      	push	{r3, lr}
 80818f6:	4b02      	ldr	r3, [pc, #8]	; (8081900 <realloc+0xc>)
 80818f8:	681b      	ldr	r3, [r3, #0]
 80818fa:	689b      	ldr	r3, [r3, #8]
 80818fc:	9301      	str	r3, [sp, #4]
 80818fe:	bd08      	pop	{r3, pc}
 8081900:	080401a0 	.word	0x080401a0

08081904 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081904:	b508      	push	{r3, lr}
 8081906:	4b02      	ldr	r3, [pc, #8]	; (8081910 <snprintf+0xc>)
 8081908:	681b      	ldr	r3, [r3, #0]
 808190a:	69db      	ldr	r3, [r3, #28]
 808190c:	9301      	str	r3, [sp, #4]
 808190e:	bd08      	pop	{r3, pc}
 8081910:	080401a0 	.word	0x080401a0

08081914 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8081914:	b508      	push	{r3, lr}
 8081916:	4b02      	ldr	r3, [pc, #8]	; (8081920 <vsnprintf+0xc>)
 8081918:	681b      	ldr	r3, [r3, #0]
 808191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808191c:	9301      	str	r3, [sp, #4]
 808191e:	bd08      	pop	{r3, pc}
 8081920:	080401a0 	.word	0x080401a0

08081924 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081924:	b508      	push	{r3, lr}
 8081926:	4b02      	ldr	r3, [pc, #8]	; (8081930 <abort+0xc>)
 8081928:	681b      	ldr	r3, [r3, #0]
 808192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808192c:	9301      	str	r3, [sp, #4]
 808192e:	bd08      	pop	{r3, pc}
 8081930:	080401a0 	.word	0x080401a0

08081934 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081934:	b508      	push	{r3, lr}
 8081936:	4b02      	ldr	r3, [pc, #8]	; (8081940 <_malloc_r+0xc>)
 8081938:	681b      	ldr	r3, [r3, #0]
 808193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808193c:	9301      	str	r3, [sp, #4]
 808193e:	bd08      	pop	{r3, pc}
 8081940:	080401a0 	.word	0x080401a0

08081944 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081944:	4770      	bx	lr

08081946 <_ZN8SPIClassD0Ev>:
 8081946:	b510      	push	{r4, lr}
 8081948:	4604      	mov	r4, r0
 808194a:	2110      	movs	r1, #16
 808194c:	f001 fa65 	bl	8082e1a <_ZdlPvj>
 8081950:	4620      	mov	r0, r4
 8081952:	bd10      	pop	{r4, pc}

08081954 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8081954:	b570      	push	{r4, r5, r6, lr}
 8081956:	4604      	mov	r4, r0
 8081958:	460e      	mov	r6, r1
 808195a:	4b07      	ldr	r3, [pc, #28]	; (8081978 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808195c:	2500      	movs	r5, #0
 808195e:	6003      	str	r3, [r0, #0]
 8081960:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081964:	f7ff fe00 	bl	8081568 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8081968:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808196a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808196c:	f7ff fdcc 	bl	8081508 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081970:	60a5      	str	r5, [r4, #8]
}
 8081972:	4620      	mov	r0, r4
 8081974:	bd70      	pop	{r4, r5, r6, pc}
 8081976:	bf00      	nop
 8081978:	08084350 	.word	0x08084350

0808197c <_ZN8SPIClass5beginEt>:
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 808197c:	292e      	cmp	r1, #46	; 0x2e
 808197e:	d802      	bhi.n	8081986 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 8081980:	7900      	ldrb	r0, [r0, #4]
 8081982:	f7ff bd99 	b.w	80814b8 <HAL_SPI_Begin>
 8081986:	4770      	bx	lr

08081988 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8081988:	7900      	ldrb	r0, [r0, #4]
 808198a:	f7ff bd9d 	b.w	80814c8 <HAL_SPI_Set_Bit_Order>

0808198e <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 808198e:	7900      	ldrb	r0, [r0, #4]
 8081990:	f7ff bda2 	b.w	80814d8 <HAL_SPI_Set_Data_Mode>

08081994 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8081994:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8081996:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8081998:	6018      	str	r0, [r3, #0]
 808199a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 808199c:	6818      	ldr	r0, [r3, #0]
 808199e:	b2e5      	uxtb	r5, r4
 80819a0:	4288      	cmp	r0, r1
 80819a2:	d906      	bls.n	80819b2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80819a4:	3401      	adds	r4, #1
 80819a6:	2c08      	cmp	r4, #8
 80819a8:	d002      	beq.n	80819b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80819aa:	0840      	lsrs	r0, r0, #1
 80819ac:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80819ae:	e7f5      	b.n	808199c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80819b0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80819b2:	4b02      	ldr	r3, [pc, #8]	; (80819bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80819b4:	5d5b      	ldrb	r3, [r3, r5]
 80819b6:	7013      	strb	r3, [r2, #0]
 80819b8:	bd30      	pop	{r4, r5, pc}
 80819ba:	bf00      	nop
 80819bc:	08084358 	.word	0x08084358

080819c0 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80819c0:	b570      	push	{r4, r5, r6, lr}
 80819c2:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80819c4:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80819c8:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80819ca:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80819cc:	2214      	movs	r2, #20
 80819ce:	2100      	movs	r1, #0
 80819d0:	a803      	add	r0, sp, #12
 80819d2:	f002 fa7a 	bl	8083eca <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80819d6:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80819d8:	a903      	add	r1, sp, #12
 80819da:	4630      	mov	r0, r6
 80819dc:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80819de:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80819e2:	f7ff fda1 	bl	8081528 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80819e6:	ab02      	add	r3, sp, #8
 80819e8:	f10d 0207 	add.w	r2, sp, #7
 80819ec:	4629      	mov	r1, r5
 80819ee:	9804      	ldr	r0, [sp, #16]
 80819f0:	f7ff ffd0 	bl	8081994 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80819f4:	7920      	ldrb	r0, [r4, #4]
 80819f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80819fa:	f7ff fd75 	bl	80814e8 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80819fe:	9802      	ldr	r0, [sp, #8]
 8081a00:	b008      	add	sp, #32
 8081a02:	bd70      	pop	{r4, r5, r6, pc}

08081a04 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 8081a04:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8081a06:	7900      	ldrb	r0, [r0, #4]
 8081a08:	f7ff fd76 	bl	80814f8 <HAL_SPI_Send_Receive_Data>
}
 8081a0c:	b2c0      	uxtb	r0, r0
 8081a0e:	bd08      	pop	{r3, pc}

08081a10 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8081a10:	7900      	ldrb	r0, [r0, #4]
 8081a12:	f7ff bd81 	b.w	8081518 <HAL_SPI_Is_Enabled>

08081a16 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8081a16:	b510      	push	{r4, lr}
 8081a18:	2400      	movs	r4, #0
 8081a1a:	7004      	strb	r4, [r0, #0]
 8081a1c:	8044      	strh	r4, [r0, #2]
 8081a1e:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 8081a22:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8081a24:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8081a26:	dd07      	ble.n	8081a38 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 8081a28:	3901      	subs	r1, #1
 8081a2a:	4299      	cmp	r1, r3
 8081a2c:	d209      	bcs.n	8081a42 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 8081a2e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8081a32:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 8081a34:	2301      	movs	r3, #1
 8081a36:	e001      	b.n	8081a3c <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 8081a38:	d102      	bne.n	8081a40 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8081a3a:	2302      	movs	r3, #2
 8081a3c:	7003      	strb	r3, [r0, #0]
 8081a3e:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 8081a40:	8041      	strh	r1, [r0, #2]
    }
}
 8081a42:	bd10      	pop	{r4, pc}

08081a44 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8081a44:	b570      	push	{r4, r5, r6, lr}
 8081a46:	460d      	mov	r5, r1
 8081a48:	4616      	mov	r6, r2
 8081a4a:	b086      	sub	sp, #24
 8081a4c:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8081a4e:	2300      	movs	r3, #0
 8081a50:	9302      	str	r3, [sp, #8]
 8081a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8081a54:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8081a56:	9301      	str	r3, [sp, #4]
 8081a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8081a5a:	4631      	mov	r1, r6
 8081a5c:	9300      	str	r3, [sp, #0]
 8081a5e:	4628      	mov	r0, r5
 8081a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8081a62:	f7ff feb5 	bl	80817d0 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8081a66:	4633      	mov	r3, r6
 8081a68:	462a      	mov	r2, r5
 8081a6a:	4601      	mov	r1, r0
 8081a6c:	a804      	add	r0, sp, #16
 8081a6e:	f7ff ffd2 	bl	8081a16 <_ZN11SleepResultC1EiPKtj>
 8081a72:	4b06      	ldr	r3, [pc, #24]	; (8081a8c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8081a74:	9804      	ldr	r0, [sp, #16]
 8081a76:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8081a7a:	6018      	str	r0, [r3, #0]
    return System.sleepResult_;
}
 8081a7c:	4620      	mov	r0, r4
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8081a7e:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8081a80:	681a      	ldr	r2, [r3, #0]
 8081a82:	889b      	ldrh	r3, [r3, #4]
 8081a84:	6022      	str	r2, [r4, #0]
 8081a86:	80a3      	strh	r3, [r4, #4]
}
 8081a88:	b006      	add	sp, #24
 8081a8a:	bd70      	pop	{r4, r5, r6, pc}
 8081a8c:	20000444 	.word	0x20000444

08081a90 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081a94:	4b03      	ldr	r3, [pc, #12]	; (8081aa4 <_GLOBAL__sub_I_System+0x14>)
 8081a96:	2000      	movs	r0, #0
 8081a98:	7018      	strb	r0, [r3, #0]
 8081a9a:	8058      	strh	r0, [r3, #2]
 8081a9c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081a9e:	f7ff be53 	b.w	8081748 <set_system_mode>
 8081aa2:	bf00      	nop
 8081aa4:	20000444 	.word	0x20000444

08081aa8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8081aa8:	b510      	push	{r4, lr}
 8081aaa:	4604      	mov	r4, r0
{
	free(buffer);
 8081aac:	6800      	ldr	r0, [r0, #0]
 8081aae:	f7ff ff19 	bl	80818e4 <free>
}
 8081ab2:	4620      	mov	r0, r4
 8081ab4:	bd10      	pop	{r4, pc}

08081ab6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8081ab6:	b510      	push	{r4, lr}
 8081ab8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8081aba:	6800      	ldr	r0, [r0, #0]
 8081abc:	b108      	cbz	r0, 8081ac2 <_ZN6String10invalidateEv+0xc>
 8081abe:	f7ff ff11 	bl	80818e4 <free>
	buffer = NULL;
 8081ac2:	2300      	movs	r3, #0
 8081ac4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8081ac6:	60a3      	str	r3, [r4, #8]
 8081ac8:	6063      	str	r3, [r4, #4]
 8081aca:	bd10      	pop	{r4, pc}

08081acc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8081acc:	b538      	push	{r3, r4, r5, lr}
 8081ace:	4604      	mov	r4, r0
 8081ad0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8081ad2:	6800      	ldr	r0, [r0, #0]
 8081ad4:	3101      	adds	r1, #1
 8081ad6:	f7ff ff0d 	bl	80818f4 <realloc>
	if (newbuffer) {
 8081ada:	b110      	cbz	r0, 8081ae2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8081adc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8081ae0:	2001      	movs	r0, #1
	}
	return 0;
}
 8081ae2:	bd38      	pop	{r3, r4, r5, pc}

08081ae4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081ae4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8081ae6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081ae8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8081aea:	b113      	cbz	r3, 8081af2 <_ZN6String7reserveEj+0xe>
 8081aec:	6843      	ldr	r3, [r0, #4]
 8081aee:	428b      	cmp	r3, r1
 8081af0:	d207      	bcs.n	8081b02 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8081af2:	4620      	mov	r0, r4
 8081af4:	f7ff ffea 	bl	8081acc <_ZN6String12changeBufferEj>
 8081af8:	b120      	cbz	r0, 8081b04 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8081afa:	68a3      	ldr	r3, [r4, #8]
 8081afc:	b90b      	cbnz	r3, 8081b02 <_ZN6String7reserveEj+0x1e>
 8081afe:	6822      	ldr	r2, [r4, #0]
 8081b00:	7013      	strb	r3, [r2, #0]
 8081b02:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8081b04:	bd10      	pop	{r4, pc}

08081b06 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081b06:	b570      	push	{r4, r5, r6, lr}
 8081b08:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8081b0a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081b0c:	4604      	mov	r4, r0
 8081b0e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8081b10:	f7ff ffe8 	bl	8081ae4 <_ZN6String7reserveEj>
 8081b14:	b918      	cbnz	r0, 8081b1e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8081b16:	4620      	mov	r0, r4
 8081b18:	f7ff ffcd 	bl	8081ab6 <_ZN6String10invalidateEv>
		return *this;
 8081b1c:	e009      	b.n	8081b32 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8081b1e:	462a      	mov	r2, r5
 8081b20:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8081b22:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8081b24:	6820      	ldr	r0, [r4, #0]
 8081b26:	f002 f9c5 	bl	8083eb4 <memcpy>
	buffer[len] = 0;
 8081b2a:	6822      	ldr	r2, [r4, #0]
 8081b2c:	68a3      	ldr	r3, [r4, #8]
 8081b2e:	2100      	movs	r1, #0
 8081b30:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8081b32:	4620      	mov	r0, r4
 8081b34:	bd70      	pop	{r4, r5, r6, pc}

08081b36 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081b36:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081b38:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081b3a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081b3c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081b3e:	6043      	str	r3, [r0, #4]
	len = 0;
 8081b40:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081b42:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8081b44:	460d      	mov	r5, r1
 8081b46:	b139      	cbz	r1, 8081b58 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081b48:	4608      	mov	r0, r1
 8081b4a:	f002 fa1c 	bl	8083f86 <strlen>
 8081b4e:	4629      	mov	r1, r5
 8081b50:	4602      	mov	r2, r0
 8081b52:	4620      	mov	r0, r4
 8081b54:	f7ff ffd7 	bl	8081b06 <_ZN6String4copyEPKcj>
}
 8081b58:	4620      	mov	r0, r4
 8081b5a:	bd38      	pop	{r3, r4, r5, pc}

08081b5c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8081b5c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8081b5e:	b510      	push	{r4, lr}
 8081b60:	460b      	mov	r3, r1
 8081b62:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8081b64:	d007      	beq.n	8081b76 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8081b66:	6809      	ldr	r1, [r1, #0]
 8081b68:	b119      	cbz	r1, 8081b72 <_ZN6StringaSERKS_+0x16>
 8081b6a:	689a      	ldr	r2, [r3, #8]
 8081b6c:	f7ff ffcb 	bl	8081b06 <_ZN6String4copyEPKcj>
 8081b70:	e001      	b.n	8081b76 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8081b72:	f7ff ffa0 	bl	8081ab6 <_ZN6String10invalidateEv>

	return *this;
}
 8081b76:	4620      	mov	r0, r4
 8081b78:	bd10      	pop	{r4, pc}

08081b7a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8081b7a:	b510      	push	{r4, lr}
 8081b7c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081b7e:	2300      	movs	r3, #0
 8081b80:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081b82:	6043      	str	r3, [r0, #4]
	len = 0;
 8081b84:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081b86:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8081b88:	f7ff ffe8 	bl	8081b5c <_ZN6StringaSERKS_>
}
 8081b8c:	4620      	mov	r0, r4
 8081b8e:	bd10      	pop	{r4, pc}

08081b90 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8081b90:	6800      	ldr	r0, [r0, #0]
 8081b92:	b108      	cbz	r0, 8081b98 <_ZNK6String5toIntEv+0x8>
 8081b94:	f002 b97c 	b.w	8083e90 <atol>
	return 0;
}
 8081b98:	4770      	bx	lr

08081b9a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8081b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081b9c:	4606      	mov	r6, r0
 8081b9e:	460d      	mov	r5, r1
 8081ba0:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8081ba2:	2400      	movs	r4, #0
  while (size--) {
 8081ba4:	42bd      	cmp	r5, r7
 8081ba6:	d00c      	beq.n	8081bc2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8081ba8:	6833      	ldr	r3, [r6, #0]
 8081baa:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081bae:	689b      	ldr	r3, [r3, #8]
 8081bb0:	4630      	mov	r0, r6
 8081bb2:	4798      	blx	r3
     if (chunk>=0)
 8081bb4:	2800      	cmp	r0, #0
 8081bb6:	db01      	blt.n	8081bbc <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8081bb8:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8081bba:	e7f3      	b.n	8081ba4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8081bbc:	2c00      	cmp	r4, #0
 8081bbe:	bf08      	it	eq
 8081bc0:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8081bc2:	4620      	mov	r0, r4
 8081bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081bc6 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081bc6:	b570      	push	{r4, r5, r6, lr}
 8081bc8:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081bca:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081bcc:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081bce:	b149      	cbz	r1, 8081be4 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081bd0:	f002 f9d9 	bl	8083f86 <strlen>
 8081bd4:	682b      	ldr	r3, [r5, #0]
 8081bd6:	4602      	mov	r2, r0
 8081bd8:	4621      	mov	r1, r4
 8081bda:	4628      	mov	r0, r5
    }
 8081bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081be0:	68db      	ldr	r3, [r3, #12]
 8081be2:	4718      	bx	r3
    }
 8081be4:	bd70      	pop	{r4, r5, r6, pc}

08081be6 <_ZN5Print5printEPKc>:
 8081be6:	b508      	push	{r3, lr}
 8081be8:	f7ff ffed 	bl	8081bc6 <_ZN5Print5writeEPKc>
 8081bec:	bd08      	pop	{r3, pc}

08081bee <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8081bee:	6803      	ldr	r3, [r0, #0]
 8081bf0:	689b      	ldr	r3, [r3, #8]
 8081bf2:	4718      	bx	r3

08081bf4 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081bf4:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8081bf6:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081bf8:	4605      	mov	r5, r0
  size_t n = print('\r');
 8081bfa:	f7ff fff8 	bl	8081bee <_ZN5Print5printEc>
  n += print('\n');
 8081bfe:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8081c00:	4604      	mov	r4, r0
  n += print('\n');
 8081c02:	4628      	mov	r0, r5
 8081c04:	f7ff fff3 	bl	8081bee <_ZN5Print5printEc>
  return n;
}
 8081c08:	4420      	add	r0, r4
 8081c0a:	bd38      	pop	{r3, r4, r5, pc}

08081c0c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8081c0c:	b538      	push	{r3, r4, r5, lr}
 8081c0e:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8081c10:	f7ff ffd9 	bl	8081bc6 <_ZN5Print5writeEPKc>
 8081c14:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8081c16:	4628      	mov	r0, r5
 8081c18:	f7ff ffec 	bl	8081bf4 <_ZN5Print7printlnEv>
  return n;
}
 8081c1c:	4420      	add	r0, r4
 8081c1e:	bd38      	pop	{r3, r4, r5, pc}

08081c20 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081c20:	2a01      	cmp	r2, #1
 8081c22:	bf98      	it	ls
 8081c24:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8081c26:	b530      	push	{r4, r5, lr}
 8081c28:	460b      	mov	r3, r1
 8081c2a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8081c2c:	2100      	movs	r1, #0
 8081c2e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8081c32:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8081c36:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8081c3a:	fb05 3312 	mls	r3, r5, r2, r3
 8081c3e:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081c40:	2b09      	cmp	r3, #9
 8081c42:	bf94      	ite	ls
 8081c44:	3330      	addls	r3, #48	; 0x30
 8081c46:	3337      	addhi	r3, #55	; 0x37
 8081c48:	b2db      	uxtb	r3, r3
 8081c4a:	4621      	mov	r1, r4
 8081c4c:	f804 3901 	strb.w	r3, [r4], #-1
 8081c50:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8081c52:	2d00      	cmp	r5, #0
 8081c54:	d1ef      	bne.n	8081c36 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8081c56:	f7ff ffb6 	bl	8081bc6 <_ZN5Print5writeEPKc>
}
 8081c5a:	b00b      	add	sp, #44	; 0x2c
 8081c5c:	bd30      	pop	{r4, r5, pc}

08081c5e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8081c5e:	b410      	push	{r4}
  if (base == 0) return write(n);
 8081c60:	b922      	cbnz	r2, 8081c6c <_ZN5Print5printEmi+0xe>
 8081c62:	6803      	ldr	r3, [r0, #0]
 8081c64:	b2c9      	uxtb	r1, r1
 8081c66:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8081c68:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8081c6a:	4718      	bx	r3
  else return printNumber(n, base);
 8081c6c:	b2d2      	uxtb	r2, r2
}
 8081c6e:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8081c70:	f7ff bfd6 	b.w	8081c20 <_ZN5Print11printNumberEmh>

08081c74 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8081c74:	f7ff bff3 	b.w	8081c5e <_ZN5Print5printEmi>

08081c78 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8081c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081c7c:	4607      	mov	r7, r0
 8081c7e:	460e      	mov	r6, r1
  if (base == 0) {
 8081c80:	4615      	mov	r5, r2
 8081c82:	b92a      	cbnz	r2, 8081c90 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8081c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8081c88:	6803      	ldr	r3, [r0, #0]
 8081c8a:	b2c9      	uxtb	r1, r1
 8081c8c:	689b      	ldr	r3, [r3, #8]
 8081c8e:	4718      	bx	r3
  } else if (base == 10) {
 8081c90:	2a0a      	cmp	r2, #10
 8081c92:	d102      	bne.n	8081c9a <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8081c94:	2900      	cmp	r1, #0
 8081c96:	da01      	bge.n	8081c9c <_ZN5Print5printEli+0x24>
 8081c98:	e004      	b.n	8081ca4 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8081c9a:	b2d2      	uxtb	r2, r2
  }
}
 8081c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8081ca0:	f7ff bfbe 	b.w	8081c20 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8081ca4:	212d      	movs	r1, #45	; 0x2d
 8081ca6:	f7ff ffa2 	bl	8081bee <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8081caa:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8081cac:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8081cae:	4271      	negs	r1, r6
 8081cb0:	4638      	mov	r0, r7
 8081cb2:	f7ff ffb5 	bl	8081c20 <_ZN5Print11printNumberEmh>
 8081cb6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8081cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081cbc <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 8081cbc:	b538      	push	{r3, r4, r5, lr}
 8081cbe:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8081cc0:	f7ff ffda 	bl	8081c78 <_ZN5Print5printEli>
 8081cc4:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 8081cc6:	4628      	mov	r0, r5
 8081cc8:	f7ff ff94 	bl	8081bf4 <_ZN5Print7printlnEv>
  return n;
}
 8081ccc:	4420      	add	r0, r4
 8081cce:	bd38      	pop	{r3, r4, r5, pc}

08081cd0 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8081cd0:	b40c      	push	{r2, r3}
 8081cd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081cd6:	b087      	sub	sp, #28
 8081cd8:	af00      	add	r7, sp, #0
 8081cda:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8081cde:	f854 9b04 	ldr.w	r9, [r4], #4
 8081ce2:	4605      	mov	r5, r0
 8081ce4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8081ce6:	4623      	mov	r3, r4
 8081ce8:	464a      	mov	r2, r9
 8081cea:	2114      	movs	r1, #20
 8081cec:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8081cee:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8081cf0:	f7ff fe10 	bl	8081914 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8081cf4:	2813      	cmp	r0, #19
 8081cf6:	d805      	bhi.n	8081d04 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8081cf8:	1d39      	adds	r1, r7, #4
 8081cfa:	4628      	mov	r0, r5
 8081cfc:	f7ff ff63 	bl	8081bc6 <_ZN5Print5writeEPKc>
 8081d00:	4604      	mov	r4, r0
 8081d02:	e013      	b.n	8081d2c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8081d04:	f100 0308 	add.w	r3, r0, #8
 8081d08:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8081d0c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8081d0e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8081d12:	1c41      	adds	r1, r0, #1
 8081d14:	4623      	mov	r3, r4
 8081d16:	464a      	mov	r2, r9
 8081d18:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8081d1a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8081d1c:	f7ff fdfa 	bl	8081914 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8081d20:	4669      	mov	r1, sp
 8081d22:	4628      	mov	r0, r5
 8081d24:	f7ff ff4f 	bl	8081bc6 <_ZN5Print5writeEPKc>
 8081d28:	4604      	mov	r4, r0
 8081d2a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8081d2c:	b11e      	cbz	r6, 8081d36 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8081d2e:	4628      	mov	r0, r5
 8081d30:	f7ff ff60 	bl	8081bf4 <_ZN5Print7printlnEv>
 8081d34:	4404      	add	r4, r0
    return n;
}
 8081d36:	4620      	mov	r0, r4
 8081d38:	371c      	adds	r7, #28
 8081d3a:	46bd      	mov	sp, r7
 8081d3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081d40:	b002      	add	sp, #8
 8081d42:	4770      	bx	lr

08081d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8081d44:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8081d46:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8081d48:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8081d4a:	b17c      	cbz	r4, 8081d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8081d4c:	6863      	ldr	r3, [r4, #4]
 8081d4e:	3b01      	subs	r3, #1
 8081d50:	6063      	str	r3, [r4, #4]
 8081d52:	b95b      	cbnz	r3, 8081d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8081d54:	6823      	ldr	r3, [r4, #0]
 8081d56:	4620      	mov	r0, r4
 8081d58:	689b      	ldr	r3, [r3, #8]
 8081d5a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081d5c:	68a3      	ldr	r3, [r4, #8]
 8081d5e:	3b01      	subs	r3, #1
 8081d60:	60a3      	str	r3, [r4, #8]
 8081d62:	b91b      	cbnz	r3, 8081d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8081d64:	6823      	ldr	r3, [r4, #0]
 8081d66:	4620      	mov	r0, r4
 8081d68:	68db      	ldr	r3, [r3, #12]
 8081d6a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8081d6c:	4628      	mov	r0, r5
 8081d6e:	bd38      	pop	{r3, r4, r5, pc}

08081d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081d70:	680b      	ldr	r3, [r1, #0]
 8081d72:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081d74:	b113      	cbz	r3, 8081d7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081d76:	685a      	ldr	r2, [r3, #4]
 8081d78:	3201      	adds	r2, #1
 8081d7a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081d7c:	4770      	bx	lr
	...

08081d80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8081d80:	4a01      	ldr	r2, [pc, #4]	; (8081d88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8081d82:	4b02      	ldr	r3, [pc, #8]	; (8081d8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8081d84:	601a      	str	r2, [r3, #0]
 8081d86:	4770      	bx	lr
 8081d88:	08084413 	.word	0x08084413
 8081d8c:	2000044c 	.word	0x2000044c

08081d90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081d90:	4b02      	ldr	r3, [pc, #8]	; (8081d9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081d92:	681a      	ldr	r2, [r3, #0]
 8081d94:	4b02      	ldr	r3, [pc, #8]	; (8081da0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081d96:	601a      	str	r2, [r3, #0]
 8081d98:	4770      	bx	lr
 8081d9a:	bf00      	nop
 8081d9c:	20000038 	.word	0x20000038
 8081da0:	20000450 	.word	0x20000450

08081da4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081da4:	2100      	movs	r1, #0
 8081da6:	f7ff bcd7 	b.w	8081758 <system_delay_ms>

08081daa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081daa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081dac:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081dae:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081db0:	b113      	cbz	r3, 8081db8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081db2:	2203      	movs	r2, #3
 8081db4:	4601      	mov	r1, r0
 8081db6:	4798      	blx	r3
    }
 8081db8:	4620      	mov	r0, r4
 8081dba:	bd10      	pop	{r4, pc}

08081dbc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8081dbc:	b510      	push	{r4, lr}
 8081dbe:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081dc0:	f7ff fff3 	bl	8081daa <_ZNSt14_Function_baseD1Ev>
 8081dc4:	4620      	mov	r0, r4
 8081dc6:	bd10      	pop	{r4, pc}

08081dc8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081dc8:	b513      	push	{r0, r1, r4, lr}
 8081dca:	460b      	mov	r3, r1
 8081dcc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081dce:	c803      	ldmia	r0, {r0, r1}
 8081dd0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081dd8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081ddc:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081de0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081de4:	b002      	add	sp, #8
 8081de6:	bd10      	pop	{r4, pc}

08081de8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081de8:	4803      	ldr	r0, [pc, #12]	; (8081df8 <_GLOBAL__sub_I_RGB+0x10>)
 8081dea:	2300      	movs	r3, #0
 8081dec:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8081dee:	4a03      	ldr	r2, [pc, #12]	; (8081dfc <_GLOBAL__sub_I_RGB+0x14>)
 8081df0:	4903      	ldr	r1, [pc, #12]	; (8081e00 <_GLOBAL__sub_I_RGB+0x18>)
 8081df2:	f001 b80d 	b.w	8082e10 <__aeabi_atexit>
 8081df6:	bf00      	nop
 8081df8:	20000454 	.word	0x20000454
 8081dfc:	200000a4 	.word	0x200000a4
 8081e00:	08081dbd 	.word	0x08081dbd

08081e04 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8081e04:	6800      	ldr	r0, [r0, #0]
 8081e06:	f000 be8c 	b.w	8082b22 <_ZN7TwoWire4lockEv>

08081e0a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8081e0a:	b510      	push	{r4, lr}
 8081e0c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8081e0e:	6001      	str	r1, [r0, #0]
 8081e10:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8081e12:	b10a      	cbz	r2, 8081e18 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8081e14:	f7ff fff6 	bl	8081e04 <_ZN9FuelGauge4lockEv>
    }
}
 8081e18:	4620      	mov	r0, r4
 8081e1a:	bd10      	pop	{r4, pc}

08081e1c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8081e1c:	b538      	push	{r3, r4, r5, lr}
 8081e1e:	4604      	mov	r4, r0
 8081e20:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8081e22:	f000 ffd5 	bl	8082dd0 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8081e26:	462a      	mov	r2, r5
 8081e28:	4601      	mov	r1, r0
 8081e2a:	4620      	mov	r0, r4
 8081e2c:	f7ff ffed 	bl	8081e0a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8081e30:	4620      	mov	r0, r4
 8081e32:	bd38      	pop	{r3, r4, r5, pc}

08081e34 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8081e34:	6800      	ldr	r0, [r0, #0]
 8081e36:	f000 be7d 	b.w	8082b34 <_ZN7TwoWire6unlockEv>

08081e3a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8081e3a:	b510      	push	{r4, lr}
{
    if (lock_) {
 8081e3c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8081e3e:	4604      	mov	r4, r0
{
    if (lock_) {
 8081e40:	b10b      	cbz	r3, 8081e46 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8081e42:	f7ff fff7 	bl	8081e34 <_ZN9FuelGauge6unlockEv>
    }
}
 8081e46:	4620      	mov	r0, r4
 8081e48:	bd10      	pop	{r4, pc}

08081e4a <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8081e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081e4c:	4604      	mov	r4, r0
 8081e4e:	460f      	mov	r7, r1
 8081e50:	4616      	mov	r6, r2
 8081e52:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 8081e54:	f7ff ffd6 	bl	8081e04 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8081e58:	6820      	ldr	r0, [r4, #0]
 8081e5a:	2136      	movs	r1, #54	; 0x36
 8081e5c:	f000 fe56 	bl	8082b0c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8081e60:	6820      	ldr	r0, [r4, #0]
 8081e62:	4639      	mov	r1, r7
 8081e64:	6803      	ldr	r3, [r0, #0]
 8081e66:	689b      	ldr	r3, [r3, #8]
 8081e68:	4798      	blx	r3
    i2c_.endTransmission(true);
 8081e6a:	2101      	movs	r1, #1
 8081e6c:	6820      	ldr	r0, [r4, #0]
 8081e6e:	f000 fe50 	bl	8082b12 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8081e72:	2202      	movs	r2, #2
 8081e74:	2136      	movs	r1, #54	; 0x36
 8081e76:	2301      	movs	r3, #1
 8081e78:	6820      	ldr	r0, [r4, #0]
 8081e7a:	f000 fe3e 	bl	8082afa <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8081e7e:	6820      	ldr	r0, [r4, #0]
 8081e80:	6803      	ldr	r3, [r0, #0]
 8081e82:	695b      	ldr	r3, [r3, #20]
 8081e84:	4798      	blx	r3
 8081e86:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8081e88:	6820      	ldr	r0, [r4, #0]
 8081e8a:	6803      	ldr	r3, [r0, #0]
 8081e8c:	695b      	ldr	r3, [r3, #20]
 8081e8e:	4798      	blx	r3
 8081e90:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8081e92:	4620      	mov	r0, r4
}
 8081e94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8081e98:	f7ff bfcc 	b.w	8081e34 <_ZN9FuelGauge6unlockEv>

08081e9c <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8081e9c:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8081e9e:	2200      	movs	r2, #0
	byte LSB = 0;
 8081ea0:	ab02      	add	r3, sp, #8
 8081ea2:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8081ea6:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8081eaa:	2104      	movs	r1, #4
 8081eac:	f10d 0206 	add.w	r2, sp, #6
 8081eb0:	f7ff ffcb 	bl	8081e4a <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8081eb4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8081eb8:	f001 fa4e 	bl	8083358 <__aeabi_i2d>
 8081ebc:	2200      	movs	r2, #0
 8081ebe:	4b08      	ldr	r3, [pc, #32]	; (8081ee0 <_ZN9FuelGauge6getSoCEv+0x44>)
 8081ec0:	f001 fab0 	bl	8083424 <__aeabi_dmul>
 8081ec4:	f001 fcc0 	bl	8083848 <__aeabi_d2f>
 8081ec8:	4604      	mov	r4, r0
 8081eca:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8081ece:	f001 fdc5 	bl	8083a5c <__aeabi_i2f>
 8081ed2:	4601      	mov	r1, r0
 8081ed4:	4620      	mov	r0, r4
 8081ed6:	f001 fd0d 	bl	80838f4 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8081eda:	b002      	add	sp, #8
 8081edc:	bd10      	pop	{r4, pc}
 8081ede:	bf00      	nop
 8081ee0:	3f700000 	.word	0x3f700000

08081ee4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081ee4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081ee6:	4b18      	ldr	r3, [pc, #96]	; (8081f48 <serialEventRun+0x64>)
 8081ee8:	b133      	cbz	r3, 8081ef8 <serialEventRun+0x14>
 8081eea:	f000 fc53 	bl	8082794 <_Z16_fetch_usbserialv>
 8081eee:	6803      	ldr	r3, [r0, #0]
 8081ef0:	691b      	ldr	r3, [r3, #16]
 8081ef2:	4798      	blx	r3
 8081ef4:	2800      	cmp	r0, #0
 8081ef6:	dc1e      	bgt.n	8081f36 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8081ef8:	4b14      	ldr	r3, [pc, #80]	; (8081f4c <serialEventRun+0x68>)
 8081efa:	b133      	cbz	r3, 8081f0a <serialEventRun+0x26>
 8081efc:	f000 fd7c 	bl	80829f8 <_Z22__fetch_global_Serial1v>
 8081f00:	6803      	ldr	r3, [r0, #0]
 8081f02:	691b      	ldr	r3, [r3, #16]
 8081f04:	4798      	blx	r3
 8081f06:	2800      	cmp	r0, #0
 8081f08:	dc18      	bgt.n	8081f3c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8081f0a:	4b11      	ldr	r3, [pc, #68]	; (8081f50 <serialEventRun+0x6c>)
 8081f0c:	b10b      	cbz	r3, 8081f12 <serialEventRun+0x2e>
 8081f0e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8081f12:	4b10      	ldr	r3, [pc, #64]	; (8081f54 <serialEventRun+0x70>)
 8081f14:	b10b      	cbz	r3, 8081f1a <serialEventRun+0x36>
 8081f16:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8081f1a:	4b0f      	ldr	r3, [pc, #60]	; (8081f58 <serialEventRun+0x74>)
 8081f1c:	b10b      	cbz	r3, 8081f22 <serialEventRun+0x3e>
 8081f1e:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081f22:	4b0e      	ldr	r3, [pc, #56]	; (8081f5c <serialEventRun+0x78>)
 8081f24:	b17b      	cbz	r3, 8081f46 <serialEventRun+0x62>
 8081f26:	f000 fc71 	bl	808280c <_Z17_fetch_usbserial1v>
 8081f2a:	6803      	ldr	r3, [r0, #0]
 8081f2c:	691b      	ldr	r3, [r3, #16]
 8081f2e:	4798      	blx	r3
 8081f30:	2800      	cmp	r0, #0
 8081f32:	dc06      	bgt.n	8081f42 <serialEventRun+0x5e>
 8081f34:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081f36:	f3af 8000 	nop.w
 8081f3a:	e7dd      	b.n	8081ef8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8081f3c:	f3af 8000 	nop.w
 8081f40:	e7e3      	b.n	8081f0a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8081f42:	f3af 8000 	nop.w
 8081f46:	bd08      	pop	{r3, pc}
	...

08081f60 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8081f60:	b508      	push	{r3, lr}
	serialEventRun();
 8081f62:	f7ff ffbf 	bl	8081ee4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081f66:	f7ff faef 	bl	8081548 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081f6a:	4b01      	ldr	r3, [pc, #4]	; (8081f70 <_post_loop+0x10>)
 8081f6c:	6018      	str	r0, [r3, #0]
 8081f6e:	bd08      	pop	{r3, pc}
 8081f70:	20000930 	.word	0x20000930

08081f74 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081f74:	4802      	ldr	r0, [pc, #8]	; (8081f80 <_Z33system_initialize_user_backup_ramv+0xc>)
 8081f76:	4a03      	ldr	r2, [pc, #12]	; (8081f84 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081f78:	4903      	ldr	r1, [pc, #12]	; (8081f88 <_Z33system_initialize_user_backup_ramv+0x14>)
 8081f7a:	1a12      	subs	r2, r2, r0
 8081f7c:	f001 bf9a 	b.w	8083eb4 <memcpy>
 8081f80:	40024000 	.word	0x40024000
 8081f84:	40024004 	.word	0x40024004
 8081f88:	08084730 	.word	0x08084730

08081f8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081f8c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081f8e:	2300      	movs	r3, #0
 8081f90:	9300      	str	r3, [sp, #0]
 8081f92:	461a      	mov	r2, r3
 8081f94:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081f98:	f7ff fc10 	bl	80817bc <system_ctrl_set_result>
}
 8081f9c:	b003      	add	sp, #12
 8081f9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081fa4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081fa4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081fa6:	8843      	ldrh	r3, [r0, #2]
 8081fa8:	2b0a      	cmp	r3, #10
 8081faa:	d008      	beq.n	8081fbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081fac:	2b50      	cmp	r3, #80	; 0x50
 8081fae:	d109      	bne.n	8081fc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081fb0:	4b09      	ldr	r3, [pc, #36]	; (8081fd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081fb2:	681b      	ldr	r3, [r3, #0]
 8081fb4:	b13b      	cbz	r3, 8081fc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8081fb6:	b003      	add	sp, #12
 8081fb8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8081fbc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8081fbe:	f7ff ffe5 	bl	8081f8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8081fc2:	e006      	b.n	8081fd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081fc4:	2300      	movs	r3, #0
 8081fc6:	9300      	str	r3, [sp, #0]
 8081fc8:	461a      	mov	r2, r3
 8081fca:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081fce:	f7ff fbf5 	bl	80817bc <system_ctrl_set_result>
        break;
    }
}
 8081fd2:	b003      	add	sp, #12
 8081fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8081fd8:	20000464 	.word	0x20000464

08081fdc <module_user_init_hook>:

void module_user_init_hook()
{
 8081fdc:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081fde:	4c10      	ldr	r4, [pc, #64]	; (8082020 <module_user_init_hook+0x44>)
 8081fe0:	4d10      	ldr	r5, [pc, #64]	; (8082024 <module_user_init_hook+0x48>)
 8081fe2:	6823      	ldr	r3, [r4, #0]
 8081fe4:	42ab      	cmp	r3, r5
 8081fe6:	4b10      	ldr	r3, [pc, #64]	; (8082028 <module_user_init_hook+0x4c>)
 8081fe8:	bf0c      	ite	eq
 8081fea:	2201      	moveq	r2, #1
 8081fec:	2200      	movne	r2, #0
 8081fee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081ff0:	d002      	beq.n	8081ff8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8081ff2:	f7ff ffbf 	bl	8081f74 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081ff6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081ff8:	f7ff fa9e 	bl	8081538 <HAL_RNG_GetRandomNumber>
 8081ffc:	4604      	mov	r4, r0
    srand(seed);
 8081ffe:	f001 ff6d 	bl	8083edc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082002:	4b0a      	ldr	r3, [pc, #40]	; (808202c <module_user_init_hook+0x50>)
 8082004:	b113      	cbz	r3, 808200c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8082006:	4620      	mov	r0, r4
 8082008:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808200c:	2100      	movs	r1, #0
 808200e:	4807      	ldr	r0, [pc, #28]	; (808202c <module_user_init_hook+0x50>)
 8082010:	f7ff fc58 	bl	80818c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082018:	2100      	movs	r1, #0
 808201a:	4805      	ldr	r0, [pc, #20]	; (8082030 <module_user_init_hook+0x54>)
 808201c:	f7ff bbc4 	b.w	80817a8 <system_ctrl_set_app_request_handler>
 8082020:	40024000 	.word	0x40024000
 8082024:	9a271c1e 	.word	0x9a271c1e
 8082028:	20000468 	.word	0x20000468
 808202c:	00000000 	.word	0x00000000
 8082030:	08081fa5 	.word	0x08081fa5

08082034 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082034:	4770      	bx	lr

08082036 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8082036:	2000      	movs	r0, #0
 8082038:	4770      	bx	lr

0808203a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808203a:	b510      	push	{r4, lr}
 808203c:	4604      	mov	r4, r0
 808203e:	2110      	movs	r1, #16
 8082040:	f000 feeb 	bl	8082e1a <_ZdlPvj>
 8082044:	4620      	mov	r0, r4
 8082046:	bd10      	pop	{r4, pc}

08082048 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8082048:	b508      	push	{r3, lr}
      { delete this; }
 808204a:	b108      	cbz	r0, 8082050 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808204c:	f7ff fff5 	bl	808203a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082050:	bd08      	pop	{r3, pc}

08082052 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082052:	2200      	movs	r2, #0
 8082054:	6002      	str	r2, [r0, #0]
 8082056:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808205a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808205c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808205e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8082062:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082064:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082066:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8082068:	680c      	ldr	r4, [r1, #0]
 808206a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808206c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808206e:	bd10      	pop	{r4, pc}

08082070 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8082070:	b510      	push	{r4, lr}
 8082072:	4604      	mov	r4, r0
    free((void*)msg_);
 8082074:	6800      	ldr	r0, [r0, #0]
 8082076:	f7ff fc35 	bl	80818e4 <free>
}
 808207a:	4620      	mov	r0, r4
 808207c:	bd10      	pop	{r4, pc}

0808207e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808207e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082080:	68c4      	ldr	r4, [r0, #12]
 8082082:	b1f4      	cbz	r4, 80820c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8082084:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082086:	2b02      	cmp	r3, #2
 8082088:	d103      	bne.n	8082092 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808208a:	f104 000c 	add.w	r0, r4, #12
 808208e:	f7ff ffef 	bl	8082070 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8082092:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8082094:	b135      	cbz	r5, 80820a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082096:	4628      	mov	r0, r5
 8082098:	f7ff fe87 	bl	8081daa <_ZNSt14_Function_baseD1Ev>
 808209c:	2110      	movs	r1, #16
 808209e:	4628      	mov	r0, r5
 80820a0:	f000 febb 	bl	8082e1a <_ZdlPvj>
 80820a4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80820a6:	b135      	cbz	r5, 80820b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80820a8:	4628      	mov	r0, r5
 80820aa:	f7ff fe7e 	bl	8081daa <_ZNSt14_Function_baseD1Ev>
 80820ae:	2110      	movs	r1, #16
 80820b0:	4628      	mov	r0, r5
 80820b2:	f000 feb2 	bl	8082e1a <_ZdlPvj>
 80820b6:	4620      	mov	r0, r4
 80820b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80820bc:	2114      	movs	r1, #20
 80820be:	f000 beac 	b.w	8082e1a <_ZdlPvj>
 80820c2:	bd38      	pop	{r3, r4, r5, pc}

080820c4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80820c4:	b510      	push	{r4, lr}
 80820c6:	b088      	sub	sp, #32
 80820c8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80820ca:	4668      	mov	r0, sp
 80820cc:	f7ff fd33 	bl	8081b36 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80820d0:	4669      	mov	r1, sp
 80820d2:	a804      	add	r0, sp, #16
 80820d4:	f7ff fd51 	bl	8081b7a <_ZN6StringC1ERKS_>
 80820d8:	a804      	add	r0, sp, #16
 80820da:	47a0      	blx	r4
 80820dc:	4604      	mov	r4, r0
 80820de:	a804      	add	r0, sp, #16
 80820e0:	f7ff fce2 	bl	8081aa8 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80820e4:	4668      	mov	r0, sp
 80820e6:	f7ff fcdf 	bl	8081aa8 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80820ea:	4620      	mov	r0, r4
 80820ec:	b008      	add	sp, #32
 80820ee:	bd10      	pop	{r4, pc}

080820f0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80820f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80820f2:	4607      	mov	r7, r0
 80820f4:	460e      	mov	r6, r1
 80820f6:	4615      	mov	r5, r2
 80820f8:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80820fa:	2410      	movs	r4, #16
 80820fc:	4622      	mov	r2, r4
 80820fe:	2100      	movs	r1, #0
 8082100:	4668      	mov	r0, sp
 8082102:	f001 fee2 	bl	8083eca <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082106:	2200      	movs	r2, #0
 8082108:	4669      	mov	r1, sp
 808210a:	4610      	mov	r0, r2
         size = sizeof(*this);
 808210c:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8082110:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8082112:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8082114:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082116:	f7ff fbbd 	bl	8081894 <spark_function>
}
 808211a:	b005      	add	sp, #20
 808211c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808211e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808211e:	b513      	push	{r0, r1, r4, lr}
 8082120:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082122:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8082126:	2300      	movs	r3, #0
 8082128:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808212a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808212c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808212e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082130:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8082132:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082134:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082136:	f7ff fe05 	bl	8081d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808213a:	4620      	mov	r0, r4
 808213c:	b002      	add	sp, #8
 808213e:	bd10      	pop	{r4, pc}

08082140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082142:	460c      	mov	r4, r1
 8082144:	4606      	mov	r6, r0
 8082146:	460f      	mov	r7, r1
 8082148:	f854 3b04 	ldr.w	r3, [r4], #4
 808214c:	ad02      	add	r5, sp, #8
 808214e:	f845 3d08 	str.w	r3, [r5, #-8]!
 8082152:	4621      	mov	r1, r4
 8082154:	a801      	add	r0, sp, #4
 8082156:	f7ff fe0b 	bl	8081d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808215a:	4629      	mov	r1, r5
 808215c:	4630      	mov	r0, r6
 808215e:	f7ff ffde 	bl	808211e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082162:	a801      	add	r0, sp, #4
 8082164:	f7ff fdee 	bl	8081d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082168:	4620      	mov	r0, r4
 808216a:	f7ff fdeb 	bl	8081d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808216e:	4638      	mov	r0, r7
 8082170:	2108      	movs	r1, #8
 8082172:	f000 fe52 	bl	8082e1a <_ZdlPvj>
        return p;
    }
 8082176:	4630      	mov	r0, r6
 8082178:	b003      	add	sp, #12
 808217a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808217c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808217c:	b538      	push	{r3, r4, r5, lr}
 808217e:	2300      	movs	r3, #0
 8082180:	4604      	mov	r4, r0
 8082182:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082184:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082186:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082188:	f7fd ff87 	bl	808009a <_Znwj>
 808218c:	b128      	cbz	r0, 808219a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808218e:	2301      	movs	r3, #1
 8082190:	6043      	str	r3, [r0, #4]
 8082192:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8082194:	4b02      	ldr	r3, [pc, #8]	; (80821a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082196:	60c5      	str	r5, [r0, #12]
 8082198:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808219a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 808219c:	4620      	mov	r0, r4
 808219e:	bd38      	pop	{r3, r4, r5, pc}
 80821a0:	08084470 	.word	0x08084470

080821a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80821a4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80821a6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80821a8:	b90a      	cbnz	r2, 80821ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80821aa:	f000 fe38 	bl	8082e1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80821ae:	68c3      	ldr	r3, [r0, #12]
    }
 80821b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80821b4:	4718      	bx	r3

080821b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80821b6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80821b8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80821ba:	f100 0110 	add.w	r1, r0, #16
 80821be:	f7ff fff1 	bl	80821a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80821c2:	bd08      	pop	{r3, pc}

080821c4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80821c4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80821c6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80821c8:	b90a      	cbnz	r2, 80821ce <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80821ca:	f000 fe28 	bl	8082e1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80821ce:	68c3      	ldr	r3, [r0, #12]
    }
 80821d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80821d4:	4718      	bx	r3

080821d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80821d6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80821d8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80821da:	f100 0110 	add.w	r1, r0, #16
 80821de:	f7ff fff1 	bl	80821c4 <_ZNKSt8functionIFvRKbEEclES1_>
 80821e2:	bd08      	pop	{r3, pc}

080821e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80821e4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80821e6:	2300      	movs	r3, #0
 80821e8:	6083      	str	r3, [r0, #8]
 80821ea:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80821ec:	4604      	mov	r4, r0
 80821ee:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80821f0:	b12b      	cbz	r3, 80821fe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80821f2:	2202      	movs	r2, #2
 80821f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80821f6:	68eb      	ldr	r3, [r5, #12]
 80821f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80821fa:	68ab      	ldr	r3, [r5, #8]
 80821fc:	60a3      	str	r3, [r4, #8]
	}
    }
 80821fe:	4620      	mov	r0, r4
 8082200:	bd38      	pop	{r3, r4, r5, pc}
	...

08082204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8082204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082206:	b089      	sub	sp, #36	; 0x24
 8082208:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808220a:	4668      	mov	r0, sp
 808220c:	f7ff ff21 	bl	8082052 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082210:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082214:	2300      	movs	r3, #0
 8082216:	f88d 3008 	strb.w	r3, [sp, #8]
 808221a:	e8d4 3f4f 	ldrexb	r3, [r4]
 808221e:	2b00      	cmp	r3, #0
 8082220:	d103      	bne.n	808222a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8082222:	e8c4 2f41 	strexb	r1, r2, [r4]
 8082226:	2900      	cmp	r1, #0
 8082228:	d1f7      	bne.n	808221a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 808222a:	d002      	beq.n	8082232 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 808222c:	f88d 3008 	strb.w	r3, [sp, #8]
 8082230:	e063      	b.n	80822fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8082232:	f114 050c 	adds.w	r5, r4, #12
 8082236:	d003      	beq.n	8082240 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8082238:	4669      	mov	r1, sp
 808223a:	4628      	mov	r0, r5
 808223c:	f7ff ff09 	bl	8082052 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082240:	f3bf 8f5f 	dmb	sy
 8082244:	2301      	movs	r3, #1
 8082246:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082248:	f3bf 8f5f 	dmb	sy
 808224c:	f104 0308 	add.w	r3, r4, #8
 8082250:	2000      	movs	r0, #0
 8082252:	e853 6f00 	ldrex	r6, [r3]
 8082256:	e843 0200 	strex	r2, r0, [r3]
 808225a:	2a00      	cmp	r2, #0
 808225c:	d1f9      	bne.n	8082252 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808225e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082262:	2e00      	cmp	r6, #0
 8082264:	d049      	beq.n	80822fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082266:	f7ff fa8f 	bl	8081788 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808226a:	b120      	cbz	r0, 8082276 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808226c:	4629      	mov	r1, r5
 808226e:	4630      	mov	r0, r6
 8082270:	f7ff ff98 	bl	80821a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082274:	e03a      	b.n	80822ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082276:	4631      	mov	r1, r6
 8082278:	a802      	add	r0, sp, #8
 808227a:	f7ff ffb3 	bl	80821e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808227e:	68e0      	ldr	r0, [r4, #12]
 8082280:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082284:	b108      	cbz	r0, 808228a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8082286:	f001 fe63 	bl	8083f50 <strdup>
 808228a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808228c:	2010      	movs	r0, #16
 808228e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8082292:	f7fd ff02 	bl	808009a <_Znwj>
 8082296:	4605      	mov	r5, r0
 8082298:	b1e8      	cbz	r0, 80822d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808229a:	2700      	movs	r7, #0
 808229c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808229e:	2018      	movs	r0, #24
 80822a0:	f7fd fefb 	bl	808009a <_Znwj>
 80822a4:	4604      	mov	r4, r0
 80822a6:	b188      	cbz	r0, 80822cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80822a8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80822aa:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80822ac:	a802      	add	r0, sp, #8
 80822ae:	f7ff fd8b 	bl	8081dc8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80822b2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80822b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80822b6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80822b8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80822ba:	9204      	str	r2, [sp, #16]
 80822bc:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80822be:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80822c0:	60e3      	str	r3, [r4, #12]
 80822c2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80822c6:	9205      	str	r2, [sp, #20]
 80822c8:	f7ff fec3 	bl	8082052 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80822cc:	4b0d      	ldr	r3, [pc, #52]	; (8082304 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80822ce:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80822d0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80822d2:	4b0d      	ldr	r3, [pc, #52]	; (8082308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80822d4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80822d6:	a806      	add	r0, sp, #24
 80822d8:	f7ff feca 	bl	8082070 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80822dc:	a802      	add	r0, sp, #8
 80822de:	f7ff fd64 	bl	8081daa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80822e2:	2200      	movs	r2, #0
 80822e4:	4629      	mov	r1, r5
 80822e6:	4809      	ldr	r0, [pc, #36]	; (808230c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80822e8:	f7ff fa56 	bl	8081798 <application_thread_invoke>
 80822ec:	4630      	mov	r0, r6
 80822ee:	f7ff fd5c 	bl	8081daa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80822f2:	2110      	movs	r1, #16
 80822f4:	4630      	mov	r0, r6
 80822f6:	f000 fd90 	bl	8082e1a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80822fa:	4668      	mov	r0, sp
 80822fc:	f7ff feb8 	bl	8082070 <_ZN8particle5ErrorD1Ev>
    }
 8082300:	b009      	add	sp, #36	; 0x24
 8082302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082304:	080821b7 	.word	0x080821b7
 8082308:	0808242d 	.word	0x0808242d
 808230c:	08082a45 	.word	0x08082a45

08082310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082314:	b08b      	sub	sp, #44	; 0x2c
 8082316:	4606      	mov	r6, r0
 8082318:	460f      	mov	r7, r1
 808231a:	4690      	mov	r8, r2
 808231c:	4699      	mov	r9, r3
 808231e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082322:	f7ff fabf 	bl	80818a4 <spark_cloud_flag_connected>
 8082326:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8082328:	4683      	mov	fp, r0
 808232a:	bb30      	cbnz	r0, 808237a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808232c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8082330:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082332:	a905      	add	r1, sp, #20
 8082334:	4628      	mov	r0, r5
 8082336:	f8ad 3018 	strh.w	r3, [sp, #24]
 808233a:	f7ff fe8a 	bl	8082052 <_ZN8particle5ErrorC1EOS0_>
 808233e:	2014      	movs	r0, #20
 8082340:	f7fd feab 	bl	808009a <_Znwj>
 8082344:	4604      	mov	r4, r0
 8082346:	b158      	cbz	r0, 8082360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082348:	2302      	movs	r3, #2
 808234a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808234c:	2301      	movs	r3, #1
 808234e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082350:	f8c0 b004 	str.w	fp, [r0, #4]
 8082354:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8082358:	4629      	mov	r1, r5
 808235a:	300c      	adds	r0, #12
 808235c:	f7ff fe79 	bl	8082052 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8082360:	4630      	mov	r0, r6
 8082362:	4621      	mov	r1, r4
 8082364:	f840 4b04 	str.w	r4, [r0], #4
 8082368:	f7ff ff08 	bl	808217c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808236c:	4628      	mov	r0, r5
 808236e:	f7ff fe7f 	bl	8082070 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8082372:	a805      	add	r0, sp, #20
 8082374:	f7ff fe7c 	bl	8082070 <_ZN8particle5ErrorD1Ev>
 8082378:	e052      	b.n	8082420 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808237a:	2400      	movs	r4, #0
 808237c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808237e:	2014      	movs	r0, #20
 8082380:	606c      	str	r4, [r5, #4]
 8082382:	60ac      	str	r4, [r5, #8]
 8082384:	9307      	str	r3, [sp, #28]
 8082386:	f7fd fe88 	bl	808009a <_Znwj>
 808238a:	4601      	mov	r1, r0
 808238c:	b118      	cbz	r0, 8082396 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808238e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082390:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082392:	6044      	str	r4, [r0, #4]
 8082394:	6084      	str	r4, [r0, #8]
 8082396:	a804      	add	r0, sp, #16
 8082398:	9103      	str	r1, [sp, #12]
 808239a:	f7ff feef 	bl	808217c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808239e:	4b22      	ldr	r3, [pc, #136]	; (8082428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80823a0:	2008      	movs	r0, #8
 80823a2:	9308      	str	r3, [sp, #32]
 80823a4:	f7fd fe79 	bl	808009a <_Znwj>
 80823a8:	4604      	mov	r4, r0
 80823aa:	b128      	cbz	r0, 80823b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80823ac:	9b03      	ldr	r3, [sp, #12]
 80823ae:	a904      	add	r1, sp, #16
 80823b0:	f840 3b04 	str.w	r3, [r0], #4
 80823b4:	f7ff fcdc 	bl	8081d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80823b8:	9500      	str	r5, [sp, #0]
 80823ba:	fa5f f38a 	uxtb.w	r3, sl
 80823be:	464a      	mov	r2, r9
 80823c0:	4641      	mov	r1, r8
 80823c2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80823c4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80823c6:	f7ff fa75 	bl	80818b4 <spark_send_event>
 80823ca:	b920      	cbnz	r0, 80823d6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80823cc:	9b03      	ldr	r3, [sp, #12]
 80823ce:	785b      	ldrb	r3, [r3, #1]
 80823d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80823d4:	b183      	cbz	r3, 80823f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80823d6:	9b03      	ldr	r3, [sp, #12]
 80823d8:	a904      	add	r1, sp, #16
 80823da:	a806      	add	r0, sp, #24
 80823dc:	9305      	str	r3, [sp, #20]
 80823de:	f7ff fcc7 	bl	8081d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80823e2:	a905      	add	r1, sp, #20
 80823e4:	4630      	mov	r0, r6
 80823e6:	f7ff fe9a 	bl	808211e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80823ea:	a806      	add	r0, sp, #24
 80823ec:	f7ff fcaa 	bl	8081d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80823f0:	a804      	add	r0, sp, #16
 80823f2:	f7ff fca7 	bl	8081d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80823f6:	e013      	b.n	8082420 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80823f8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80823fc:	a905      	add	r1, sp, #20
 80823fe:	a803      	add	r0, sp, #12
 8082400:	9205      	str	r2, [sp, #20]
 8082402:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082406:	f7ff fefd 	bl	8082204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808240a:	a805      	add	r0, sp, #20
 808240c:	f7ff fe30 	bl	8082070 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082410:	a805      	add	r0, sp, #20
 8082412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082414:	f7ff fe94 	bl	8082140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8082418:	a806      	add	r0, sp, #24
 808241a:	f7ff fc93 	bl	8081d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808241e:	e7da      	b.n	80823d6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8082420:	4630      	mov	r0, r6
 8082422:	b00b      	add	sp, #44	; 0x2c
 8082424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082428:	0808259d 	.word	0x0808259d

0808242c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808242c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808242e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082430:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082432:	d006      	beq.n	8082442 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8082434:	2a03      	cmp	r2, #3
 8082436:	d017      	beq.n	8082468 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8082438:	2a01      	cmp	r2, #1
 808243a:	d122      	bne.n	8082482 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808243c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808243e:	6003      	str	r3, [r0, #0]
	      break;
 8082440:	e01f      	b.n	8082482 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082442:	2018      	movs	r0, #24
 8082444:	680e      	ldr	r6, [r1, #0]
 8082446:	f7fd fe28 	bl	808009a <_Znwj>
 808244a:	4605      	mov	r5, r0
 808244c:	b150      	cbz	r0, 8082464 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808244e:	4631      	mov	r1, r6
 8082450:	f7ff fec8 	bl	80821e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082454:	6930      	ldr	r0, [r6, #16]
 8082456:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808245a:	b108      	cbz	r0, 8082460 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808245c:	f001 fd78 	bl	8083f50 <strdup>
 8082460:	6128      	str	r0, [r5, #16]
 8082462:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082464:	6025      	str	r5, [r4, #0]
 8082466:	e00c      	b.n	8082482 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082468:	6804      	ldr	r4, [r0, #0]
 808246a:	b154      	cbz	r4, 8082482 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 808246c:	f104 0010 	add.w	r0, r4, #16
 8082470:	f7ff fdfe 	bl	8082070 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082474:	4620      	mov	r0, r4
 8082476:	f7ff fc98 	bl	8081daa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808247a:	2118      	movs	r1, #24
 808247c:	4620      	mov	r0, r4
 808247e:	f000 fccc 	bl	8082e1a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082482:	2000      	movs	r0, #0
 8082484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082486 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082486:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082488:	2300      	movs	r3, #0
 808248a:	6083      	str	r3, [r0, #8]
 808248c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808248e:	4604      	mov	r4, r0
 8082490:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082492:	b12b      	cbz	r3, 80824a0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082494:	2202      	movs	r2, #2
 8082496:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082498:	68eb      	ldr	r3, [r5, #12]
 808249a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808249c:	68ab      	ldr	r3, [r5, #8]
 808249e:	60a3      	str	r3, [r4, #8]
	}
    }
 80824a0:	4620      	mov	r0, r4
 80824a2:	bd38      	pop	{r3, r4, r5, pc}

080824a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80824a4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80824a6:	b570      	push	{r4, r5, r6, lr}
 80824a8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80824aa:	d006      	beq.n	80824ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80824ac:	2a03      	cmp	r2, #3
 80824ae:	d011      	beq.n	80824d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80824b0:	2a01      	cmp	r2, #1
 80824b2:	d118      	bne.n	80824e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80824b4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80824b6:	6003      	str	r3, [r0, #0]
	      break;
 80824b8:	e015      	b.n	80824e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80824ba:	2014      	movs	r0, #20
 80824bc:	680e      	ldr	r6, [r1, #0]
 80824be:	f7fd fdec 	bl	808009a <_Znwj>
 80824c2:	4605      	mov	r5, r0
 80824c4:	b120      	cbz	r0, 80824d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80824c6:	4631      	mov	r1, r6
 80824c8:	f7ff ffdd 	bl	8082486 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80824cc:	7c33      	ldrb	r3, [r6, #16]
 80824ce:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80824d0:	6025      	str	r5, [r4, #0]
 80824d2:	e008      	b.n	80824e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80824d4:	6804      	ldr	r4, [r0, #0]
 80824d6:	b134      	cbz	r4, 80824e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80824d8:	4620      	mov	r0, r4
 80824da:	f7ff fc66 	bl	8081daa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80824de:	2114      	movs	r1, #20
 80824e0:	4620      	mov	r0, r4
 80824e2:	f000 fc9a 	bl	8082e1a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80824e6:	2000      	movs	r0, #0
 80824e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080824ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80824ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80824ee:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80824f0:	f3bf 8f5f 	dmb	sy
 80824f4:	b087      	sub	sp, #28
 80824f6:	2300      	movs	r3, #0
 80824f8:	e850 6f00 	ldrex	r6, [r0]
 80824fc:	e840 3200 	strex	r2, r3, [r0]
 8082500:	2a00      	cmp	r2, #0
 8082502:	d1f9      	bne.n	80824f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8082504:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082508:	2e00      	cmp	r6, #0
 808250a:	d03f      	beq.n	808258c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808250c:	4618      	mov	r0, r3
 808250e:	f7ff f93b 	bl	8081788 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082512:	4607      	mov	r7, r0
 8082514:	b120      	cbz	r0, 8082520 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082516:	4621      	mov	r1, r4
 8082518:	4630      	mov	r0, r6
 808251a:	f7ff fe53 	bl	80821c4 <_ZNKSt8functionIFvRKbEEclES1_>
 808251e:	e02e      	b.n	808257e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082520:	4631      	mov	r1, r6
 8082522:	a801      	add	r0, sp, #4
 8082524:	f7ff ffaf 	bl	8082486 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082528:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808252a:	2010      	movs	r0, #16
 808252c:	f88d 3014 	strb.w	r3, [sp, #20]
 8082530:	f7fd fdb3 	bl	808009a <_Znwj>
 8082534:	4605      	mov	r5, r0
 8082536:	b1d0      	cbz	r0, 808256e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082538:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808253a:	2014      	movs	r0, #20
 808253c:	f7fd fdad 	bl	808009a <_Znwj>
 8082540:	4604      	mov	r4, r0
 8082542:	b178      	cbz	r0, 8082564 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082544:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082546:	4601      	mov	r1, r0
 8082548:	a801      	add	r0, sp, #4
 808254a:	f7ff fc3d 	bl	8081dc8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808254e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082550:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082552:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082554:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082556:	9203      	str	r2, [sp, #12]
 8082558:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808255a:	60e3      	str	r3, [r4, #12]
 808255c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082560:	9204      	str	r2, [sp, #16]
 8082562:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082564:	4b0a      	ldr	r3, [pc, #40]	; (8082590 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082566:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082568:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808256a:	4b0a      	ldr	r3, [pc, #40]	; (8082594 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 808256c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808256e:	a801      	add	r0, sp, #4
 8082570:	f7ff fc1b 	bl	8081daa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082574:	2200      	movs	r2, #0
 8082576:	4629      	mov	r1, r5
 8082578:	4807      	ldr	r0, [pc, #28]	; (8082598 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 808257a:	f7ff f90d 	bl	8081798 <application_thread_invoke>
 808257e:	4630      	mov	r0, r6
 8082580:	f7ff fc13 	bl	8081daa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082584:	2110      	movs	r1, #16
 8082586:	4630      	mov	r0, r6
 8082588:	f000 fc47 	bl	8082e1a <_ZdlPvj>
        }
    }
 808258c:	b007      	add	sp, #28
 808258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082590:	080821d7 	.word	0x080821d7
 8082594:	080824a5 	.word	0x080824a5
 8082598:	08082a45 	.word	0x08082a45

0808259c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808259c:	b530      	push	{r4, r5, lr}
 808259e:	4604      	mov	r4, r0
 80825a0:	b085      	sub	sp, #20
 80825a2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80825a4:	4668      	mov	r0, sp
 80825a6:	4611      	mov	r1, r2
 80825a8:	f7ff fdca 	bl	8082140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80825ac:	b17c      	cbz	r4, 80825ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80825ae:	b224      	sxth	r4, r4
 80825b0:	4628      	mov	r0, r5
 80825b2:	b10d      	cbz	r5, 80825b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80825b4:	f001 fccc 	bl	8083f50 <strdup>
 80825b8:	9002      	str	r0, [sp, #8]
 80825ba:	a902      	add	r1, sp, #8
 80825bc:	4668      	mov	r0, sp
 80825be:	f8ad 400c 	strh.w	r4, [sp, #12]
 80825c2:	f7ff fe1f 	bl	8082204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80825c6:	a802      	add	r0, sp, #8
 80825c8:	f7ff fd52 	bl	8082070 <_ZN8particle5ErrorD1Ev>
 80825cc:	e01d      	b.n	808260a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80825ce:	f04f 0201 	mov.w	r2, #1
 80825d2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80825d4:	f88d 4008 	strb.w	r4, [sp, #8]
 80825d8:	e8d0 3f4f 	ldrexb	r3, [r0]
 80825dc:	42a3      	cmp	r3, r4
 80825de:	d103      	bne.n	80825e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80825e0:	e8c0 2f41 	strexb	r1, r2, [r0]
 80825e4:	2900      	cmp	r1, #0
 80825e6:	d1f7      	bne.n	80825d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80825e8:	d002      	beq.n	80825f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80825ea:	f88d 3008 	strb.w	r3, [sp, #8]
 80825ee:	e00c      	b.n	808260a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80825f0:	f110 010c 	adds.w	r1, r0, #12
 80825f4:	f04f 0301 	mov.w	r3, #1
 80825f8:	bf18      	it	ne
 80825fa:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80825fc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8082600:	3004      	adds	r0, #4
 8082602:	f800 3c03 	strb.w	r3, [r0, #-3]
 8082606:	f7ff ff71 	bl	80824ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808260a:	a801      	add	r0, sp, #4
 808260c:	f7ff fb9a 	bl	8081d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082610:	b005      	add	sp, #20
 8082612:	bd30      	pop	{r4, r5, pc}

08082614 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082614:	4770      	bx	lr

08082616 <_ZN9IPAddressD0Ev>:
 8082616:	b510      	push	{r4, lr}
 8082618:	4604      	mov	r4, r0
 808261a:	2108      	movs	r1, #8
 808261c:	f000 fbfd 	bl	8082e1a <_ZdlPvj>
 8082620:	4620      	mov	r0, r4
 8082622:	bd10      	pop	{r4, pc}

08082624 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082626:	460f      	mov	r7, r1
 8082628:	f100 0608 	add.w	r6, r0, #8
 808262c:	1d05      	adds	r5, r0, #4
 808262e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082630:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082634:	220a      	movs	r2, #10
 8082636:	4638      	mov	r0, r7
 8082638:	f7ff fb1c 	bl	8081c74 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808263c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808263e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082640:	d007      	beq.n	8082652 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082642:	2c00      	cmp	r4, #0
 8082644:	d0f4      	beq.n	8082630 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082646:	212e      	movs	r1, #46	; 0x2e
 8082648:	4638      	mov	r0, r7
 808264a:	f7ff fad0 	bl	8081bee <_ZN5Print5printEc>
 808264e:	4404      	add	r4, r0
 8082650:	e7ee      	b.n	8082630 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082652:	4620      	mov	r0, r4
 8082654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08082658 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082658:	4a02      	ldr	r2, [pc, #8]	; (8082664 <_ZN9IPAddressC1Ev+0xc>)
 808265a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808265c:	2200      	movs	r2, #0
 808265e:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082660:	4770      	bx	lr
 8082662:	bf00      	nop
 8082664:	0808448c 	.word	0x0808448c

08082668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082668:	4a02      	ldr	r2, [pc, #8]	; (8082674 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808266a:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 808266c:	680a      	ldr	r2, [r1, #0]
 808266e:	6042      	str	r2, [r0, #4]
}
 8082670:	4770      	bx	lr
 8082672:	bf00      	nop
 8082674:	0808448c 	.word	0x0808448c

08082678 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082678:	4a01      	ldr	r2, [pc, #4]	; (8082680 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 808267a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808267c:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808267e:	4770      	bx	lr
 8082680:	0808448c 	.word	0x0808448c

08082684 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082684:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082686:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808268a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808268e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8082692:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8082696:	6041      	str	r1, [r0, #4]
 8082698:	bd10      	pop	{r4, pc}
	...

0808269c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808269c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808269e:	4d04      	ldr	r5, [pc, #16]	; (80826b0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80826a0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80826a2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80826a6:	9500      	str	r5, [sp, #0]
 80826a8:	f7ff ffec 	bl	8082684 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80826ac:	b003      	add	sp, #12
 80826ae:	bd30      	pop	{r4, r5, pc}
 80826b0:	0808448c 	.word	0x0808448c

080826b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80826b4:	7441      	strb	r1, [r0, #17]
 80826b6:	4770      	bx	lr

080826b8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80826b8:	4770      	bx	lr

080826ba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80826ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80826bc:	2100      	movs	r1, #0
 80826be:	7c00      	ldrb	r0, [r0, #16]
 80826c0:	f7ff f82a 	bl	8081718 <HAL_USB_USART_Receive_Data>
}
 80826c4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80826c8:	bf28      	it	cs
 80826ca:	f04f 30ff 	movcs.w	r0, #4294967295
 80826ce:	bd08      	pop	{r3, pc}

080826d0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80826d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80826d2:	2101      	movs	r1, #1
 80826d4:	7c00      	ldrb	r0, [r0, #16]
 80826d6:	f7ff f81f 	bl	8081718 <HAL_USB_USART_Receive_Data>
}
 80826da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80826de:	bf28      	it	cs
 80826e0:	f04f 30ff 	movcs.w	r0, #4294967295
 80826e4:	bd08      	pop	{r3, pc}

080826e6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80826e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80826e8:	7c00      	ldrb	r0, [r0, #16]
 80826ea:	f7ff f80d 	bl	8081708 <HAL_USB_USART_Available_Data_For_Write>
}
 80826ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80826f2:	bd08      	pop	{r3, pc}

080826f4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80826f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80826f6:	7c00      	ldrb	r0, [r0, #16]
 80826f8:	f7fe fffe 	bl	80816f8 <HAL_USB_USART_Available_Data>
}
 80826fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082700:	bd08      	pop	{r3, pc}

08082702 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082702:	7c00      	ldrb	r0, [r0, #16]
 8082704:	f7ff b818 	b.w	8081738 <HAL_USB_USART_Flush_Data>

08082708 <_ZN9USBSerialD0Ev>:
 8082708:	b510      	push	{r4, lr}
 808270a:	4604      	mov	r4, r0
 808270c:	2114      	movs	r1, #20
 808270e:	f000 fb84 	bl	8082e1a <_ZdlPvj>
 8082712:	4620      	mov	r0, r4
 8082714:	bd10      	pop	{r4, pc}

08082716 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082716:	b538      	push	{r3, r4, r5, lr}
 8082718:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808271a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808271c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808271e:	f7fe fff3 	bl	8081708 <HAL_USB_USART_Available_Data_For_Write>
 8082722:	2800      	cmp	r0, #0
 8082724:	dc01      	bgt.n	808272a <_ZN9USBSerial5writeEh+0x14>
 8082726:	7c60      	ldrb	r0, [r4, #17]
 8082728:	b128      	cbz	r0, 8082736 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808272a:	4629      	mov	r1, r5
 808272c:	7c20      	ldrb	r0, [r4, #16]
 808272e:	f7fe fffb 	bl	8081728 <HAL_USB_USART_Send_Data>
 8082732:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8082736:	bd38      	pop	{r3, r4, r5, pc}

08082738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082738:	b510      	push	{r4, lr}
 808273a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808273c:	2300      	movs	r3, #0
 808273e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082744:	60a3      	str	r3, [r4, #8]
 8082746:	4b05      	ldr	r3, [pc, #20]	; (808275c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8082748:	4608      	mov	r0, r1
 808274a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808274c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808274e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8082750:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8082752:	4611      	mov	r1, r2
 8082754:	f7fe ffc0 	bl	80816d8 <HAL_USB_USART_Init>
}
 8082758:	4620      	mov	r0, r4
 808275a:	bd10      	pop	{r4, pc}
 808275c:	080844a0 	.word	0x080844a0

08082760 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8082760:	2200      	movs	r2, #0
 8082762:	7c00      	ldrb	r0, [r0, #16]
 8082764:	f7fe bfc0 	b.w	80816e8 <HAL_USB_USART_Begin>

08082768 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082768:	b510      	push	{r4, lr}
 808276a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808276c:	2214      	movs	r2, #20
 808276e:	2100      	movs	r1, #0
 8082770:	f001 fbab 	bl	8083eca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082774:	4b05      	ldr	r3, [pc, #20]	; (808278c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082776:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082778:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808277a:	4b05      	ldr	r3, [pc, #20]	; (8082790 <_Z19acquireSerialBufferv+0x28>)
 808277c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808277e:	f240 1301 	movw	r3, #257	; 0x101
 8082782:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082784:	2381      	movs	r3, #129	; 0x81
 8082786:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082788:	bd10      	pop	{r4, pc}
 808278a:	bf00      	nop
 808278c:	200004f1 	.word	0x200004f1
 8082790:	20000470 	.word	0x20000470

08082794 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8082794:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082796:	4d0e      	ldr	r5, [pc, #56]	; (80827d0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082798:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808279a:	a801      	add	r0, sp, #4
 808279c:	f7ff ffe4 	bl	8082768 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80827a0:	6829      	ldr	r1, [r5, #0]
 80827a2:	f011 0401 	ands.w	r4, r1, #1
 80827a6:	d110      	bne.n	80827ca <_Z16_fetch_usbserialv+0x36>
 80827a8:	4628      	mov	r0, r5
 80827aa:	f7fd fc7a 	bl	80800a2 <__cxa_guard_acquire>
 80827ae:	b160      	cbz	r0, 80827ca <_Z16_fetch_usbserialv+0x36>
 80827b0:	aa01      	add	r2, sp, #4
 80827b2:	4621      	mov	r1, r4
 80827b4:	4807      	ldr	r0, [pc, #28]	; (80827d4 <_Z16_fetch_usbserialv+0x40>)
 80827b6:	f7ff ffbf 	bl	8082738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80827ba:	4628      	mov	r0, r5
 80827bc:	f7fd fc76 	bl	80800ac <__cxa_guard_release>
 80827c0:	4a05      	ldr	r2, [pc, #20]	; (80827d8 <_Z16_fetch_usbserialv+0x44>)
 80827c2:	4906      	ldr	r1, [pc, #24]	; (80827dc <_Z16_fetch_usbserialv+0x48>)
 80827c4:	4803      	ldr	r0, [pc, #12]	; (80827d4 <_Z16_fetch_usbserialv+0x40>)
 80827c6:	f000 fb23 	bl	8082e10 <__aeabi_atexit>
	return _usbserial;
}
 80827ca:	4802      	ldr	r0, [pc, #8]	; (80827d4 <_Z16_fetch_usbserialv+0x40>)
 80827cc:	b007      	add	sp, #28
 80827ce:	bd30      	pop	{r4, r5, pc}
 80827d0:	2000046c 	.word	0x2000046c
 80827d4:	200005f4 	.word	0x200005f4
 80827d8:	200000a4 	.word	0x200000a4
 80827dc:	080826b9 	.word	0x080826b9

080827e0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80827e0:	b510      	push	{r4, lr}
 80827e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80827e4:	2214      	movs	r2, #20
 80827e6:	2100      	movs	r1, #0
 80827e8:	f001 fb6f 	bl	8083eca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80827ec:	4b05      	ldr	r3, [pc, #20]	; (8082804 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80827ee:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80827f0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80827f2:	4b05      	ldr	r3, [pc, #20]	; (8082808 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80827f4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80827f6:	f240 1301 	movw	r3, #257	; 0x101
 80827fa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80827fc:	2381      	movs	r3, #129	; 0x81
 80827fe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082800:	bd10      	pop	{r4, pc}
 8082802:	bf00      	nop
 8082804:	200006a4 	.word	0x200006a4
 8082808:	2000060c 	.word	0x2000060c

0808280c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808280c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808280e:	4c0e      	ldr	r4, [pc, #56]	; (8082848 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082810:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082812:	a801      	add	r0, sp, #4
 8082814:	f7ff ffe4 	bl	80827e0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082818:	6823      	ldr	r3, [r4, #0]
 808281a:	07db      	lsls	r3, r3, #31
 808281c:	d410      	bmi.n	8082840 <_Z17_fetch_usbserial1v+0x34>
 808281e:	4620      	mov	r0, r4
 8082820:	f7fd fc3f 	bl	80800a2 <__cxa_guard_acquire>
 8082824:	b160      	cbz	r0, 8082840 <_Z17_fetch_usbserial1v+0x34>
 8082826:	aa01      	add	r2, sp, #4
 8082828:	2101      	movs	r1, #1
 808282a:	4808      	ldr	r0, [pc, #32]	; (808284c <_Z17_fetch_usbserial1v+0x40>)
 808282c:	f7ff ff84 	bl	8082738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082830:	4620      	mov	r0, r4
 8082832:	f7fd fc3b 	bl	80800ac <__cxa_guard_release>
 8082836:	4a06      	ldr	r2, [pc, #24]	; (8082850 <_Z17_fetch_usbserial1v+0x44>)
 8082838:	4906      	ldr	r1, [pc, #24]	; (8082854 <_Z17_fetch_usbserial1v+0x48>)
 808283a:	4804      	ldr	r0, [pc, #16]	; (808284c <_Z17_fetch_usbserial1v+0x40>)
 808283c:	f000 fae8 	bl	8082e10 <__aeabi_atexit>
  return _usbserial1;
}
 8082840:	4802      	ldr	r0, [pc, #8]	; (808284c <_Z17_fetch_usbserial1v+0x40>)
 8082842:	b006      	add	sp, #24
 8082844:	bd10      	pop	{r4, pc}
 8082846:	bf00      	nop
 8082848:	20000608 	.word	0x20000608
 808284c:	20000690 	.word	0x20000690
 8082850:	200000a4 	.word	0x200000a4
 8082854:	080826b9 	.word	0x080826b9

08082858 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8082858:	2200      	movs	r2, #0
 808285a:	4611      	mov	r1, r2
 808285c:	6840      	ldr	r0, [r0, #4]
 808285e:	f7fe bfd9 	b.w	8081814 <network_ready>

08082862 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082862:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8082866:	2600      	movs	r6, #0
 8082868:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808286a:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808286c:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808286e:	4688      	mov	r8, r1
 8082870:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8082872:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082876:	f001 fb86 	bl	8083f86 <strlen>
 808287a:	9600      	str	r6, [sp, #0]
 808287c:	b281      	uxth	r1, r0
 808287e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8082882:	4622      	mov	r2, r4
 8082884:	4638      	mov	r0, r7
 8082886:	f7fe ff1f 	bl	80816c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808288a:	b120      	cbz	r0, 8082896 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808288c:	4631      	mov	r1, r6
 808288e:	4628      	mov	r0, r5
 8082890:	f7ff fef2 	bl	8082678 <_ZN9IPAddressC1Em>
 8082894:	e003      	b.n	808289e <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8082896:	4621      	mov	r1, r4
 8082898:	4628      	mov	r0, r5
 808289a:	f7ff fee5 	bl	8082668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808289e:	4628      	mov	r0, r5
 80828a0:	b004      	add	sp, #16
 80828a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080828a6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80828a6:	2200      	movs	r2, #0
 80828a8:	4611      	mov	r1, r2
 80828aa:	6840      	ldr	r0, [r0, #4]
 80828ac:	f7fe bfd2 	b.w	8081854 <network_listening>

080828b0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80828b0:	2200      	movs	r2, #0
 80828b2:	4611      	mov	r1, r2
 80828b4:	6840      	ldr	r0, [r0, #4]
 80828b6:	f7fe bfdd 	b.w	8081874 <network_get_listen_timeout>

080828ba <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80828ba:	2200      	movs	r2, #0
 80828bc:	6840      	ldr	r0, [r0, #4]
 80828be:	f7fe bfd1 	b.w	8081864 <network_set_listen_timeout>

080828c2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80828c2:	2200      	movs	r2, #0
 80828c4:	f081 0101 	eor.w	r1, r1, #1
 80828c8:	6840      	ldr	r0, [r0, #4]
 80828ca:	f7fe bfbb 	b.w	8081844 <network_listen>

080828ce <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80828ce:	2300      	movs	r3, #0
 80828d0:	461a      	mov	r2, r3
 80828d2:	4619      	mov	r1, r3
 80828d4:	6840      	ldr	r0, [r0, #4]
 80828d6:	f7fe bfad 	b.w	8081834 <network_off>

080828da <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80828da:	2300      	movs	r3, #0
 80828dc:	461a      	mov	r2, r3
 80828de:	4619      	mov	r1, r3
 80828e0:	6840      	ldr	r0, [r0, #4]
 80828e2:	f7fe bf9f 	b.w	8081824 <network_on>

080828e6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80828e6:	2200      	movs	r2, #0
 80828e8:	4611      	mov	r1, r2
 80828ea:	6840      	ldr	r0, [r0, #4]
 80828ec:	f7fe bf82 	b.w	80817f4 <network_connecting>

080828f0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80828f0:	2200      	movs	r2, #0
 80828f2:	2102      	movs	r1, #2
 80828f4:	6840      	ldr	r0, [r0, #4]
 80828f6:	f7fe bf85 	b.w	8081804 <network_disconnect>

080828fa <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80828fa:	2300      	movs	r3, #0
 80828fc:	461a      	mov	r2, r3
 80828fe:	6840      	ldr	r0, [r0, #4]
 8082900:	f7fe bf70 	b.w	80817e4 <network_connect>

08082904 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8082904:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8082906:	4c08      	ldr	r4, [pc, #32]	; (8082928 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8082908:	2528      	movs	r5, #40	; 0x28
 808290a:	462a      	mov	r2, r5
 808290c:	2100      	movs	r1, #0
 808290e:	4620      	mov	r0, r4
 8082910:	f001 fadb 	bl	8083eca <memset>
        cid = -1;
 8082914:	f04f 33ff 	mov.w	r3, #4294967295
 8082918:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808291a:	4b04      	ldr	r3, [pc, #16]	; (808292c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808291c:	2204      	movs	r2, #4
 808291e:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082920:	4a03      	ldr	r2, [pc, #12]	; (8082930 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8082922:	8025      	strh	r5, [r4, #0]
 8082924:	601a      	str	r2, [r3, #0]
 8082926:	bd38      	pop	{r3, r4, r5, pc}
 8082928:	200007b0 	.word	0x200007b0
 808292c:	200007a8 	.word	0x200007a8
 8082930:	080844d0 	.word	0x080844d0

08082934 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082934:	4770      	bx	lr

08082936 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082936:	7441      	strb	r1, [r0, #17]
 8082938:	4770      	bx	lr

0808293a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808293a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808293c:	7c00      	ldrb	r0, [r0, #16]
 808293e:	f7fe fe53 	bl	80815e8 <HAL_USART_Available_Data_For_Write>
}
 8082942:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082946:	bd08      	pop	{r3, pc}

08082948 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8082948:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808294a:	7c00      	ldrb	r0, [r0, #16]
 808294c:	f7fe fe24 	bl	8081598 <HAL_USART_Available_Data>
}
 8082950:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082954:	bd08      	pop	{r3, pc}

08082956 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8082956:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8082958:	7c00      	ldrb	r0, [r0, #16]
 808295a:	f7fe fe2d 	bl	80815b8 <HAL_USART_Peek_Data>
}
 808295e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082962:	bf28      	it	cs
 8082964:	f04f 30ff 	movcs.w	r0, #4294967295
 8082968:	bd08      	pop	{r3, pc}

0808296a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808296a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808296c:	7c00      	ldrb	r0, [r0, #16]
 808296e:	f7fe fe1b 	bl	80815a8 <HAL_USART_Read_Data>
}
 8082972:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082976:	bf28      	it	cs
 8082978:	f04f 30ff 	movcs.w	r0, #4294967295
 808297c:	bd08      	pop	{r3, pc}

0808297e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808297e:	7c00      	ldrb	r0, [r0, #16]
 8082980:	f7fe be22 	b.w	80815c8 <HAL_USART_Flush_Data>

08082984 <_ZN11USARTSerialD0Ev>:
 8082984:	b510      	push	{r4, lr}
 8082986:	4604      	mov	r4, r0
 8082988:	2114      	movs	r1, #20
 808298a:	f000 fa46 	bl	8082e1a <_ZdlPvj>
 808298e:	4620      	mov	r0, r4
 8082990:	bd10      	pop	{r4, pc}

08082992 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082992:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082994:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8082996:	4604      	mov	r4, r0
 8082998:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808299a:	b925      	cbnz	r5, 80829a6 <_ZN11USARTSerial5writeEh+0x14>
 808299c:	7c00      	ldrb	r0, [r0, #16]
 808299e:	f7fe fe23 	bl	80815e8 <HAL_USART_Available_Data_For_Write>
 80829a2:	2800      	cmp	r0, #0
 80829a4:	dd05      	ble.n	80829b2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80829a6:	4631      	mov	r1, r6
 80829a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80829aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80829ae:	f7fe bdeb 	b.w	8081588 <HAL_USART_Write_Data>
  }
  return 0;
}
 80829b2:	4628      	mov	r0, r5
 80829b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080829b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80829b8:	b510      	push	{r4, lr}
 80829ba:	4604      	mov	r4, r0
 80829bc:	4608      	mov	r0, r1
 80829be:	4611      	mov	r1, r2
 80829c0:	2200      	movs	r2, #0
 80829c2:	6062      	str	r2, [r4, #4]
 80829c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80829c8:	60a2      	str	r2, [r4, #8]
 80829ca:	4a05      	ldr	r2, [pc, #20]	; (80829e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80829cc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80829ce:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80829d0:	2201      	movs	r2, #1
 80829d2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80829d4:	461a      	mov	r2, r3
 80829d6:	f7fe fdcf 	bl	8081578 <HAL_USART_Init>
}
 80829da:	4620      	mov	r0, r4
 80829dc:	bd10      	pop	{r4, pc}
 80829de:	bf00      	nop
 80829e0:	08084504 	.word	0x08084504

080829e4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80829e4:	2300      	movs	r3, #0
 80829e6:	7c00      	ldrb	r0, [r0, #16]
 80829e8:	f7fe be06 	b.w	80815f8 <HAL_USART_BeginConfig>

080829ec <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80829ec:	2200      	movs	r2, #0
 80829ee:	f7ff bff9 	b.w	80829e4 <_ZN11USARTSerial5beginEmm>

080829f2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80829f2:	7c00      	ldrb	r0, [r0, #16]
 80829f4:	f7fe bdf0 	b.w	80815d8 <HAL_USART_Is_Enabled>

080829f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80829f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80829fa:	4d0c      	ldr	r5, [pc, #48]	; (8082a2c <_Z22__fetch_global_Serial1v+0x34>)
 80829fc:	6829      	ldr	r1, [r5, #0]
 80829fe:	f011 0401 	ands.w	r4, r1, #1
 8082a02:	d111      	bne.n	8082a28 <_Z22__fetch_global_Serial1v+0x30>
 8082a04:	4628      	mov	r0, r5
 8082a06:	f7fd fb4c 	bl	80800a2 <__cxa_guard_acquire>
 8082a0a:	b168      	cbz	r0, 8082a28 <_Z22__fetch_global_Serial1v+0x30>
 8082a0c:	4a08      	ldr	r2, [pc, #32]	; (8082a30 <_Z22__fetch_global_Serial1v+0x38>)
 8082a0e:	4621      	mov	r1, r4
 8082a10:	4b08      	ldr	r3, [pc, #32]	; (8082a34 <_Z22__fetch_global_Serial1v+0x3c>)
 8082a12:	4809      	ldr	r0, [pc, #36]	; (8082a38 <_Z22__fetch_global_Serial1v+0x40>)
 8082a14:	f7ff ffd0 	bl	80829b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082a18:	4628      	mov	r0, r5
 8082a1a:	f7fd fb47 	bl	80800ac <__cxa_guard_release>
 8082a1e:	4a07      	ldr	r2, [pc, #28]	; (8082a3c <_Z22__fetch_global_Serial1v+0x44>)
 8082a20:	4907      	ldr	r1, [pc, #28]	; (8082a40 <_Z22__fetch_global_Serial1v+0x48>)
 8082a22:	4805      	ldr	r0, [pc, #20]	; (8082a38 <_Z22__fetch_global_Serial1v+0x40>)
 8082a24:	f000 f9f4 	bl	8082e10 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082a28:	4803      	ldr	r0, [pc, #12]	; (8082a38 <_Z22__fetch_global_Serial1v+0x40>)
 8082a2a:	bd38      	pop	{r3, r4, r5, pc}
 8082a2c:	20000870 	.word	0x20000870
 8082a30:	20000874 	.word	0x20000874
 8082a34:	200007ec 	.word	0x200007ec
 8082a38:	200007d8 	.word	0x200007d8
 8082a3c:	200000a4 	.word	0x200000a4
 8082a40:	08082935 	.word	0x08082935

08082a44 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8082a44:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082a46:	6883      	ldr	r3, [r0, #8]
 8082a48:	4604      	mov	r4, r0
 8082a4a:	b90b      	cbnz	r3, 8082a50 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8082a4c:	f000 f9e7 	bl	8082e1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082a50:	68c3      	ldr	r3, [r0, #12]
 8082a52:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8082a54:	68a3      	ldr	r3, [r4, #8]
 8082a56:	b11b      	cbz	r3, 8082a60 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082a58:	2203      	movs	r2, #3
 8082a5a:	4621      	mov	r1, r4
 8082a5c:	4620      	mov	r0, r4
 8082a5e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082a60:	4620      	mov	r0, r4
}
 8082a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082a66:	2110      	movs	r1, #16
 8082a68:	f000 b9d7 	b.w	8082e1a <_ZdlPvj>

08082a6c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8082a6c:	4770      	bx	lr

08082a6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082a70:	4606      	mov	r6, r0
 8082a72:	4615      	mov	r5, r2
 8082a74:	460c      	mov	r4, r1
 8082a76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082a78:	42bc      	cmp	r4, r7
 8082a7a:	d006      	beq.n	8082a8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082a7c:	6833      	ldr	r3, [r6, #0]
 8082a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082a82:	689b      	ldr	r3, [r3, #8]
 8082a84:	4630      	mov	r0, r6
 8082a86:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082a88:	e7f6      	b.n	8082a78 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8082a8a:	4628      	mov	r0, r5
 8082a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082a8e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8082a8e:	2200      	movs	r2, #0
 8082a90:	7c00      	ldrb	r0, [r0, #16]
 8082a92:	f7fe bdd1 	b.w	8081638 <HAL_I2C_Write_Data>

08082a96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8082a96:	2100      	movs	r1, #0
 8082a98:	7c00      	ldrb	r0, [r0, #16]
 8082a9a:	f7fe bdd5 	b.w	8081648 <HAL_I2C_Available_Data>

08082a9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8082a9e:	2100      	movs	r1, #0
 8082aa0:	7c00      	ldrb	r0, [r0, #16]
 8082aa2:	f7fe bdd9 	b.w	8081658 <HAL_I2C_Read_Data>

08082aa6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8082aa6:	2100      	movs	r1, #0
 8082aa8:	7c00      	ldrb	r0, [r0, #16]
 8082aaa:	f7fe bddd 	b.w	8081668 <HAL_I2C_Peek_Data>

08082aae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8082aae:	2100      	movs	r1, #0
 8082ab0:	7c00      	ldrb	r0, [r0, #16]
 8082ab2:	f7fe bde1 	b.w	8081678 <HAL_I2C_Flush_Data>

08082ab6 <_ZN7TwoWireD0Ev>:
 8082ab6:	b510      	push	{r4, lr}
 8082ab8:	4604      	mov	r4, r0
 8082aba:	2114      	movs	r1, #20
 8082abc:	f000 f9ad 	bl	8082e1a <_ZdlPvj>
 8082ac0:	4620      	mov	r0, r4
 8082ac2:	bd10      	pop	{r4, pc}

08082ac4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082ac4:	b510      	push	{r4, lr}
 8082ac6:	4604      	mov	r4, r0
 8082ac8:	4608      	mov	r0, r1
 8082aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082ace:	60a3      	str	r3, [r4, #8]
 8082ad0:	4b04      	ldr	r3, [pc, #16]	; (8082ae4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8082ad2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8082ad4:	7420      	strb	r0, [r4, #16]
 8082ad6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082ad8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8082ada:	f7fe fddd 	bl	8081698 <HAL_I2C_Init>

}
 8082ade:	4620      	mov	r0, r4
 8082ae0:	bd10      	pop	{r4, pc}
 8082ae2:	bf00      	nop
 8082ae4:	08084534 	.word	0x08084534

08082ae8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8082ae8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8082aea:	2400      	movs	r4, #0
 8082aec:	7c00      	ldrb	r0, [r0, #16]
 8082aee:	9400      	str	r4, [sp, #0]
 8082af0:	f7fe fd8a 	bl	8081608 <HAL_I2C_Request_Data>
  return result;
}
 8082af4:	b2c0      	uxtb	r0, r0
 8082af6:	b002      	add	sp, #8
 8082af8:	bd10      	pop	{r4, pc}

08082afa <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 8082afa:	b2db      	uxtb	r3, r3
 8082afc:	b2d2      	uxtb	r2, r2
 8082afe:	b2c9      	uxtb	r1, r1
 8082b00:	f7ff bff2 	b.w	8082ae8 <_ZN7TwoWire11requestFromEhhh>

08082b04 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8082b04:	2200      	movs	r2, #0
 8082b06:	7c00      	ldrb	r0, [r0, #16]
 8082b08:	f7fe bd86 	b.w	8081618 <HAL_I2C_Begin_Transmission>

08082b0c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8082b0c:	b2c9      	uxtb	r1, r1
 8082b0e:	f7ff bff9 	b.w	8082b04 <_ZN7TwoWire17beginTransmissionEh>

08082b12 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8082b12:	2200      	movs	r2, #0
 8082b14:	7c00      	ldrb	r0, [r0, #16]
 8082b16:	f7fe bd87 	b.w	8081628 <HAL_I2C_End_Transmission>

08082b1a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8082b1a:	2100      	movs	r1, #0
 8082b1c:	7c00      	ldrb	r0, [r0, #16]
 8082b1e:	f7fe bdb3 	b.w	8081688 <HAL_I2C_Is_Enabled>

08082b22 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082b22:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8082b24:	2100      	movs	r1, #0
 8082b26:	7c00      	ldrb	r0, [r0, #16]
 8082b28:	f7fe fdbe 	bl	80816a8 <HAL_I2C_Acquire>
}
 8082b2c:	fab0 f080 	clz	r0, r0
 8082b30:	0940      	lsrs	r0, r0, #5
 8082b32:	bd08      	pop	{r3, pc}

08082b34 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8082b34:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8082b36:	2100      	movs	r1, #0
 8082b38:	7c00      	ldrb	r0, [r0, #16]
 8082b3a:	f7fe fdbd 	bl	80816b8 <HAL_I2C_Release>
}
 8082b3e:	fab0 f080 	clz	r0, r0
 8082b42:	0940      	lsrs	r0, r0, #5
 8082b44:	bd08      	pop	{r3, pc}

08082b46 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082b46:	2300      	movs	r3, #0
 8082b48:	461a      	mov	r2, r3
 8082b4a:	6840      	ldr	r0, [r0, #4]
 8082b4c:	f7fe be4a 	b.w	80817e4 <network_connect>

08082b50 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082b50:	2200      	movs	r2, #0
 8082b52:	2102      	movs	r1, #2
 8082b54:	6840      	ldr	r0, [r0, #4]
 8082b56:	f7fe be55 	b.w	8081804 <network_disconnect>

08082b5a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082b5a:	2200      	movs	r2, #0
 8082b5c:	4611      	mov	r1, r2
 8082b5e:	6840      	ldr	r0, [r0, #4]
 8082b60:	f7fe be48 	b.w	80817f4 <network_connecting>

08082b64 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082b64:	2200      	movs	r2, #0
 8082b66:	4611      	mov	r1, r2
 8082b68:	6840      	ldr	r0, [r0, #4]
 8082b6a:	f7fe be53 	b.w	8081814 <network_ready>

08082b6e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082b6e:	2300      	movs	r3, #0
 8082b70:	461a      	mov	r2, r3
 8082b72:	4619      	mov	r1, r3
 8082b74:	6840      	ldr	r0, [r0, #4]
 8082b76:	f7fe be55 	b.w	8081824 <network_on>

08082b7a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082b7a:	2300      	movs	r3, #0
 8082b7c:	461a      	mov	r2, r3
 8082b7e:	4619      	mov	r1, r3
 8082b80:	6840      	ldr	r0, [r0, #4]
 8082b82:	f7fe be57 	b.w	8081834 <network_off>

08082b86 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082b86:	2200      	movs	r2, #0
 8082b88:	f081 0101 	eor.w	r1, r1, #1
 8082b8c:	6840      	ldr	r0, [r0, #4]
 8082b8e:	f7fe be59 	b.w	8081844 <network_listen>

08082b92 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082b92:	2200      	movs	r2, #0
 8082b94:	6840      	ldr	r0, [r0, #4]
 8082b96:	f7fe be65 	b.w	8081864 <network_set_listen_timeout>

08082b9a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082b9a:	2200      	movs	r2, #0
 8082b9c:	4611      	mov	r1, r2
 8082b9e:	6840      	ldr	r0, [r0, #4]
 8082ba0:	f7fe be68 	b.w	8081874 <network_get_listen_timeout>

08082ba4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082ba4:	2200      	movs	r2, #0
 8082ba6:	4611      	mov	r1, r2
 8082ba8:	6840      	ldr	r0, [r0, #4]
 8082baa:	f7fe be53 	b.w	8081854 <network_listening>
	...

08082bb0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082bb2:	4617      	mov	r7, r2
 8082bb4:	b087      	sub	sp, #28
 8082bb6:	4605      	mov	r5, r0
    IPAddress addr;
 8082bb8:	a804      	add	r0, sp, #16
 8082bba:	f7ff fd4d 	bl	8082658 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082bbe:	2600      	movs	r6, #0
 8082bc0:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082bc2:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082bc4:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082bc8:	f001 f9dd 	bl	8083f86 <strlen>
 8082bcc:	4b0a      	ldr	r3, [pc, #40]	; (8082bf8 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8082bce:	9600      	str	r6, [sp, #0]
 8082bd0:	b281      	uxth	r1, r0
 8082bd2:	685b      	ldr	r3, [r3, #4]
 8082bd4:	4622      	mov	r2, r4
 8082bd6:	4638      	mov	r0, r7
 8082bd8:	f7fe fd76 	bl	80816c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082bdc:	b120      	cbz	r0, 8082be8 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082bde:	4631      	mov	r1, r6
 8082be0:	4628      	mov	r0, r5
 8082be2:	f7ff fd49 	bl	8082678 <_ZN9IPAddressC1Em>
 8082be6:	e003      	b.n	8082bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082be8:	4621      	mov	r1, r4
 8082bea:	4628      	mov	r0, r5
 8082bec:	f7ff fd3c 	bl	8082668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082bf0:	4628      	mov	r0, r5
 8082bf2:	b007      	add	sp, #28
 8082bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082bf6:	bf00      	nop
 8082bf8:	200007a8 	.word	0x200007a8

08082bfc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082bfc:	4b02      	ldr	r3, [pc, #8]	; (8082c08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082bfe:	4a03      	ldr	r2, [pc, #12]	; (8082c0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082c00:	601a      	str	r2, [r3, #0]
 8082c02:	2200      	movs	r2, #0
 8082c04:	605a      	str	r2, [r3, #4]
 8082c06:	4770      	bx	lr
 8082c08:	200008f8 	.word	0x200008f8
 8082c0c:	0808455c 	.word	0x0808455c

08082c10 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 8082c10:	b508      	push	{r3, lr}
 8082c12:	4b02      	ldr	r3, [pc, #8]	; (8082c1c <spark_protocol_instance+0xc>)
 8082c14:	681b      	ldr	r3, [r3, #0]
 8082c16:	681b      	ldr	r3, [r3, #0]
 8082c18:	9301      	str	r3, [sp, #4]
 8082c1a:	bd08      	pop	{r3, pc}
 8082c1c:	0802019c 	.word	0x0802019c

08082c20 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 8082c20:	b508      	push	{r3, lr}
 8082c22:	4b02      	ldr	r3, [pc, #8]	; (8082c2c <spark_protocol_set_product_id+0xc>)
 8082c24:	681b      	ldr	r3, [r3, #0]
 8082c26:	685b      	ldr	r3, [r3, #4]
 8082c28:	9301      	str	r3, [sp, #4]
 8082c2a:	bd08      	pop	{r3, pc}
 8082c2c:	0802019c 	.word	0x0802019c

08082c30 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 8082c30:	b508      	push	{r3, lr}
 8082c32:	4b02      	ldr	r3, [pc, #8]	; (8082c3c <spark_protocol_set_product_firmware_version+0xc>)
 8082c34:	681b      	ldr	r3, [r3, #0]
 8082c36:	689b      	ldr	r3, [r3, #8]
 8082c38:	9301      	str	r3, [sp, #4]
 8082c3a:	bd08      	pop	{r3, pc}
 8082c3c:	0802019c 	.word	0x0802019c

08082c40 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8082c40:	b510      	push	{r4, lr}
 8082c42:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8082c44:	480f      	ldr	r0, [pc, #60]	; (8082c84 <pinAvailable+0x44>)
 8082c46:	f7fe fee3 	bl	8081a10 <_ZN8SPIClass9isEnabledEv>
 8082c4a:	b128      	cbz	r0, 8082c58 <pinAvailable+0x18>
 8082c4c:	f1a4 030d 	sub.w	r3, r4, #13
 8082c50:	2b02      	cmp	r3, #2
 8082c52:	d801      	bhi.n	8082c58 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8082c54:	2000      	movs	r0, #0
 8082c56:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082c58:	f000 f89a 	bl	8082d90 <_Z19__fetch_global_Wirev>
 8082c5c:	f7ff ff5d 	bl	8082b1a <_ZN7TwoWire9isEnabledEv>
 8082c60:	b108      	cbz	r0, 8082c66 <pinAvailable+0x26>
 8082c62:	2c01      	cmp	r4, #1
 8082c64:	d9f6      	bls.n	8082c54 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082c66:	f7ff fec7 	bl	80829f8 <_Z22__fetch_global_Serial1v>
 8082c6a:	f7ff fec2 	bl	80829f2 <_ZN11USARTSerial9isEnabledEv>
 8082c6e:	b118      	cbz	r0, 8082c78 <pinAvailable+0x38>
 8082c70:	f1a4 0312 	sub.w	r3, r4, #18
 8082c74:	2b01      	cmp	r3, #1
 8082c76:	d9ed      	bls.n	8082c54 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082c78:	2c2e      	cmp	r4, #46	; 0x2e
 8082c7a:	bf8c      	ite	hi
 8082c7c:	2000      	movhi	r0, #0
 8082c7e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082c80:	bd10      	pop	{r4, pc}
 8082c82:	bf00      	nop
 8082c84:	20000900 	.word	0x20000900

08082c88 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082c88:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082c8a:	b538      	push	{r3, r4, r5, lr}
 8082c8c:	4604      	mov	r4, r0
 8082c8e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082c90:	d80a      	bhi.n	8082ca8 <pinMode+0x20>
 8082c92:	29ff      	cmp	r1, #255	; 0xff
 8082c94:	d008      	beq.n	8082ca8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082c96:	f7ff ffd3 	bl	8082c40 <pinAvailable>
 8082c9a:	b128      	cbz	r0, 8082ca8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082c9c:	4629      	mov	r1, r5
 8082c9e:	4620      	mov	r0, r4
}
 8082ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082ca4:	f7fe bbe8 	b.w	8081478 <HAL_Pin_Mode>
 8082ca8:	bd38      	pop	{r3, r4, r5, pc}

08082caa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082caa:	b538      	push	{r3, r4, r5, lr}
 8082cac:	4604      	mov	r4, r0
 8082cae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082cb0:	f7fe fbea 	bl	8081488 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082cb4:	28ff      	cmp	r0, #255	; 0xff
 8082cb6:	d010      	beq.n	8082cda <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082cb8:	2806      	cmp	r0, #6
 8082cba:	d804      	bhi.n	8082cc6 <digitalWrite+0x1c>
 8082cbc:	234d      	movs	r3, #77	; 0x4d
 8082cbe:	fa23 f000 	lsr.w	r0, r3, r0
 8082cc2:	07c3      	lsls	r3, r0, #31
 8082cc4:	d409      	bmi.n	8082cda <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082cc6:	4620      	mov	r0, r4
 8082cc8:	f7ff ffba 	bl	8082c40 <pinAvailable>
 8082ccc:	b128      	cbz	r0, 8082cda <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082cce:	4629      	mov	r1, r5
 8082cd0:	4620      	mov	r0, r4
}
 8082cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082cd6:	f7fe bbdf 	b.w	8081498 <HAL_GPIO_Write>
 8082cda:	bd38      	pop	{r3, r4, r5, pc}

08082cdc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8082cdc:	b510      	push	{r4, lr}
 8082cde:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082ce0:	f7fe fbd2 	bl	8081488 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8082ce4:	3804      	subs	r0, #4
 8082ce6:	b2c0      	uxtb	r0, r0
 8082ce8:	2801      	cmp	r0, #1
 8082cea:	d908      	bls.n	8082cfe <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8082cec:	4620      	mov	r0, r4
 8082cee:	f7ff ffa7 	bl	8082c40 <pinAvailable>
 8082cf2:	b120      	cbz	r0, 8082cfe <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082cf4:	4620      	mov	r0, r4
}
 8082cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082cfa:	f7fe bbd5 	b.w	80814a8 <HAL_GPIO_Read>
}
 8082cfe:	2000      	movs	r0, #0
 8082d00:	bd10      	pop	{r4, pc}
	...

08082d04 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082d04:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082d06:	4e11      	ldr	r6, [pc, #68]	; (8082d4c <_GLOBAL__sub_I_SPI+0x48>)
 8082d08:	4d11      	ldr	r5, [pc, #68]	; (8082d50 <_GLOBAL__sub_I_SPI+0x4c>)
 8082d0a:	4c12      	ldr	r4, [pc, #72]	; (8082d54 <_GLOBAL__sub_I_SPI+0x50>)
 8082d0c:	2100      	movs	r1, #0
 8082d0e:	4630      	mov	r0, r6
 8082d10:	f7fe fe20 	bl	8081954 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082d14:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082d16:	4e10      	ldr	r6, [pc, #64]	; (8082d58 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082d18:	462a      	mov	r2, r5
 8082d1a:	4621      	mov	r1, r4
 8082d1c:	f000 f878 	bl	8082e10 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082d20:	2101      	movs	r1, #1
 8082d22:	4630      	mov	r0, r6
 8082d24:	f7fe fe16 	bl	8081954 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082d28:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082d2a:	4e0c      	ldr	r6, [pc, #48]	; (8082d5c <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082d2c:	462a      	mov	r2, r5
 8082d2e:	4621      	mov	r1, r4
 8082d30:	f000 f86e 	bl	8082e10 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082d34:	2102      	movs	r1, #2
 8082d36:	4630      	mov	r0, r6
 8082d38:	f7fe fe0c 	bl	8081954 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082d3c:	462a      	mov	r2, r5
 8082d3e:	4621      	mov	r1, r4
 8082d40:	4630      	mov	r0, r6
 8082d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8082d46:	f000 b863 	b.w	8082e10 <__aeabi_atexit>
 8082d4a:	bf00      	nop
 8082d4c:	20000900 	.word	0x20000900
 8082d50:	200000a4 	.word	0x200000a4
 8082d54:	08081945 	.word	0x08081945
 8082d58:	20000910 	.word	0x20000910
 8082d5c:	20000920 	.word	0x20000920

08082d60 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8082d60:	b513      	push	{r0, r1, r4, lr}
 8082d62:	4c08      	ldr	r4, [pc, #32]	; (8082d84 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082d64:	2300      	movs	r3, #0
 8082d66:	461a      	mov	r2, r3
 8082d68:	4619      	mov	r1, r3
 8082d6a:	9300      	str	r3, [sp, #0]
 8082d6c:	4620      	mov	r0, r4
 8082d6e:	f7ff fc95 	bl	808269c <_ZN9IPAddressC1Ehhhh>
 8082d72:	4620      	mov	r0, r4
 8082d74:	4a04      	ldr	r2, [pc, #16]	; (8082d88 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082d76:	4905      	ldr	r1, [pc, #20]	; (8082d8c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082d78:	b002      	add	sp, #8
 8082d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082d7e:	f000 b847 	b.w	8082e10 <__aeabi_atexit>
 8082d82:	bf00      	nop
 8082d84:	20000934 	.word	0x20000934
 8082d88:	200000a4 	.word	0x200000a4
 8082d8c:	08082615 	.word	0x08082615

08082d90 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8082d90:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8082d92:	4d0b      	ldr	r5, [pc, #44]	; (8082dc0 <_Z19__fetch_global_Wirev+0x30>)
 8082d94:	6829      	ldr	r1, [r5, #0]
 8082d96:	f011 0401 	ands.w	r4, r1, #1
 8082d9a:	d10f      	bne.n	8082dbc <_Z19__fetch_global_Wirev+0x2c>
 8082d9c:	4628      	mov	r0, r5
 8082d9e:	f7fd f980 	bl	80800a2 <__cxa_guard_acquire>
 8082da2:	b158      	cbz	r0, 8082dbc <_Z19__fetch_global_Wirev+0x2c>
 8082da4:	4621      	mov	r1, r4
 8082da6:	4807      	ldr	r0, [pc, #28]	; (8082dc4 <_Z19__fetch_global_Wirev+0x34>)
 8082da8:	f7ff fe8c 	bl	8082ac4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082dac:	4628      	mov	r0, r5
 8082dae:	f7fd f97d 	bl	80800ac <__cxa_guard_release>
 8082db2:	4a05      	ldr	r2, [pc, #20]	; (8082dc8 <_Z19__fetch_global_Wirev+0x38>)
 8082db4:	4905      	ldr	r1, [pc, #20]	; (8082dcc <_Z19__fetch_global_Wirev+0x3c>)
 8082db6:	4803      	ldr	r0, [pc, #12]	; (8082dc4 <_Z19__fetch_global_Wirev+0x34>)
 8082db8:	f000 f82a 	bl	8082e10 <__aeabi_atexit>
	return wire;
}
 8082dbc:	4801      	ldr	r0, [pc, #4]	; (8082dc4 <_Z19__fetch_global_Wirev+0x34>)
 8082dbe:	bd38      	pop	{r3, r4, r5, pc}
 8082dc0:	2000093c 	.word	0x2000093c
 8082dc4:	20000954 	.word	0x20000954
 8082dc8:	200000a4 	.word	0x200000a4
 8082dcc:	08082a6d 	.word	0x08082a6d

08082dd0 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8082dd0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8082dd2:	4c0b      	ldr	r4, [pc, #44]	; (8082e00 <_Z20__fetch_global_Wire3v+0x30>)
 8082dd4:	6823      	ldr	r3, [r4, #0]
 8082dd6:	07db      	lsls	r3, r3, #31
 8082dd8:	d40f      	bmi.n	8082dfa <_Z20__fetch_global_Wire3v+0x2a>
 8082dda:	4620      	mov	r0, r4
 8082ddc:	f7fd f961 	bl	80800a2 <__cxa_guard_acquire>
 8082de0:	b158      	cbz	r0, 8082dfa <_Z20__fetch_global_Wire3v+0x2a>
 8082de2:	2102      	movs	r1, #2
 8082de4:	4807      	ldr	r0, [pc, #28]	; (8082e04 <_Z20__fetch_global_Wire3v+0x34>)
 8082de6:	f7ff fe6d 	bl	8082ac4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082dea:	4620      	mov	r0, r4
 8082dec:	f7fd f95e 	bl	80800ac <__cxa_guard_release>
 8082df0:	4a05      	ldr	r2, [pc, #20]	; (8082e08 <_Z20__fetch_global_Wire3v+0x38>)
 8082df2:	4906      	ldr	r1, [pc, #24]	; (8082e0c <_Z20__fetch_global_Wire3v+0x3c>)
 8082df4:	4803      	ldr	r0, [pc, #12]	; (8082e04 <_Z20__fetch_global_Wire3v+0x34>)
 8082df6:	f000 f80b 	bl	8082e10 <__aeabi_atexit>
	return wire;
}
 8082dfa:	4802      	ldr	r0, [pc, #8]	; (8082e04 <_Z20__fetch_global_Wire3v+0x34>)
 8082dfc:	bd10      	pop	{r4, pc}
 8082dfe:	bf00      	nop
 8082e00:	20000968 	.word	0x20000968
 8082e04:	20000940 	.word	0x20000940
 8082e08:	200000a4 	.word	0x200000a4
 8082e0c:	08082a6d 	.word	0x08082a6d

08082e10 <__aeabi_atexit>:
 8082e10:	460b      	mov	r3, r1
 8082e12:	4601      	mov	r1, r0
 8082e14:	4618      	mov	r0, r3
 8082e16:	f001 b83f 	b.w	8083e98 <__cxa_atexit>

08082e1a <_ZdlPvj>:
 8082e1a:	f7fd b940 	b.w	808009e <_ZdlPv>

08082e1e <_ZSt25__throw_bad_function_callv>:
 8082e1e:	b508      	push	{r3, lr}
 8082e20:	f7fe fd80 	bl	8081924 <abort>

08082e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082e24:	4b18      	ldr	r3, [pc, #96]	; (8082e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082e26:	681a      	ldr	r2, [r3, #0]
 8082e28:	07d1      	lsls	r1, r2, #31
 8082e2a:	bf5c      	itt	pl
 8082e2c:	2201      	movpl	r2, #1
 8082e2e:	601a      	strpl	r2, [r3, #0]
 8082e30:	4b16      	ldr	r3, [pc, #88]	; (8082e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082e32:	681a      	ldr	r2, [r3, #0]
 8082e34:	07d2      	lsls	r2, r2, #31
 8082e36:	bf5c      	itt	pl
 8082e38:	2201      	movpl	r2, #1
 8082e3a:	601a      	strpl	r2, [r3, #0]
 8082e3c:	4b14      	ldr	r3, [pc, #80]	; (8082e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082e3e:	681a      	ldr	r2, [r3, #0]
 8082e40:	07d0      	lsls	r0, r2, #31
 8082e42:	bf5c      	itt	pl
 8082e44:	2201      	movpl	r2, #1
 8082e46:	601a      	strpl	r2, [r3, #0]
 8082e48:	4b12      	ldr	r3, [pc, #72]	; (8082e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082e4a:	681a      	ldr	r2, [r3, #0]
 8082e4c:	07d1      	lsls	r1, r2, #31
 8082e4e:	bf5c      	itt	pl
 8082e50:	2201      	movpl	r2, #1
 8082e52:	601a      	strpl	r2, [r3, #0]
 8082e54:	4b10      	ldr	r3, [pc, #64]	; (8082e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082e56:	681a      	ldr	r2, [r3, #0]
 8082e58:	07d2      	lsls	r2, r2, #31
 8082e5a:	bf5c      	itt	pl
 8082e5c:	2201      	movpl	r2, #1
 8082e5e:	601a      	strpl	r2, [r3, #0]
 8082e60:	4b0e      	ldr	r3, [pc, #56]	; (8082e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082e62:	681a      	ldr	r2, [r3, #0]
 8082e64:	07d0      	lsls	r0, r2, #31
 8082e66:	bf5c      	itt	pl
 8082e68:	2201      	movpl	r2, #1
 8082e6a:	601a      	strpl	r2, [r3, #0]
 8082e6c:	4b0c      	ldr	r3, [pc, #48]	; (8082ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082e6e:	681a      	ldr	r2, [r3, #0]
 8082e70:	07d1      	lsls	r1, r2, #31
 8082e72:	bf5c      	itt	pl
 8082e74:	2201      	movpl	r2, #1
 8082e76:	601a      	strpl	r2, [r3, #0]
 8082e78:	4b0a      	ldr	r3, [pc, #40]	; (8082ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082e7a:	681a      	ldr	r2, [r3, #0]
 8082e7c:	07d2      	lsls	r2, r2, #31
 8082e7e:	bf5c      	itt	pl
 8082e80:	2201      	movpl	r2, #1
 8082e82:	601a      	strpl	r2, [r3, #0]
 8082e84:	4770      	bx	lr
 8082e86:	bf00      	nop
 8082e88:	20000988 	.word	0x20000988
 8082e8c:	20000984 	.word	0x20000984
 8082e90:	20000980 	.word	0x20000980
 8082e94:	2000097c 	.word	0x2000097c
 8082e98:	20000978 	.word	0x20000978
 8082e9c:	20000974 	.word	0x20000974
 8082ea0:	20000970 	.word	0x20000970
 8082ea4:	2000096c 	.word	0x2000096c

08082ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8082ea8:	4b24      	ldr	r3, [pc, #144]	; (8082f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8082eaa:	681a      	ldr	r2, [r3, #0]
 8082eac:	07d0      	lsls	r0, r2, #31
 8082eae:	bf5c      	itt	pl
 8082eb0:	2201      	movpl	r2, #1
 8082eb2:	601a      	strpl	r2, [r3, #0]
 8082eb4:	4b22      	ldr	r3, [pc, #136]	; (8082f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8082eb6:	681a      	ldr	r2, [r3, #0]
 8082eb8:	07d1      	lsls	r1, r2, #31
 8082eba:	bf5c      	itt	pl
 8082ebc:	2201      	movpl	r2, #1
 8082ebe:	601a      	strpl	r2, [r3, #0]
 8082ec0:	4b20      	ldr	r3, [pc, #128]	; (8082f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8082ec2:	681a      	ldr	r2, [r3, #0]
 8082ec4:	07d2      	lsls	r2, r2, #31
 8082ec6:	bf5c      	itt	pl
 8082ec8:	2201      	movpl	r2, #1
 8082eca:	601a      	strpl	r2, [r3, #0]
 8082ecc:	4b1e      	ldr	r3, [pc, #120]	; (8082f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8082ece:	681a      	ldr	r2, [r3, #0]
 8082ed0:	07d0      	lsls	r0, r2, #31
 8082ed2:	bf5c      	itt	pl
 8082ed4:	2201      	movpl	r2, #1
 8082ed6:	601a      	strpl	r2, [r3, #0]
 8082ed8:	4b1c      	ldr	r3, [pc, #112]	; (8082f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8082eda:	681a      	ldr	r2, [r3, #0]
 8082edc:	07d1      	lsls	r1, r2, #31
 8082ede:	bf5c      	itt	pl
 8082ee0:	2201      	movpl	r2, #1
 8082ee2:	601a      	strpl	r2, [r3, #0]
 8082ee4:	4b1a      	ldr	r3, [pc, #104]	; (8082f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8082ee6:	681a      	ldr	r2, [r3, #0]
 8082ee8:	07d2      	lsls	r2, r2, #31
 8082eea:	bf5c      	itt	pl
 8082eec:	2201      	movpl	r2, #1
 8082eee:	601a      	strpl	r2, [r3, #0]
 8082ef0:	4b18      	ldr	r3, [pc, #96]	; (8082f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8082ef2:	681a      	ldr	r2, [r3, #0]
 8082ef4:	07d0      	lsls	r0, r2, #31
 8082ef6:	bf5c      	itt	pl
 8082ef8:	2201      	movpl	r2, #1
 8082efa:	601a      	strpl	r2, [r3, #0]
 8082efc:	4b16      	ldr	r3, [pc, #88]	; (8082f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8082efe:	681a      	ldr	r2, [r3, #0]
 8082f00:	07d1      	lsls	r1, r2, #31
 8082f02:	bf5c      	itt	pl
 8082f04:	2201      	movpl	r2, #1
 8082f06:	601a      	strpl	r2, [r3, #0]
 8082f08:	4b14      	ldr	r3, [pc, #80]	; (8082f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8082f0a:	681a      	ldr	r2, [r3, #0]
 8082f0c:	07d2      	lsls	r2, r2, #31
 8082f0e:	bf5c      	itt	pl
 8082f10:	2201      	movpl	r2, #1
 8082f12:	601a      	strpl	r2, [r3, #0]
 8082f14:	4b12      	ldr	r3, [pc, #72]	; (8082f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8082f16:	681a      	ldr	r2, [r3, #0]
 8082f18:	07d0      	lsls	r0, r2, #31
 8082f1a:	bf5c      	itt	pl
 8082f1c:	2201      	movpl	r2, #1
 8082f1e:	601a      	strpl	r2, [r3, #0]
 8082f20:	4b10      	ldr	r3, [pc, #64]	; (8082f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8082f22:	681a      	ldr	r2, [r3, #0]
 8082f24:	07d1      	lsls	r1, r2, #31
 8082f26:	bf5c      	itt	pl
 8082f28:	2201      	movpl	r2, #1
 8082f2a:	601a      	strpl	r2, [r3, #0]
 8082f2c:	4b0e      	ldr	r3, [pc, #56]	; (8082f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8082f2e:	681a      	ldr	r2, [r3, #0]
 8082f30:	07d2      	lsls	r2, r2, #31
 8082f32:	bf5c      	itt	pl
 8082f34:	2201      	movpl	r2, #1
 8082f36:	601a      	strpl	r2, [r3, #0]
 8082f38:	4770      	bx	lr
 8082f3a:	bf00      	nop
 8082f3c:	200009b8 	.word	0x200009b8
 8082f40:	200009b4 	.word	0x200009b4
 8082f44:	200009b0 	.word	0x200009b0
 8082f48:	200009ac 	.word	0x200009ac
 8082f4c:	200009a8 	.word	0x200009a8
 8082f50:	200009a4 	.word	0x200009a4
 8082f54:	200009a0 	.word	0x200009a0
 8082f58:	2000099c 	.word	0x2000099c
 8082f5c:	20000998 	.word	0x20000998
 8082f60:	20000994 	.word	0x20000994
 8082f64:	20000990 	.word	0x20000990
 8082f68:	2000098c 	.word	0x2000098c

08082f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8082f6c:	4b24      	ldr	r3, [pc, #144]	; (8083000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8082f6e:	681a      	ldr	r2, [r3, #0]
 8082f70:	07d0      	lsls	r0, r2, #31
 8082f72:	bf5c      	itt	pl
 8082f74:	2201      	movpl	r2, #1
 8082f76:	601a      	strpl	r2, [r3, #0]
 8082f78:	4b22      	ldr	r3, [pc, #136]	; (8083004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8082f7a:	681a      	ldr	r2, [r3, #0]
 8082f7c:	07d1      	lsls	r1, r2, #31
 8082f7e:	bf5c      	itt	pl
 8082f80:	2201      	movpl	r2, #1
 8082f82:	601a      	strpl	r2, [r3, #0]
 8082f84:	4b20      	ldr	r3, [pc, #128]	; (8083008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8082f86:	681a      	ldr	r2, [r3, #0]
 8082f88:	07d2      	lsls	r2, r2, #31
 8082f8a:	bf5c      	itt	pl
 8082f8c:	2201      	movpl	r2, #1
 8082f8e:	601a      	strpl	r2, [r3, #0]
 8082f90:	4b1e      	ldr	r3, [pc, #120]	; (808300c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8082f92:	681a      	ldr	r2, [r3, #0]
 8082f94:	07d0      	lsls	r0, r2, #31
 8082f96:	bf5c      	itt	pl
 8082f98:	2201      	movpl	r2, #1
 8082f9a:	601a      	strpl	r2, [r3, #0]
 8082f9c:	4b1c      	ldr	r3, [pc, #112]	; (8083010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8082f9e:	681a      	ldr	r2, [r3, #0]
 8082fa0:	07d1      	lsls	r1, r2, #31
 8082fa2:	bf5c      	itt	pl
 8082fa4:	2201      	movpl	r2, #1
 8082fa6:	601a      	strpl	r2, [r3, #0]
 8082fa8:	4b1a      	ldr	r3, [pc, #104]	; (8083014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8082faa:	681a      	ldr	r2, [r3, #0]
 8082fac:	07d2      	lsls	r2, r2, #31
 8082fae:	bf5c      	itt	pl
 8082fb0:	2201      	movpl	r2, #1
 8082fb2:	601a      	strpl	r2, [r3, #0]
 8082fb4:	4b18      	ldr	r3, [pc, #96]	; (8083018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8082fb6:	681a      	ldr	r2, [r3, #0]
 8082fb8:	07d0      	lsls	r0, r2, #31
 8082fba:	bf5c      	itt	pl
 8082fbc:	2201      	movpl	r2, #1
 8082fbe:	601a      	strpl	r2, [r3, #0]
 8082fc0:	4b16      	ldr	r3, [pc, #88]	; (808301c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8082fc2:	681a      	ldr	r2, [r3, #0]
 8082fc4:	07d1      	lsls	r1, r2, #31
 8082fc6:	bf5c      	itt	pl
 8082fc8:	2201      	movpl	r2, #1
 8082fca:	601a      	strpl	r2, [r3, #0]
 8082fcc:	4b14      	ldr	r3, [pc, #80]	; (8083020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8082fce:	681a      	ldr	r2, [r3, #0]
 8082fd0:	07d2      	lsls	r2, r2, #31
 8082fd2:	bf5c      	itt	pl
 8082fd4:	2201      	movpl	r2, #1
 8082fd6:	601a      	strpl	r2, [r3, #0]
 8082fd8:	4b12      	ldr	r3, [pc, #72]	; (8083024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8082fda:	681a      	ldr	r2, [r3, #0]
 8082fdc:	07d0      	lsls	r0, r2, #31
 8082fde:	bf5c      	itt	pl
 8082fe0:	2201      	movpl	r2, #1
 8082fe2:	601a      	strpl	r2, [r3, #0]
 8082fe4:	4b10      	ldr	r3, [pc, #64]	; (8083028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8082fe6:	681a      	ldr	r2, [r3, #0]
 8082fe8:	07d1      	lsls	r1, r2, #31
 8082fea:	bf5c      	itt	pl
 8082fec:	2201      	movpl	r2, #1
 8082fee:	601a      	strpl	r2, [r3, #0]
 8082ff0:	4b0e      	ldr	r3, [pc, #56]	; (808302c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8082ff2:	681a      	ldr	r2, [r3, #0]
 8082ff4:	07d2      	lsls	r2, r2, #31
 8082ff6:	bf5c      	itt	pl
 8082ff8:	2201      	movpl	r2, #1
 8082ffa:	601a      	strpl	r2, [r3, #0]
 8082ffc:	4770      	bx	lr
 8082ffe:	bf00      	nop
 8083000:	200009e8 	.word	0x200009e8
 8083004:	200009e4 	.word	0x200009e4
 8083008:	200009e0 	.word	0x200009e0
 808300c:	200009dc 	.word	0x200009dc
 8083010:	200009d8 	.word	0x200009d8
 8083014:	200009d4 	.word	0x200009d4
 8083018:	200009d0 	.word	0x200009d0
 808301c:	200009cc 	.word	0x200009cc
 8083020:	200009c8 	.word	0x200009c8
 8083024:	200009c4 	.word	0x200009c4
 8083028:	200009c0 	.word	0x200009c0
 808302c:	200009bc 	.word	0x200009bc

08083030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083030:	4b18      	ldr	r3, [pc, #96]	; (8083094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083032:	681a      	ldr	r2, [r3, #0]
 8083034:	07d1      	lsls	r1, r2, #31
 8083036:	bf5c      	itt	pl
 8083038:	2201      	movpl	r2, #1
 808303a:	601a      	strpl	r2, [r3, #0]
 808303c:	4b16      	ldr	r3, [pc, #88]	; (8083098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808303e:	681a      	ldr	r2, [r3, #0]
 8083040:	07d2      	lsls	r2, r2, #31
 8083042:	bf5c      	itt	pl
 8083044:	2201      	movpl	r2, #1
 8083046:	601a      	strpl	r2, [r3, #0]
 8083048:	4b14      	ldr	r3, [pc, #80]	; (808309c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808304a:	681a      	ldr	r2, [r3, #0]
 808304c:	07d0      	lsls	r0, r2, #31
 808304e:	bf5c      	itt	pl
 8083050:	2201      	movpl	r2, #1
 8083052:	601a      	strpl	r2, [r3, #0]
 8083054:	4b12      	ldr	r3, [pc, #72]	; (80830a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083056:	681a      	ldr	r2, [r3, #0]
 8083058:	07d1      	lsls	r1, r2, #31
 808305a:	bf5c      	itt	pl
 808305c:	2201      	movpl	r2, #1
 808305e:	601a      	strpl	r2, [r3, #0]
 8083060:	4b10      	ldr	r3, [pc, #64]	; (80830a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083062:	681a      	ldr	r2, [r3, #0]
 8083064:	07d2      	lsls	r2, r2, #31
 8083066:	bf5c      	itt	pl
 8083068:	2201      	movpl	r2, #1
 808306a:	601a      	strpl	r2, [r3, #0]
 808306c:	4b0e      	ldr	r3, [pc, #56]	; (80830a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808306e:	681a      	ldr	r2, [r3, #0]
 8083070:	07d0      	lsls	r0, r2, #31
 8083072:	bf5c      	itt	pl
 8083074:	2201      	movpl	r2, #1
 8083076:	601a      	strpl	r2, [r3, #0]
 8083078:	4b0c      	ldr	r3, [pc, #48]	; (80830ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808307a:	681a      	ldr	r2, [r3, #0]
 808307c:	07d1      	lsls	r1, r2, #31
 808307e:	bf5c      	itt	pl
 8083080:	2201      	movpl	r2, #1
 8083082:	601a      	strpl	r2, [r3, #0]
 8083084:	4b0a      	ldr	r3, [pc, #40]	; (80830b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083086:	681a      	ldr	r2, [r3, #0]
 8083088:	07d2      	lsls	r2, r2, #31
 808308a:	bf5c      	itt	pl
 808308c:	2201      	movpl	r2, #1
 808308e:	601a      	strpl	r2, [r3, #0]
 8083090:	4770      	bx	lr
 8083092:	bf00      	nop
 8083094:	20000a08 	.word	0x20000a08
 8083098:	20000a04 	.word	0x20000a04
 808309c:	20000a00 	.word	0x20000a00
 80830a0:	200009fc 	.word	0x200009fc
 80830a4:	200009f8 	.word	0x200009f8
 80830a8:	200009f4 	.word	0x200009f4
 80830ac:	200009f0 	.word	0x200009f0
 80830b0:	200009ec 	.word	0x200009ec

080830b4 <__aeabi_drsub>:
 80830b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80830b8:	e002      	b.n	80830c0 <__adddf3>
 80830ba:	bf00      	nop

080830bc <__aeabi_dsub>:
 80830bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080830c0 <__adddf3>:
 80830c0:	b530      	push	{r4, r5, lr}
 80830c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80830c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80830ca:	ea94 0f05 	teq	r4, r5
 80830ce:	bf08      	it	eq
 80830d0:	ea90 0f02 	teqeq	r0, r2
 80830d4:	bf1f      	itttt	ne
 80830d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80830da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80830de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80830e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80830e6:	f000 80e2 	beq.w	80832ae <__adddf3+0x1ee>
 80830ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80830ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80830f2:	bfb8      	it	lt
 80830f4:	426d      	neglt	r5, r5
 80830f6:	dd0c      	ble.n	8083112 <__adddf3+0x52>
 80830f8:	442c      	add	r4, r5
 80830fa:	ea80 0202 	eor.w	r2, r0, r2
 80830fe:	ea81 0303 	eor.w	r3, r1, r3
 8083102:	ea82 0000 	eor.w	r0, r2, r0
 8083106:	ea83 0101 	eor.w	r1, r3, r1
 808310a:	ea80 0202 	eor.w	r2, r0, r2
 808310e:	ea81 0303 	eor.w	r3, r1, r3
 8083112:	2d36      	cmp	r5, #54	; 0x36
 8083114:	bf88      	it	hi
 8083116:	bd30      	pophi	{r4, r5, pc}
 8083118:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808311c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083120:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083124:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083128:	d002      	beq.n	8083130 <__adddf3+0x70>
 808312a:	4240      	negs	r0, r0
 808312c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083130:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083134:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083138:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808313c:	d002      	beq.n	8083144 <__adddf3+0x84>
 808313e:	4252      	negs	r2, r2
 8083140:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083144:	ea94 0f05 	teq	r4, r5
 8083148:	f000 80a7 	beq.w	808329a <__adddf3+0x1da>
 808314c:	f1a4 0401 	sub.w	r4, r4, #1
 8083150:	f1d5 0e20 	rsbs	lr, r5, #32
 8083154:	db0d      	blt.n	8083172 <__adddf3+0xb2>
 8083156:	fa02 fc0e 	lsl.w	ip, r2, lr
 808315a:	fa22 f205 	lsr.w	r2, r2, r5
 808315e:	1880      	adds	r0, r0, r2
 8083160:	f141 0100 	adc.w	r1, r1, #0
 8083164:	fa03 f20e 	lsl.w	r2, r3, lr
 8083168:	1880      	adds	r0, r0, r2
 808316a:	fa43 f305 	asr.w	r3, r3, r5
 808316e:	4159      	adcs	r1, r3
 8083170:	e00e      	b.n	8083190 <__adddf3+0xd0>
 8083172:	f1a5 0520 	sub.w	r5, r5, #32
 8083176:	f10e 0e20 	add.w	lr, lr, #32
 808317a:	2a01      	cmp	r2, #1
 808317c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083180:	bf28      	it	cs
 8083182:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083186:	fa43 f305 	asr.w	r3, r3, r5
 808318a:	18c0      	adds	r0, r0, r3
 808318c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083190:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083194:	d507      	bpl.n	80831a6 <__adddf3+0xe6>
 8083196:	f04f 0e00 	mov.w	lr, #0
 808319a:	f1dc 0c00 	rsbs	ip, ip, #0
 808319e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80831a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80831a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80831aa:	d31b      	bcc.n	80831e4 <__adddf3+0x124>
 80831ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80831b0:	d30c      	bcc.n	80831cc <__adddf3+0x10c>
 80831b2:	0849      	lsrs	r1, r1, #1
 80831b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80831b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80831bc:	f104 0401 	add.w	r4, r4, #1
 80831c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80831c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80831c8:	f080 809a 	bcs.w	8083300 <__adddf3+0x240>
 80831cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80831d0:	bf08      	it	eq
 80831d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80831d6:	f150 0000 	adcs.w	r0, r0, #0
 80831da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80831de:	ea41 0105 	orr.w	r1, r1, r5
 80831e2:	bd30      	pop	{r4, r5, pc}
 80831e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80831e8:	4140      	adcs	r0, r0
 80831ea:	eb41 0101 	adc.w	r1, r1, r1
 80831ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80831f2:	f1a4 0401 	sub.w	r4, r4, #1
 80831f6:	d1e9      	bne.n	80831cc <__adddf3+0x10c>
 80831f8:	f091 0f00 	teq	r1, #0
 80831fc:	bf04      	itt	eq
 80831fe:	4601      	moveq	r1, r0
 8083200:	2000      	moveq	r0, #0
 8083202:	fab1 f381 	clz	r3, r1
 8083206:	bf08      	it	eq
 8083208:	3320      	addeq	r3, #32
 808320a:	f1a3 030b 	sub.w	r3, r3, #11
 808320e:	f1b3 0220 	subs.w	r2, r3, #32
 8083212:	da0c      	bge.n	808322e <__adddf3+0x16e>
 8083214:	320c      	adds	r2, #12
 8083216:	dd08      	ble.n	808322a <__adddf3+0x16a>
 8083218:	f102 0c14 	add.w	ip, r2, #20
 808321c:	f1c2 020c 	rsb	r2, r2, #12
 8083220:	fa01 f00c 	lsl.w	r0, r1, ip
 8083224:	fa21 f102 	lsr.w	r1, r1, r2
 8083228:	e00c      	b.n	8083244 <__adddf3+0x184>
 808322a:	f102 0214 	add.w	r2, r2, #20
 808322e:	bfd8      	it	le
 8083230:	f1c2 0c20 	rsble	ip, r2, #32
 8083234:	fa01 f102 	lsl.w	r1, r1, r2
 8083238:	fa20 fc0c 	lsr.w	ip, r0, ip
 808323c:	bfdc      	itt	le
 808323e:	ea41 010c 	orrle.w	r1, r1, ip
 8083242:	4090      	lslle	r0, r2
 8083244:	1ae4      	subs	r4, r4, r3
 8083246:	bfa2      	ittt	ge
 8083248:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808324c:	4329      	orrge	r1, r5
 808324e:	bd30      	popge	{r4, r5, pc}
 8083250:	ea6f 0404 	mvn.w	r4, r4
 8083254:	3c1f      	subs	r4, #31
 8083256:	da1c      	bge.n	8083292 <__adddf3+0x1d2>
 8083258:	340c      	adds	r4, #12
 808325a:	dc0e      	bgt.n	808327a <__adddf3+0x1ba>
 808325c:	f104 0414 	add.w	r4, r4, #20
 8083260:	f1c4 0220 	rsb	r2, r4, #32
 8083264:	fa20 f004 	lsr.w	r0, r0, r4
 8083268:	fa01 f302 	lsl.w	r3, r1, r2
 808326c:	ea40 0003 	orr.w	r0, r0, r3
 8083270:	fa21 f304 	lsr.w	r3, r1, r4
 8083274:	ea45 0103 	orr.w	r1, r5, r3
 8083278:	bd30      	pop	{r4, r5, pc}
 808327a:	f1c4 040c 	rsb	r4, r4, #12
 808327e:	f1c4 0220 	rsb	r2, r4, #32
 8083282:	fa20 f002 	lsr.w	r0, r0, r2
 8083286:	fa01 f304 	lsl.w	r3, r1, r4
 808328a:	ea40 0003 	orr.w	r0, r0, r3
 808328e:	4629      	mov	r1, r5
 8083290:	bd30      	pop	{r4, r5, pc}
 8083292:	fa21 f004 	lsr.w	r0, r1, r4
 8083296:	4629      	mov	r1, r5
 8083298:	bd30      	pop	{r4, r5, pc}
 808329a:	f094 0f00 	teq	r4, #0
 808329e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80832a2:	bf06      	itte	eq
 80832a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80832a8:	3401      	addeq	r4, #1
 80832aa:	3d01      	subne	r5, #1
 80832ac:	e74e      	b.n	808314c <__adddf3+0x8c>
 80832ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80832b2:	bf18      	it	ne
 80832b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80832b8:	d029      	beq.n	808330e <__adddf3+0x24e>
 80832ba:	ea94 0f05 	teq	r4, r5
 80832be:	bf08      	it	eq
 80832c0:	ea90 0f02 	teqeq	r0, r2
 80832c4:	d005      	beq.n	80832d2 <__adddf3+0x212>
 80832c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80832ca:	bf04      	itt	eq
 80832cc:	4619      	moveq	r1, r3
 80832ce:	4610      	moveq	r0, r2
 80832d0:	bd30      	pop	{r4, r5, pc}
 80832d2:	ea91 0f03 	teq	r1, r3
 80832d6:	bf1e      	ittt	ne
 80832d8:	2100      	movne	r1, #0
 80832da:	2000      	movne	r0, #0
 80832dc:	bd30      	popne	{r4, r5, pc}
 80832de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80832e2:	d105      	bne.n	80832f0 <__adddf3+0x230>
 80832e4:	0040      	lsls	r0, r0, #1
 80832e6:	4149      	adcs	r1, r1
 80832e8:	bf28      	it	cs
 80832ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80832ee:	bd30      	pop	{r4, r5, pc}
 80832f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80832f4:	bf3c      	itt	cc
 80832f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80832fa:	bd30      	popcc	{r4, r5, pc}
 80832fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083300:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083304:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083308:	f04f 0000 	mov.w	r0, #0
 808330c:	bd30      	pop	{r4, r5, pc}
 808330e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083312:	bf1a      	itte	ne
 8083314:	4619      	movne	r1, r3
 8083316:	4610      	movne	r0, r2
 8083318:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808331c:	bf1c      	itt	ne
 808331e:	460b      	movne	r3, r1
 8083320:	4602      	movne	r2, r0
 8083322:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083326:	bf06      	itte	eq
 8083328:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808332c:	ea91 0f03 	teqeq	r1, r3
 8083330:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083334:	bd30      	pop	{r4, r5, pc}
 8083336:	bf00      	nop

08083338 <__aeabi_ui2d>:
 8083338:	f090 0f00 	teq	r0, #0
 808333c:	bf04      	itt	eq
 808333e:	2100      	moveq	r1, #0
 8083340:	4770      	bxeq	lr
 8083342:	b530      	push	{r4, r5, lr}
 8083344:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083348:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808334c:	f04f 0500 	mov.w	r5, #0
 8083350:	f04f 0100 	mov.w	r1, #0
 8083354:	e750      	b.n	80831f8 <__adddf3+0x138>
 8083356:	bf00      	nop

08083358 <__aeabi_i2d>:
 8083358:	f090 0f00 	teq	r0, #0
 808335c:	bf04      	itt	eq
 808335e:	2100      	moveq	r1, #0
 8083360:	4770      	bxeq	lr
 8083362:	b530      	push	{r4, r5, lr}
 8083364:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083368:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808336c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083370:	bf48      	it	mi
 8083372:	4240      	negmi	r0, r0
 8083374:	f04f 0100 	mov.w	r1, #0
 8083378:	e73e      	b.n	80831f8 <__adddf3+0x138>
 808337a:	bf00      	nop

0808337c <__aeabi_f2d>:
 808337c:	0042      	lsls	r2, r0, #1
 808337e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083382:	ea4f 0131 	mov.w	r1, r1, rrx
 8083386:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808338a:	bf1f      	itttt	ne
 808338c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083390:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083394:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083398:	4770      	bxne	lr
 808339a:	f092 0f00 	teq	r2, #0
 808339e:	bf14      	ite	ne
 80833a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80833a4:	4770      	bxeq	lr
 80833a6:	b530      	push	{r4, r5, lr}
 80833a8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80833ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80833b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80833b4:	e720      	b.n	80831f8 <__adddf3+0x138>
 80833b6:	bf00      	nop

080833b8 <__aeabi_ul2d>:
 80833b8:	ea50 0201 	orrs.w	r2, r0, r1
 80833bc:	bf08      	it	eq
 80833be:	4770      	bxeq	lr
 80833c0:	b530      	push	{r4, r5, lr}
 80833c2:	f04f 0500 	mov.w	r5, #0
 80833c6:	e00a      	b.n	80833de <__aeabi_l2d+0x16>

080833c8 <__aeabi_l2d>:
 80833c8:	ea50 0201 	orrs.w	r2, r0, r1
 80833cc:	bf08      	it	eq
 80833ce:	4770      	bxeq	lr
 80833d0:	b530      	push	{r4, r5, lr}
 80833d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80833d6:	d502      	bpl.n	80833de <__aeabi_l2d+0x16>
 80833d8:	4240      	negs	r0, r0
 80833da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80833de:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80833e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80833e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80833ea:	f43f aedc 	beq.w	80831a6 <__adddf3+0xe6>
 80833ee:	f04f 0203 	mov.w	r2, #3
 80833f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80833f6:	bf18      	it	ne
 80833f8:	3203      	addne	r2, #3
 80833fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80833fe:	bf18      	it	ne
 8083400:	3203      	addne	r2, #3
 8083402:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083406:	f1c2 0320 	rsb	r3, r2, #32
 808340a:	fa00 fc03 	lsl.w	ip, r0, r3
 808340e:	fa20 f002 	lsr.w	r0, r0, r2
 8083412:	fa01 fe03 	lsl.w	lr, r1, r3
 8083416:	ea40 000e 	orr.w	r0, r0, lr
 808341a:	fa21 f102 	lsr.w	r1, r1, r2
 808341e:	4414      	add	r4, r2
 8083420:	e6c1      	b.n	80831a6 <__adddf3+0xe6>
 8083422:	bf00      	nop

08083424 <__aeabi_dmul>:
 8083424:	b570      	push	{r4, r5, r6, lr}
 8083426:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808342a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808342e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083432:	bf1d      	ittte	ne
 8083434:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083438:	ea94 0f0c 	teqne	r4, ip
 808343c:	ea95 0f0c 	teqne	r5, ip
 8083440:	f000 f8de 	bleq	8083600 <__aeabi_dmul+0x1dc>
 8083444:	442c      	add	r4, r5
 8083446:	ea81 0603 	eor.w	r6, r1, r3
 808344a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808344e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083452:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083456:	bf18      	it	ne
 8083458:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808345c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083464:	d038      	beq.n	80834d8 <__aeabi_dmul+0xb4>
 8083466:	fba0 ce02 	umull	ip, lr, r0, r2
 808346a:	f04f 0500 	mov.w	r5, #0
 808346e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083472:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083476:	fbe0 e503 	umlal	lr, r5, r0, r3
 808347a:	f04f 0600 	mov.w	r6, #0
 808347e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083482:	f09c 0f00 	teq	ip, #0
 8083486:	bf18      	it	ne
 8083488:	f04e 0e01 	orrne.w	lr, lr, #1
 808348c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083490:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083494:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083498:	d204      	bcs.n	80834a4 <__aeabi_dmul+0x80>
 808349a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808349e:	416d      	adcs	r5, r5
 80834a0:	eb46 0606 	adc.w	r6, r6, r6
 80834a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80834a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80834ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80834b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80834b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80834b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80834bc:	bf88      	it	hi
 80834be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80834c2:	d81e      	bhi.n	8083502 <__aeabi_dmul+0xde>
 80834c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80834c8:	bf08      	it	eq
 80834ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80834ce:	f150 0000 	adcs.w	r0, r0, #0
 80834d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80834d6:	bd70      	pop	{r4, r5, r6, pc}
 80834d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80834dc:	ea46 0101 	orr.w	r1, r6, r1
 80834e0:	ea40 0002 	orr.w	r0, r0, r2
 80834e4:	ea81 0103 	eor.w	r1, r1, r3
 80834e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80834ec:	bfc2      	ittt	gt
 80834ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80834f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80834f6:	bd70      	popgt	{r4, r5, r6, pc}
 80834f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80834fc:	f04f 0e00 	mov.w	lr, #0
 8083500:	3c01      	subs	r4, #1
 8083502:	f300 80ab 	bgt.w	808365c <__aeabi_dmul+0x238>
 8083506:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808350a:	bfde      	ittt	le
 808350c:	2000      	movle	r0, #0
 808350e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083512:	bd70      	pople	{r4, r5, r6, pc}
 8083514:	f1c4 0400 	rsb	r4, r4, #0
 8083518:	3c20      	subs	r4, #32
 808351a:	da35      	bge.n	8083588 <__aeabi_dmul+0x164>
 808351c:	340c      	adds	r4, #12
 808351e:	dc1b      	bgt.n	8083558 <__aeabi_dmul+0x134>
 8083520:	f104 0414 	add.w	r4, r4, #20
 8083524:	f1c4 0520 	rsb	r5, r4, #32
 8083528:	fa00 f305 	lsl.w	r3, r0, r5
 808352c:	fa20 f004 	lsr.w	r0, r0, r4
 8083530:	fa01 f205 	lsl.w	r2, r1, r5
 8083534:	ea40 0002 	orr.w	r0, r0, r2
 8083538:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808353c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083540:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083544:	fa21 f604 	lsr.w	r6, r1, r4
 8083548:	eb42 0106 	adc.w	r1, r2, r6
 808354c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083550:	bf08      	it	eq
 8083552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083556:	bd70      	pop	{r4, r5, r6, pc}
 8083558:	f1c4 040c 	rsb	r4, r4, #12
 808355c:	f1c4 0520 	rsb	r5, r4, #32
 8083560:	fa00 f304 	lsl.w	r3, r0, r4
 8083564:	fa20 f005 	lsr.w	r0, r0, r5
 8083568:	fa01 f204 	lsl.w	r2, r1, r4
 808356c:	ea40 0002 	orr.w	r0, r0, r2
 8083570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083578:	f141 0100 	adc.w	r1, r1, #0
 808357c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083580:	bf08      	it	eq
 8083582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083586:	bd70      	pop	{r4, r5, r6, pc}
 8083588:	f1c4 0520 	rsb	r5, r4, #32
 808358c:	fa00 f205 	lsl.w	r2, r0, r5
 8083590:	ea4e 0e02 	orr.w	lr, lr, r2
 8083594:	fa20 f304 	lsr.w	r3, r0, r4
 8083598:	fa01 f205 	lsl.w	r2, r1, r5
 808359c:	ea43 0302 	orr.w	r3, r3, r2
 80835a0:	fa21 f004 	lsr.w	r0, r1, r4
 80835a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80835a8:	fa21 f204 	lsr.w	r2, r1, r4
 80835ac:	ea20 0002 	bic.w	r0, r0, r2
 80835b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80835b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80835b8:	bf08      	it	eq
 80835ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80835be:	bd70      	pop	{r4, r5, r6, pc}
 80835c0:	f094 0f00 	teq	r4, #0
 80835c4:	d10f      	bne.n	80835e6 <__aeabi_dmul+0x1c2>
 80835c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80835ca:	0040      	lsls	r0, r0, #1
 80835cc:	eb41 0101 	adc.w	r1, r1, r1
 80835d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80835d4:	bf08      	it	eq
 80835d6:	3c01      	subeq	r4, #1
 80835d8:	d0f7      	beq.n	80835ca <__aeabi_dmul+0x1a6>
 80835da:	ea41 0106 	orr.w	r1, r1, r6
 80835de:	f095 0f00 	teq	r5, #0
 80835e2:	bf18      	it	ne
 80835e4:	4770      	bxne	lr
 80835e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80835ea:	0052      	lsls	r2, r2, #1
 80835ec:	eb43 0303 	adc.w	r3, r3, r3
 80835f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80835f4:	bf08      	it	eq
 80835f6:	3d01      	subeq	r5, #1
 80835f8:	d0f7      	beq.n	80835ea <__aeabi_dmul+0x1c6>
 80835fa:	ea43 0306 	orr.w	r3, r3, r6
 80835fe:	4770      	bx	lr
 8083600:	ea94 0f0c 	teq	r4, ip
 8083604:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083608:	bf18      	it	ne
 808360a:	ea95 0f0c 	teqne	r5, ip
 808360e:	d00c      	beq.n	808362a <__aeabi_dmul+0x206>
 8083610:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083614:	bf18      	it	ne
 8083616:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808361a:	d1d1      	bne.n	80835c0 <__aeabi_dmul+0x19c>
 808361c:	ea81 0103 	eor.w	r1, r1, r3
 8083620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083624:	f04f 0000 	mov.w	r0, #0
 8083628:	bd70      	pop	{r4, r5, r6, pc}
 808362a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808362e:	bf06      	itte	eq
 8083630:	4610      	moveq	r0, r2
 8083632:	4619      	moveq	r1, r3
 8083634:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083638:	d019      	beq.n	808366e <__aeabi_dmul+0x24a>
 808363a:	ea94 0f0c 	teq	r4, ip
 808363e:	d102      	bne.n	8083646 <__aeabi_dmul+0x222>
 8083640:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083644:	d113      	bne.n	808366e <__aeabi_dmul+0x24a>
 8083646:	ea95 0f0c 	teq	r5, ip
 808364a:	d105      	bne.n	8083658 <__aeabi_dmul+0x234>
 808364c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083650:	bf1c      	itt	ne
 8083652:	4610      	movne	r0, r2
 8083654:	4619      	movne	r1, r3
 8083656:	d10a      	bne.n	808366e <__aeabi_dmul+0x24a>
 8083658:	ea81 0103 	eor.w	r1, r1, r3
 808365c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083660:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083664:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083668:	f04f 0000 	mov.w	r0, #0
 808366c:	bd70      	pop	{r4, r5, r6, pc}
 808366e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083672:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083676:	bd70      	pop	{r4, r5, r6, pc}

08083678 <__aeabi_ddiv>:
 8083678:	b570      	push	{r4, r5, r6, lr}
 808367a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808367e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083686:	bf1d      	ittte	ne
 8083688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808368c:	ea94 0f0c 	teqne	r4, ip
 8083690:	ea95 0f0c 	teqne	r5, ip
 8083694:	f000 f8a7 	bleq	80837e6 <__aeabi_ddiv+0x16e>
 8083698:	eba4 0405 	sub.w	r4, r4, r5
 808369c:	ea81 0e03 	eor.w	lr, r1, r3
 80836a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80836a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80836a8:	f000 8088 	beq.w	80837bc <__aeabi_ddiv+0x144>
 80836ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80836b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80836b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80836b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80836bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80836c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80836c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80836c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80836cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80836d0:	429d      	cmp	r5, r3
 80836d2:	bf08      	it	eq
 80836d4:	4296      	cmpeq	r6, r2
 80836d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80836da:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80836de:	d202      	bcs.n	80836e6 <__aeabi_ddiv+0x6e>
 80836e0:	085b      	lsrs	r3, r3, #1
 80836e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80836e6:	1ab6      	subs	r6, r6, r2
 80836e8:	eb65 0503 	sbc.w	r5, r5, r3
 80836ec:	085b      	lsrs	r3, r3, #1
 80836ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80836f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80836f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80836fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80836fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083702:	bf22      	ittt	cs
 8083704:	1ab6      	subcs	r6, r6, r2
 8083706:	4675      	movcs	r5, lr
 8083708:	ea40 000c 	orrcs.w	r0, r0, ip
 808370c:	085b      	lsrs	r3, r3, #1
 808370e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083712:	ebb6 0e02 	subs.w	lr, r6, r2
 8083716:	eb75 0e03 	sbcs.w	lr, r5, r3
 808371a:	bf22      	ittt	cs
 808371c:	1ab6      	subcs	r6, r6, r2
 808371e:	4675      	movcs	r5, lr
 8083720:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083724:	085b      	lsrs	r3, r3, #1
 8083726:	ea4f 0232 	mov.w	r2, r2, rrx
 808372a:	ebb6 0e02 	subs.w	lr, r6, r2
 808372e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083732:	bf22      	ittt	cs
 8083734:	1ab6      	subcs	r6, r6, r2
 8083736:	4675      	movcs	r5, lr
 8083738:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808373c:	085b      	lsrs	r3, r3, #1
 808373e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083742:	ebb6 0e02 	subs.w	lr, r6, r2
 8083746:	eb75 0e03 	sbcs.w	lr, r5, r3
 808374a:	bf22      	ittt	cs
 808374c:	1ab6      	subcs	r6, r6, r2
 808374e:	4675      	movcs	r5, lr
 8083750:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083754:	ea55 0e06 	orrs.w	lr, r5, r6
 8083758:	d018      	beq.n	808378c <__aeabi_ddiv+0x114>
 808375a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808375e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083762:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083766:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808376a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808376e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083772:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083776:	d1c0      	bne.n	80836fa <__aeabi_ddiv+0x82>
 8083778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808377c:	d10b      	bne.n	8083796 <__aeabi_ddiv+0x11e>
 808377e:	ea41 0100 	orr.w	r1, r1, r0
 8083782:	f04f 0000 	mov.w	r0, #0
 8083786:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808378a:	e7b6      	b.n	80836fa <__aeabi_ddiv+0x82>
 808378c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083790:	bf04      	itt	eq
 8083792:	4301      	orreq	r1, r0
 8083794:	2000      	moveq	r0, #0
 8083796:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808379a:	bf88      	it	hi
 808379c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80837a0:	f63f aeaf 	bhi.w	8083502 <__aeabi_dmul+0xde>
 80837a4:	ebb5 0c03 	subs.w	ip, r5, r3
 80837a8:	bf04      	itt	eq
 80837aa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80837ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80837b2:	f150 0000 	adcs.w	r0, r0, #0
 80837b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80837ba:	bd70      	pop	{r4, r5, r6, pc}
 80837bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80837c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80837c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80837c8:	bfc2      	ittt	gt
 80837ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80837ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80837d2:	bd70      	popgt	{r4, r5, r6, pc}
 80837d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80837d8:	f04f 0e00 	mov.w	lr, #0
 80837dc:	3c01      	subs	r4, #1
 80837de:	e690      	b.n	8083502 <__aeabi_dmul+0xde>
 80837e0:	ea45 0e06 	orr.w	lr, r5, r6
 80837e4:	e68d      	b.n	8083502 <__aeabi_dmul+0xde>
 80837e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80837ea:	ea94 0f0c 	teq	r4, ip
 80837ee:	bf08      	it	eq
 80837f0:	ea95 0f0c 	teqeq	r5, ip
 80837f4:	f43f af3b 	beq.w	808366e <__aeabi_dmul+0x24a>
 80837f8:	ea94 0f0c 	teq	r4, ip
 80837fc:	d10a      	bne.n	8083814 <__aeabi_ddiv+0x19c>
 80837fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083802:	f47f af34 	bne.w	808366e <__aeabi_dmul+0x24a>
 8083806:	ea95 0f0c 	teq	r5, ip
 808380a:	f47f af25 	bne.w	8083658 <__aeabi_dmul+0x234>
 808380e:	4610      	mov	r0, r2
 8083810:	4619      	mov	r1, r3
 8083812:	e72c      	b.n	808366e <__aeabi_dmul+0x24a>
 8083814:	ea95 0f0c 	teq	r5, ip
 8083818:	d106      	bne.n	8083828 <__aeabi_ddiv+0x1b0>
 808381a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808381e:	f43f aefd 	beq.w	808361c <__aeabi_dmul+0x1f8>
 8083822:	4610      	mov	r0, r2
 8083824:	4619      	mov	r1, r3
 8083826:	e722      	b.n	808366e <__aeabi_dmul+0x24a>
 8083828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808382c:	bf18      	it	ne
 808382e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083832:	f47f aec5 	bne.w	80835c0 <__aeabi_dmul+0x19c>
 8083836:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808383a:	f47f af0d 	bne.w	8083658 <__aeabi_dmul+0x234>
 808383e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083842:	f47f aeeb 	bne.w	808361c <__aeabi_dmul+0x1f8>
 8083846:	e712      	b.n	808366e <__aeabi_dmul+0x24a>

08083848 <__aeabi_d2f>:
 8083848:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808384c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083850:	bf24      	itt	cs
 8083852:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083856:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808385a:	d90d      	bls.n	8083878 <__aeabi_d2f+0x30>
 808385c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083860:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083864:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083868:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808386c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083870:	bf08      	it	eq
 8083872:	f020 0001 	biceq.w	r0, r0, #1
 8083876:	4770      	bx	lr
 8083878:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808387c:	d121      	bne.n	80838c2 <__aeabi_d2f+0x7a>
 808387e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083882:	bfbc      	itt	lt
 8083884:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083888:	4770      	bxlt	lr
 808388a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808388e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083892:	f1c2 0218 	rsb	r2, r2, #24
 8083896:	f1c2 0c20 	rsb	ip, r2, #32
 808389a:	fa10 f30c 	lsls.w	r3, r0, ip
 808389e:	fa20 f002 	lsr.w	r0, r0, r2
 80838a2:	bf18      	it	ne
 80838a4:	f040 0001 	orrne.w	r0, r0, #1
 80838a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80838ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80838b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80838b4:	ea40 000c 	orr.w	r0, r0, ip
 80838b8:	fa23 f302 	lsr.w	r3, r3, r2
 80838bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80838c0:	e7cc      	b.n	808385c <__aeabi_d2f+0x14>
 80838c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80838c6:	d107      	bne.n	80838d8 <__aeabi_d2f+0x90>
 80838c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80838cc:	bf1e      	ittt	ne
 80838ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80838d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80838d6:	4770      	bxne	lr
 80838d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80838dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80838e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80838e4:	4770      	bx	lr
 80838e6:	bf00      	nop

080838e8 <__aeabi_frsub>:
 80838e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80838ec:	e002      	b.n	80838f4 <__addsf3>
 80838ee:	bf00      	nop

080838f0 <__aeabi_fsub>:
 80838f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080838f4 <__addsf3>:
 80838f4:	0042      	lsls	r2, r0, #1
 80838f6:	bf1f      	itttt	ne
 80838f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80838fc:	ea92 0f03 	teqne	r2, r3
 8083900:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8083904:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083908:	d06a      	beq.n	80839e0 <__addsf3+0xec>
 808390a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808390e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8083912:	bfc1      	itttt	gt
 8083914:	18d2      	addgt	r2, r2, r3
 8083916:	4041      	eorgt	r1, r0
 8083918:	4048      	eorgt	r0, r1
 808391a:	4041      	eorgt	r1, r0
 808391c:	bfb8      	it	lt
 808391e:	425b      	neglt	r3, r3
 8083920:	2b19      	cmp	r3, #25
 8083922:	bf88      	it	hi
 8083924:	4770      	bxhi	lr
 8083926:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808392a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808392e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083932:	bf18      	it	ne
 8083934:	4240      	negne	r0, r0
 8083936:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808393a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808393e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083942:	bf18      	it	ne
 8083944:	4249      	negne	r1, r1
 8083946:	ea92 0f03 	teq	r2, r3
 808394a:	d03f      	beq.n	80839cc <__addsf3+0xd8>
 808394c:	f1a2 0201 	sub.w	r2, r2, #1
 8083950:	fa41 fc03 	asr.w	ip, r1, r3
 8083954:	eb10 000c 	adds.w	r0, r0, ip
 8083958:	f1c3 0320 	rsb	r3, r3, #32
 808395c:	fa01 f103 	lsl.w	r1, r1, r3
 8083960:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083964:	d502      	bpl.n	808396c <__addsf3+0x78>
 8083966:	4249      	negs	r1, r1
 8083968:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808396c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083970:	d313      	bcc.n	808399a <__addsf3+0xa6>
 8083972:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083976:	d306      	bcc.n	8083986 <__addsf3+0x92>
 8083978:	0840      	lsrs	r0, r0, #1
 808397a:	ea4f 0131 	mov.w	r1, r1, rrx
 808397e:	f102 0201 	add.w	r2, r2, #1
 8083982:	2afe      	cmp	r2, #254	; 0xfe
 8083984:	d251      	bcs.n	8083a2a <__addsf3+0x136>
 8083986:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808398a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808398e:	bf08      	it	eq
 8083990:	f020 0001 	biceq.w	r0, r0, #1
 8083994:	ea40 0003 	orr.w	r0, r0, r3
 8083998:	4770      	bx	lr
 808399a:	0049      	lsls	r1, r1, #1
 808399c:	eb40 0000 	adc.w	r0, r0, r0
 80839a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80839a4:	f1a2 0201 	sub.w	r2, r2, #1
 80839a8:	d1ed      	bne.n	8083986 <__addsf3+0x92>
 80839aa:	fab0 fc80 	clz	ip, r0
 80839ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80839b2:	ebb2 020c 	subs.w	r2, r2, ip
 80839b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80839ba:	bfaa      	itet	ge
 80839bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80839c0:	4252      	neglt	r2, r2
 80839c2:	4318      	orrge	r0, r3
 80839c4:	bfbc      	itt	lt
 80839c6:	40d0      	lsrlt	r0, r2
 80839c8:	4318      	orrlt	r0, r3
 80839ca:	4770      	bx	lr
 80839cc:	f092 0f00 	teq	r2, #0
 80839d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80839d4:	bf06      	itte	eq
 80839d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80839da:	3201      	addeq	r2, #1
 80839dc:	3b01      	subne	r3, #1
 80839de:	e7b5      	b.n	808394c <__addsf3+0x58>
 80839e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80839e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80839e8:	bf18      	it	ne
 80839ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80839ee:	d021      	beq.n	8083a34 <__addsf3+0x140>
 80839f0:	ea92 0f03 	teq	r2, r3
 80839f4:	d004      	beq.n	8083a00 <__addsf3+0x10c>
 80839f6:	f092 0f00 	teq	r2, #0
 80839fa:	bf08      	it	eq
 80839fc:	4608      	moveq	r0, r1
 80839fe:	4770      	bx	lr
 8083a00:	ea90 0f01 	teq	r0, r1
 8083a04:	bf1c      	itt	ne
 8083a06:	2000      	movne	r0, #0
 8083a08:	4770      	bxne	lr
 8083a0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083a0e:	d104      	bne.n	8083a1a <__addsf3+0x126>
 8083a10:	0040      	lsls	r0, r0, #1
 8083a12:	bf28      	it	cs
 8083a14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083a18:	4770      	bx	lr
 8083a1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083a1e:	bf3c      	itt	cc
 8083a20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083a24:	4770      	bxcc	lr
 8083a26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083a2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083a32:	4770      	bx	lr
 8083a34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083a38:	bf16      	itet	ne
 8083a3a:	4608      	movne	r0, r1
 8083a3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083a40:	4601      	movne	r1, r0
 8083a42:	0242      	lsls	r2, r0, #9
 8083a44:	bf06      	itte	eq
 8083a46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083a4a:	ea90 0f01 	teqeq	r0, r1
 8083a4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083a52:	4770      	bx	lr

08083a54 <__aeabi_ui2f>:
 8083a54:	f04f 0300 	mov.w	r3, #0
 8083a58:	e004      	b.n	8083a64 <__aeabi_i2f+0x8>
 8083a5a:	bf00      	nop

08083a5c <__aeabi_i2f>:
 8083a5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083a60:	bf48      	it	mi
 8083a62:	4240      	negmi	r0, r0
 8083a64:	ea5f 0c00 	movs.w	ip, r0
 8083a68:	bf08      	it	eq
 8083a6a:	4770      	bxeq	lr
 8083a6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083a70:	4601      	mov	r1, r0
 8083a72:	f04f 0000 	mov.w	r0, #0
 8083a76:	e01c      	b.n	8083ab2 <__aeabi_l2f+0x2a>

08083a78 <__aeabi_ul2f>:
 8083a78:	ea50 0201 	orrs.w	r2, r0, r1
 8083a7c:	bf08      	it	eq
 8083a7e:	4770      	bxeq	lr
 8083a80:	f04f 0300 	mov.w	r3, #0
 8083a84:	e00a      	b.n	8083a9c <__aeabi_l2f+0x14>
 8083a86:	bf00      	nop

08083a88 <__aeabi_l2f>:
 8083a88:	ea50 0201 	orrs.w	r2, r0, r1
 8083a8c:	bf08      	it	eq
 8083a8e:	4770      	bxeq	lr
 8083a90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083a94:	d502      	bpl.n	8083a9c <__aeabi_l2f+0x14>
 8083a96:	4240      	negs	r0, r0
 8083a98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083a9c:	ea5f 0c01 	movs.w	ip, r1
 8083aa0:	bf02      	ittt	eq
 8083aa2:	4684      	moveq	ip, r0
 8083aa4:	4601      	moveq	r1, r0
 8083aa6:	2000      	moveq	r0, #0
 8083aa8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083aac:	bf08      	it	eq
 8083aae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083ab2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083ab6:	fabc f28c 	clz	r2, ip
 8083aba:	3a08      	subs	r2, #8
 8083abc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083ac0:	db10      	blt.n	8083ae4 <__aeabi_l2f+0x5c>
 8083ac2:	fa01 fc02 	lsl.w	ip, r1, r2
 8083ac6:	4463      	add	r3, ip
 8083ac8:	fa00 fc02 	lsl.w	ip, r0, r2
 8083acc:	f1c2 0220 	rsb	r2, r2, #32
 8083ad0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083ad4:	fa20 f202 	lsr.w	r2, r0, r2
 8083ad8:	eb43 0002 	adc.w	r0, r3, r2
 8083adc:	bf08      	it	eq
 8083ade:	f020 0001 	biceq.w	r0, r0, #1
 8083ae2:	4770      	bx	lr
 8083ae4:	f102 0220 	add.w	r2, r2, #32
 8083ae8:	fa01 fc02 	lsl.w	ip, r1, r2
 8083aec:	f1c2 0220 	rsb	r2, r2, #32
 8083af0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8083af4:	fa21 f202 	lsr.w	r2, r1, r2
 8083af8:	eb43 0002 	adc.w	r0, r3, r2
 8083afc:	bf08      	it	eq
 8083afe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083b02:	4770      	bx	lr

08083b04 <__aeabi_fmul>:
 8083b04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083b08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083b0c:	bf1e      	ittt	ne
 8083b0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083b12:	ea92 0f0c 	teqne	r2, ip
 8083b16:	ea93 0f0c 	teqne	r3, ip
 8083b1a:	d06f      	beq.n	8083bfc <__aeabi_fmul+0xf8>
 8083b1c:	441a      	add	r2, r3
 8083b1e:	ea80 0c01 	eor.w	ip, r0, r1
 8083b22:	0240      	lsls	r0, r0, #9
 8083b24:	bf18      	it	ne
 8083b26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8083b2a:	d01e      	beq.n	8083b6a <__aeabi_fmul+0x66>
 8083b2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083b30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8083b34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8083b38:	fba0 3101 	umull	r3, r1, r0, r1
 8083b3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083b40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8083b44:	bf3e      	ittt	cc
 8083b46:	0049      	lslcc	r1, r1, #1
 8083b48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8083b4c:	005b      	lslcc	r3, r3, #1
 8083b4e:	ea40 0001 	orr.w	r0, r0, r1
 8083b52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8083b56:	2afd      	cmp	r2, #253	; 0xfd
 8083b58:	d81d      	bhi.n	8083b96 <__aeabi_fmul+0x92>
 8083b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8083b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083b62:	bf08      	it	eq
 8083b64:	f020 0001 	biceq.w	r0, r0, #1
 8083b68:	4770      	bx	lr
 8083b6a:	f090 0f00 	teq	r0, #0
 8083b6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083b72:	bf08      	it	eq
 8083b74:	0249      	lsleq	r1, r1, #9
 8083b76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083b7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8083b7e:	3a7f      	subs	r2, #127	; 0x7f
 8083b80:	bfc2      	ittt	gt
 8083b82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083b86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083b8a:	4770      	bxgt	lr
 8083b8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083b90:	f04f 0300 	mov.w	r3, #0
 8083b94:	3a01      	subs	r2, #1
 8083b96:	dc5d      	bgt.n	8083c54 <__aeabi_fmul+0x150>
 8083b98:	f112 0f19 	cmn.w	r2, #25
 8083b9c:	bfdc      	itt	le
 8083b9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8083ba2:	4770      	bxle	lr
 8083ba4:	f1c2 0200 	rsb	r2, r2, #0
 8083ba8:	0041      	lsls	r1, r0, #1
 8083baa:	fa21 f102 	lsr.w	r1, r1, r2
 8083bae:	f1c2 0220 	rsb	r2, r2, #32
 8083bb2:	fa00 fc02 	lsl.w	ip, r0, r2
 8083bb6:	ea5f 0031 	movs.w	r0, r1, rrx
 8083bba:	f140 0000 	adc.w	r0, r0, #0
 8083bbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8083bc2:	bf08      	it	eq
 8083bc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083bc8:	4770      	bx	lr
 8083bca:	f092 0f00 	teq	r2, #0
 8083bce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083bd2:	bf02      	ittt	eq
 8083bd4:	0040      	lsleq	r0, r0, #1
 8083bd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083bda:	3a01      	subeq	r2, #1
 8083bdc:	d0f9      	beq.n	8083bd2 <__aeabi_fmul+0xce>
 8083bde:	ea40 000c 	orr.w	r0, r0, ip
 8083be2:	f093 0f00 	teq	r3, #0
 8083be6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083bea:	bf02      	ittt	eq
 8083bec:	0049      	lsleq	r1, r1, #1
 8083bee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083bf2:	3b01      	subeq	r3, #1
 8083bf4:	d0f9      	beq.n	8083bea <__aeabi_fmul+0xe6>
 8083bf6:	ea41 010c 	orr.w	r1, r1, ip
 8083bfa:	e78f      	b.n	8083b1c <__aeabi_fmul+0x18>
 8083bfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083c00:	ea92 0f0c 	teq	r2, ip
 8083c04:	bf18      	it	ne
 8083c06:	ea93 0f0c 	teqne	r3, ip
 8083c0a:	d00a      	beq.n	8083c22 <__aeabi_fmul+0x11e>
 8083c0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083c10:	bf18      	it	ne
 8083c12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083c16:	d1d8      	bne.n	8083bca <__aeabi_fmul+0xc6>
 8083c18:	ea80 0001 	eor.w	r0, r0, r1
 8083c1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083c20:	4770      	bx	lr
 8083c22:	f090 0f00 	teq	r0, #0
 8083c26:	bf17      	itett	ne
 8083c28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8083c2c:	4608      	moveq	r0, r1
 8083c2e:	f091 0f00 	teqne	r1, #0
 8083c32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8083c36:	d014      	beq.n	8083c62 <__aeabi_fmul+0x15e>
 8083c38:	ea92 0f0c 	teq	r2, ip
 8083c3c:	d101      	bne.n	8083c42 <__aeabi_fmul+0x13e>
 8083c3e:	0242      	lsls	r2, r0, #9
 8083c40:	d10f      	bne.n	8083c62 <__aeabi_fmul+0x15e>
 8083c42:	ea93 0f0c 	teq	r3, ip
 8083c46:	d103      	bne.n	8083c50 <__aeabi_fmul+0x14c>
 8083c48:	024b      	lsls	r3, r1, #9
 8083c4a:	bf18      	it	ne
 8083c4c:	4608      	movne	r0, r1
 8083c4e:	d108      	bne.n	8083c62 <__aeabi_fmul+0x15e>
 8083c50:	ea80 0001 	eor.w	r0, r0, r1
 8083c54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083c58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083c5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083c60:	4770      	bx	lr
 8083c62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083c66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8083c6a:	4770      	bx	lr

08083c6c <__aeabi_fdiv>:
 8083c6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083c70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083c74:	bf1e      	ittt	ne
 8083c76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083c7a:	ea92 0f0c 	teqne	r2, ip
 8083c7e:	ea93 0f0c 	teqne	r3, ip
 8083c82:	d069      	beq.n	8083d58 <__aeabi_fdiv+0xec>
 8083c84:	eba2 0203 	sub.w	r2, r2, r3
 8083c88:	ea80 0c01 	eor.w	ip, r0, r1
 8083c8c:	0249      	lsls	r1, r1, #9
 8083c8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8083c92:	d037      	beq.n	8083d04 <__aeabi_fdiv+0x98>
 8083c94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8083c98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8083c9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083ca4:	428b      	cmp	r3, r1
 8083ca6:	bf38      	it	cc
 8083ca8:	005b      	lslcc	r3, r3, #1
 8083caa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8083cae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8083cb2:	428b      	cmp	r3, r1
 8083cb4:	bf24      	itt	cs
 8083cb6:	1a5b      	subcs	r3, r3, r1
 8083cb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8083cbc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083cc0:	bf24      	itt	cs
 8083cc2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8083cc6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083cca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8083cce:	bf24      	itt	cs
 8083cd0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8083cd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083cd8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8083cdc:	bf24      	itt	cs
 8083cde:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8083ce2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083ce6:	011b      	lsls	r3, r3, #4
 8083ce8:	bf18      	it	ne
 8083cea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8083cee:	d1e0      	bne.n	8083cb2 <__aeabi_fdiv+0x46>
 8083cf0:	2afd      	cmp	r2, #253	; 0xfd
 8083cf2:	f63f af50 	bhi.w	8083b96 <__aeabi_fmul+0x92>
 8083cf6:	428b      	cmp	r3, r1
 8083cf8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083cfc:	bf08      	it	eq
 8083cfe:	f020 0001 	biceq.w	r0, r0, #1
 8083d02:	4770      	bx	lr
 8083d04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083d08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083d0c:	327f      	adds	r2, #127	; 0x7f
 8083d0e:	bfc2      	ittt	gt
 8083d10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083d14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083d18:	4770      	bxgt	lr
 8083d1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083d1e:	f04f 0300 	mov.w	r3, #0
 8083d22:	3a01      	subs	r2, #1
 8083d24:	e737      	b.n	8083b96 <__aeabi_fmul+0x92>
 8083d26:	f092 0f00 	teq	r2, #0
 8083d2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083d2e:	bf02      	ittt	eq
 8083d30:	0040      	lsleq	r0, r0, #1
 8083d32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083d36:	3a01      	subeq	r2, #1
 8083d38:	d0f9      	beq.n	8083d2e <__aeabi_fdiv+0xc2>
 8083d3a:	ea40 000c 	orr.w	r0, r0, ip
 8083d3e:	f093 0f00 	teq	r3, #0
 8083d42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083d46:	bf02      	ittt	eq
 8083d48:	0049      	lsleq	r1, r1, #1
 8083d4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083d4e:	3b01      	subeq	r3, #1
 8083d50:	d0f9      	beq.n	8083d46 <__aeabi_fdiv+0xda>
 8083d52:	ea41 010c 	orr.w	r1, r1, ip
 8083d56:	e795      	b.n	8083c84 <__aeabi_fdiv+0x18>
 8083d58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083d5c:	ea92 0f0c 	teq	r2, ip
 8083d60:	d108      	bne.n	8083d74 <__aeabi_fdiv+0x108>
 8083d62:	0242      	lsls	r2, r0, #9
 8083d64:	f47f af7d 	bne.w	8083c62 <__aeabi_fmul+0x15e>
 8083d68:	ea93 0f0c 	teq	r3, ip
 8083d6c:	f47f af70 	bne.w	8083c50 <__aeabi_fmul+0x14c>
 8083d70:	4608      	mov	r0, r1
 8083d72:	e776      	b.n	8083c62 <__aeabi_fmul+0x15e>
 8083d74:	ea93 0f0c 	teq	r3, ip
 8083d78:	d104      	bne.n	8083d84 <__aeabi_fdiv+0x118>
 8083d7a:	024b      	lsls	r3, r1, #9
 8083d7c:	f43f af4c 	beq.w	8083c18 <__aeabi_fmul+0x114>
 8083d80:	4608      	mov	r0, r1
 8083d82:	e76e      	b.n	8083c62 <__aeabi_fmul+0x15e>
 8083d84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083d88:	bf18      	it	ne
 8083d8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083d8e:	d1ca      	bne.n	8083d26 <__aeabi_fdiv+0xba>
 8083d90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8083d94:	f47f af5c 	bne.w	8083c50 <__aeabi_fmul+0x14c>
 8083d98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083d9c:	f47f af3c 	bne.w	8083c18 <__aeabi_fmul+0x114>
 8083da0:	e75f      	b.n	8083c62 <__aeabi_fmul+0x15e>
 8083da2:	bf00      	nop

08083da4 <__gesf2>:
 8083da4:	f04f 3cff 	mov.w	ip, #4294967295
 8083da8:	e006      	b.n	8083db8 <__cmpsf2+0x4>
 8083daa:	bf00      	nop

08083dac <__lesf2>:
 8083dac:	f04f 0c01 	mov.w	ip, #1
 8083db0:	e002      	b.n	8083db8 <__cmpsf2+0x4>
 8083db2:	bf00      	nop

08083db4 <__cmpsf2>:
 8083db4:	f04f 0c01 	mov.w	ip, #1
 8083db8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083dbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083dc8:	bf18      	it	ne
 8083dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083dce:	d011      	beq.n	8083df4 <__cmpsf2+0x40>
 8083dd0:	b001      	add	sp, #4
 8083dd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8083dd6:	bf18      	it	ne
 8083dd8:	ea90 0f01 	teqne	r0, r1
 8083ddc:	bf58      	it	pl
 8083dde:	ebb2 0003 	subspl.w	r0, r2, r3
 8083de2:	bf88      	it	hi
 8083de4:	17c8      	asrhi	r0, r1, #31
 8083de6:	bf38      	it	cc
 8083de8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8083dec:	bf18      	it	ne
 8083dee:	f040 0001 	orrne.w	r0, r0, #1
 8083df2:	4770      	bx	lr
 8083df4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083df8:	d102      	bne.n	8083e00 <__cmpsf2+0x4c>
 8083dfa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8083dfe:	d105      	bne.n	8083e0c <__cmpsf2+0x58>
 8083e00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8083e04:	d1e4      	bne.n	8083dd0 <__cmpsf2+0x1c>
 8083e06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8083e0a:	d0e1      	beq.n	8083dd0 <__cmpsf2+0x1c>
 8083e0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083e10:	4770      	bx	lr
 8083e12:	bf00      	nop

08083e14 <__aeabi_cfrcmple>:
 8083e14:	4684      	mov	ip, r0
 8083e16:	4608      	mov	r0, r1
 8083e18:	4661      	mov	r1, ip
 8083e1a:	e7ff      	b.n	8083e1c <__aeabi_cfcmpeq>

08083e1c <__aeabi_cfcmpeq>:
 8083e1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8083e1e:	f7ff ffc9 	bl	8083db4 <__cmpsf2>
 8083e22:	2800      	cmp	r0, #0
 8083e24:	bf48      	it	mi
 8083e26:	f110 0f00 	cmnmi.w	r0, #0
 8083e2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08083e2c <__aeabi_fcmpeq>:
 8083e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e30:	f7ff fff4 	bl	8083e1c <__aeabi_cfcmpeq>
 8083e34:	bf0c      	ite	eq
 8083e36:	2001      	moveq	r0, #1
 8083e38:	2000      	movne	r0, #0
 8083e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8083e3e:	bf00      	nop

08083e40 <__aeabi_fcmplt>:
 8083e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e44:	f7ff ffea 	bl	8083e1c <__aeabi_cfcmpeq>
 8083e48:	bf34      	ite	cc
 8083e4a:	2001      	movcc	r0, #1
 8083e4c:	2000      	movcs	r0, #0
 8083e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083e52:	bf00      	nop

08083e54 <__aeabi_fcmple>:
 8083e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e58:	f7ff ffe0 	bl	8083e1c <__aeabi_cfcmpeq>
 8083e5c:	bf94      	ite	ls
 8083e5e:	2001      	movls	r0, #1
 8083e60:	2000      	movhi	r0, #0
 8083e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8083e66:	bf00      	nop

08083e68 <__aeabi_fcmpge>:
 8083e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e6c:	f7ff ffd2 	bl	8083e14 <__aeabi_cfrcmple>
 8083e70:	bf94      	ite	ls
 8083e72:	2001      	movls	r0, #1
 8083e74:	2000      	movhi	r0, #0
 8083e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8083e7a:	bf00      	nop

08083e7c <__aeabi_fcmpgt>:
 8083e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e80:	f7ff ffc8 	bl	8083e14 <__aeabi_cfrcmple>
 8083e84:	bf34      	ite	cc
 8083e86:	2001      	movcc	r0, #1
 8083e88:	2000      	movcs	r0, #0
 8083e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8083e8e:	bf00      	nop

08083e90 <atol>:
 8083e90:	220a      	movs	r2, #10
 8083e92:	2100      	movs	r1, #0
 8083e94:	f000 b918 	b.w	80840c8 <strtol>

08083e98 <__cxa_atexit>:
 8083e98:	b510      	push	{r4, lr}
 8083e9a:	4c05      	ldr	r4, [pc, #20]	; (8083eb0 <__cxa_atexit+0x18>)
 8083e9c:	4613      	mov	r3, r2
 8083e9e:	b12c      	cbz	r4, 8083eac <__cxa_atexit+0x14>
 8083ea0:	460a      	mov	r2, r1
 8083ea2:	4601      	mov	r1, r0
 8083ea4:	2002      	movs	r0, #2
 8083ea6:	f3af 8000 	nop.w
 8083eaa:	bd10      	pop	{r4, pc}
 8083eac:	4620      	mov	r0, r4
 8083eae:	bd10      	pop	{r4, pc}
 8083eb0:	00000000 	.word	0x00000000

08083eb4 <memcpy>:
 8083eb4:	b510      	push	{r4, lr}
 8083eb6:	1e43      	subs	r3, r0, #1
 8083eb8:	440a      	add	r2, r1
 8083eba:	4291      	cmp	r1, r2
 8083ebc:	d004      	beq.n	8083ec8 <memcpy+0x14>
 8083ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8083ec6:	e7f8      	b.n	8083eba <memcpy+0x6>
 8083ec8:	bd10      	pop	{r4, pc}

08083eca <memset>:
 8083eca:	4603      	mov	r3, r0
 8083ecc:	4402      	add	r2, r0
 8083ece:	4293      	cmp	r3, r2
 8083ed0:	d002      	beq.n	8083ed8 <memset+0xe>
 8083ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8083ed6:	e7fa      	b.n	8083ece <memset+0x4>
 8083ed8:	4770      	bx	lr
	...

08083edc <srand>:
 8083edc:	b538      	push	{r3, r4, r5, lr}
 8083ede:	4b12      	ldr	r3, [pc, #72]	; (8083f28 <srand+0x4c>)
 8083ee0:	4605      	mov	r5, r0
 8083ee2:	681c      	ldr	r4, [r3, #0]
 8083ee4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083ee6:	b9d3      	cbnz	r3, 8083f1e <srand+0x42>
 8083ee8:	2018      	movs	r0, #24
 8083eea:	f7fd fcf3 	bl	80818d4 <malloc>
 8083eee:	f243 330e 	movw	r3, #13070	; 0x330e
 8083ef2:	63a0      	str	r0, [r4, #56]	; 0x38
 8083ef4:	8003      	strh	r3, [r0, #0]
 8083ef6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8083efa:	8043      	strh	r3, [r0, #2]
 8083efc:	f241 2334 	movw	r3, #4660	; 0x1234
 8083f00:	8083      	strh	r3, [r0, #4]
 8083f02:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8083f06:	80c3      	strh	r3, [r0, #6]
 8083f08:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083f0c:	8103      	strh	r3, [r0, #8]
 8083f0e:	2305      	movs	r3, #5
 8083f10:	8143      	strh	r3, [r0, #10]
 8083f12:	230b      	movs	r3, #11
 8083f14:	8183      	strh	r3, [r0, #12]
 8083f16:	2201      	movs	r2, #1
 8083f18:	2300      	movs	r3, #0
 8083f1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8083f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083f20:	2200      	movs	r2, #0
 8083f22:	611d      	str	r5, [r3, #16]
 8083f24:	615a      	str	r2, [r3, #20]
 8083f26:	bd38      	pop	{r3, r4, r5, pc}
 8083f28:	200000a0 	.word	0x200000a0

08083f2c <strcmp>:
 8083f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8083f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8083f34:	2a01      	cmp	r2, #1
 8083f36:	bf28      	it	cs
 8083f38:	429a      	cmpcs	r2, r3
 8083f3a:	d0f7      	beq.n	8083f2c <strcmp>
 8083f3c:	1ad0      	subs	r0, r2, r3
 8083f3e:	4770      	bx	lr

08083f40 <strcpy>:
 8083f40:	4603      	mov	r3, r0
 8083f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8083f46:	f803 2b01 	strb.w	r2, [r3], #1
 8083f4a:	2a00      	cmp	r2, #0
 8083f4c:	d1f9      	bne.n	8083f42 <strcpy+0x2>
 8083f4e:	4770      	bx	lr

08083f50 <strdup>:
 8083f50:	4b02      	ldr	r3, [pc, #8]	; (8083f5c <strdup+0xc>)
 8083f52:	4601      	mov	r1, r0
 8083f54:	6818      	ldr	r0, [r3, #0]
 8083f56:	f000 b803 	b.w	8083f60 <_strdup_r>
 8083f5a:	bf00      	nop
 8083f5c:	200000a0 	.word	0x200000a0

08083f60 <_strdup_r>:
 8083f60:	b570      	push	{r4, r5, r6, lr}
 8083f62:	4606      	mov	r6, r0
 8083f64:	4608      	mov	r0, r1
 8083f66:	460c      	mov	r4, r1
 8083f68:	f000 f80d 	bl	8083f86 <strlen>
 8083f6c:	1c45      	adds	r5, r0, #1
 8083f6e:	4629      	mov	r1, r5
 8083f70:	4630      	mov	r0, r6
 8083f72:	f7fd fcdf 	bl	8081934 <_malloc_r>
 8083f76:	4606      	mov	r6, r0
 8083f78:	b118      	cbz	r0, 8083f82 <_strdup_r+0x22>
 8083f7a:	462a      	mov	r2, r5
 8083f7c:	4621      	mov	r1, r4
 8083f7e:	f7ff ff99 	bl	8083eb4 <memcpy>
 8083f82:	4630      	mov	r0, r6
 8083f84:	bd70      	pop	{r4, r5, r6, pc}

08083f86 <strlen>:
 8083f86:	4603      	mov	r3, r0
 8083f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8083f8c:	2a00      	cmp	r2, #0
 8083f8e:	d1fb      	bne.n	8083f88 <strlen+0x2>
 8083f90:	1a18      	subs	r0, r3, r0
 8083f92:	3801      	subs	r0, #1
 8083f94:	4770      	bx	lr

08083f96 <strncpy>:
 8083f96:	4603      	mov	r3, r0
 8083f98:	b510      	push	{r4, lr}
 8083f9a:	b142      	cbz	r2, 8083fae <strncpy+0x18>
 8083f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083fa0:	3a01      	subs	r2, #1
 8083fa2:	f803 4b01 	strb.w	r4, [r3], #1
 8083fa6:	2c00      	cmp	r4, #0
 8083fa8:	d1f7      	bne.n	8083f9a <strncpy+0x4>
 8083faa:	441a      	add	r2, r3
 8083fac:	e000      	b.n	8083fb0 <strncpy+0x1a>
 8083fae:	bd10      	pop	{r4, pc}
 8083fb0:	4293      	cmp	r3, r2
 8083fb2:	d002      	beq.n	8083fba <strncpy+0x24>
 8083fb4:	f803 4b01 	strb.w	r4, [r3], #1
 8083fb8:	e7fa      	b.n	8083fb0 <strncpy+0x1a>
 8083fba:	bd10      	pop	{r4, pc}

08083fbc <_strtol_r>:
 8083fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083fc0:	460f      	mov	r7, r1
 8083fc2:	4680      	mov	r8, r0
 8083fc4:	483f      	ldr	r0, [pc, #252]	; (80840c4 <_strtol_r+0x108>)
 8083fc6:	f8d0 9000 	ldr.w	r9, [r0]
 8083fca:	463d      	mov	r5, r7
 8083fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083fd0:	eb09 0004 	add.w	r0, r9, r4
 8083fd4:	7840      	ldrb	r0, [r0, #1]
 8083fd6:	f000 0008 	and.w	r0, r0, #8
 8083fda:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8083fde:	b108      	cbz	r0, 8083fe4 <_strtol_r+0x28>
 8083fe0:	462f      	mov	r7, r5
 8083fe2:	e7f2      	b.n	8083fca <_strtol_r+0xe>
 8083fe4:	2c2d      	cmp	r4, #45	; 0x2d
 8083fe6:	d103      	bne.n	8083ff0 <_strtol_r+0x34>
 8083fe8:	1cbd      	adds	r5, r7, #2
 8083fea:	787c      	ldrb	r4, [r7, #1]
 8083fec:	2601      	movs	r6, #1
 8083fee:	e003      	b.n	8083ff8 <_strtol_r+0x3c>
 8083ff0:	2c2b      	cmp	r4, #43	; 0x2b
 8083ff2:	bf04      	itt	eq
 8083ff4:	787c      	ldrbeq	r4, [r7, #1]
 8083ff6:	1cbd      	addeq	r5, r7, #2
 8083ff8:	b113      	cbz	r3, 8084000 <_strtol_r+0x44>
 8083ffa:	2b10      	cmp	r3, #16
 8083ffc:	d10a      	bne.n	8084014 <_strtol_r+0x58>
 8083ffe:	e05b      	b.n	80840b8 <_strtol_r+0xfc>
 8084000:	2c30      	cmp	r4, #48	; 0x30
 8084002:	d157      	bne.n	80840b4 <_strtol_r+0xf8>
 8084004:	7828      	ldrb	r0, [r5, #0]
 8084006:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808400a:	2858      	cmp	r0, #88	; 0x58
 808400c:	d14d      	bne.n	80840aa <_strtol_r+0xee>
 808400e:	786c      	ldrb	r4, [r5, #1]
 8084010:	2310      	movs	r3, #16
 8084012:	3502      	adds	r5, #2
 8084014:	2e00      	cmp	r6, #0
 8084016:	bf14      	ite	ne
 8084018:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808401c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8084020:	fbbc faf3 	udiv	sl, ip, r3
 8084024:	2700      	movs	r7, #0
 8084026:	4638      	mov	r0, r7
 8084028:	fb03 cc1a 	mls	ip, r3, sl, ip
 808402c:	eb09 0e04 	add.w	lr, r9, r4
 8084030:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084034:	f01e 0f04 	tst.w	lr, #4
 8084038:	d001      	beq.n	808403e <_strtol_r+0x82>
 808403a:	3c30      	subs	r4, #48	; 0x30
 808403c:	e00b      	b.n	8084056 <_strtol_r+0x9a>
 808403e:	f01e 0e03 	ands.w	lr, lr, #3
 8084042:	d01b      	beq.n	808407c <_strtol_r+0xc0>
 8084044:	f1be 0f01 	cmp.w	lr, #1
 8084048:	bf0c      	ite	eq
 808404a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808404e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084052:	ebce 0404 	rsb	r4, lr, r4
 8084056:	42a3      	cmp	r3, r4
 8084058:	dd10      	ble.n	808407c <_strtol_r+0xc0>
 808405a:	f1b7 3fff 	cmp.w	r7, #4294967295
 808405e:	d00a      	beq.n	8084076 <_strtol_r+0xba>
 8084060:	4550      	cmp	r0, sl
 8084062:	d806      	bhi.n	8084072 <_strtol_r+0xb6>
 8084064:	d101      	bne.n	808406a <_strtol_r+0xae>
 8084066:	4564      	cmp	r4, ip
 8084068:	dc03      	bgt.n	8084072 <_strtol_r+0xb6>
 808406a:	fb03 4000 	mla	r0, r3, r0, r4
 808406e:	2701      	movs	r7, #1
 8084070:	e001      	b.n	8084076 <_strtol_r+0xba>
 8084072:	f04f 37ff 	mov.w	r7, #4294967295
 8084076:	f815 4b01 	ldrb.w	r4, [r5], #1
 808407a:	e7d7      	b.n	808402c <_strtol_r+0x70>
 808407c:	1c7b      	adds	r3, r7, #1
 808407e:	d10c      	bne.n	808409a <_strtol_r+0xde>
 8084080:	2e00      	cmp	r6, #0
 8084082:	f04f 0322 	mov.w	r3, #34	; 0x22
 8084086:	bf14      	ite	ne
 8084088:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808408c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084090:	f8c8 3000 	str.w	r3, [r8]
 8084094:	b92a      	cbnz	r2, 80840a2 <_strtol_r+0xe6>
 8084096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808409a:	b106      	cbz	r6, 808409e <_strtol_r+0xe2>
 808409c:	4240      	negs	r0, r0
 808409e:	b172      	cbz	r2, 80840be <_strtol_r+0x102>
 80840a0:	b107      	cbz	r7, 80840a4 <_strtol_r+0xe8>
 80840a2:	1e69      	subs	r1, r5, #1
 80840a4:	6011      	str	r1, [r2, #0]
 80840a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80840aa:	2430      	movs	r4, #48	; 0x30
 80840ac:	2b00      	cmp	r3, #0
 80840ae:	d1b1      	bne.n	8084014 <_strtol_r+0x58>
 80840b0:	2308      	movs	r3, #8
 80840b2:	e7af      	b.n	8084014 <_strtol_r+0x58>
 80840b4:	230a      	movs	r3, #10
 80840b6:	e7ad      	b.n	8084014 <_strtol_r+0x58>
 80840b8:	2c30      	cmp	r4, #48	; 0x30
 80840ba:	d0a3      	beq.n	8084004 <_strtol_r+0x48>
 80840bc:	e7aa      	b.n	8084014 <_strtol_r+0x58>
 80840be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80840c2:	bf00      	nop
 80840c4:	2000003c 	.word	0x2000003c

080840c8 <strtol>:
 80840c8:	4613      	mov	r3, r2
 80840ca:	460a      	mov	r2, r1
 80840cc:	4601      	mov	r1, r0
 80840ce:	4802      	ldr	r0, [pc, #8]	; (80840d8 <strtol+0x10>)
 80840d0:	6800      	ldr	r0, [r0, #0]
 80840d2:	f7ff bf73 	b.w	8083fbc <_strtol_r>
 80840d6:	bf00      	nop
 80840d8:	200000a0 	.word	0x200000a0

080840dc <dynalib_user>:
 80840dc:	0808001d 0808005d 08080089 0808008d     ....]...........
 80840ec:	00000000 252c6625 6c250066 696d2075     ....%f,%f.%lu mi
 80840fc:	73696c6c 6e6f6365 74207364 6567206f     lliseconds to ge
 808410c:	50472074 69662053 6f6e0078 636f6c20     t GPS fix.no loc
 808411c:	6f697461 6e49006e 65687420 6f654720     ation.In the Geo
 808412c:	6e654620 203a6563 696c4100 53206576      Fence: .Alive S
 808413c:	65746174 7700203a 69746961 7420676e     tate: .waiting t
 808414c:	6f63206f 6f20656d 6e696c6e 65720065     o come online.re
 808415c:	74746573 20676e69 65636361 6f72656c     setting accelero
 808416c:	6574656d 63610072 656c6563 656d6f72     meter.accelerome
 808417c:	20726574 20746f6e 6e756f66 61660064     ter not found.fa
 808418c:	64656c69 206f7420 20746567 20535047     iled to get GPS 
 808419c:	00786966 614c227b 25223a22 222c2266     fix.{"La":"%f","
 80841ac:	3a226f4c 22662522 2243222c 2e25223a     Lo":"%f","C":"%.
 80841bc:	22663230 2241222c 6425223a 53222c22     02f","A":"%d","S
 80841cc:	25223a22 007d2264 61766e49 0064696c     ":"%d"}.Invalid.
 80841dc:	6b617761 64253d65 696f4700 4920676e     awake=%d.Going I
 80841ec:	206f746e 61766e49 2064696c 65656c53     nto Invalid Slee
 80841fc:	6f500070 20726577 73206f74 746f6f63     p.Power to scoot
 808420c:	203a7265 65684300 6e696b63 6f662067     er: .Checking fo
 808421c:	6c532072 00706565 6e696f47 6e492067     r Sleep.Going In
 808422c:	53206f74 2074666f 65656c53 6f470070     to Soft Sleep.Go
 808423c:	20676e69 6f746e49 65654420 6c532070     ing Into Deep Sl
 808424c:	00706565 6c697473 6f6d206c 676e6976     eep.still moving
 808425c:	74666120 25207265 65732075 696b0063      after %u sec.ki
 808426c:	67006c6c 6c417465 53657669 65746174     ll.getAliveState
 808427c:	6f6f6700 44656c67 0073636f              .googleDocs.

08084288 <_ZTV12AssetTracker>:
	...
 8084290:	0808097d 08080991                       }.......

08084298 <_ZTV13LegacyAdapter>:
	...
 80842a0:	08080a89 08080a8b 4d525047 4e470043     ........GPRMC.GN
 80842b0:	00434d52 47475047 4e470041 00414747     RMC.GPGGA.GNGGA.
 80842c0:	4e4e004e 4e450045 53450045 53530045     N.NNE.ENE.ESE.SS
 80842d0:	00530045 00575353 00575357 00574e57     E.S.SSW.WSW.WNW.
 80842e0:	00574e4e                                NNW.

080842e4 <_ZTV9LIS3DHSPI>:
	...
 80842ec:	08081149 0808114b 08081161 080811a3     I...K...a.......
 80842fc:	0808144d 08081159 69766564 6e206563     M...Y...device n
 808430c:	6620746f 646e756f 73657200 69747465     ot found.resetti
 808431c:	6c20676e 4d747361 6d65766f 20746e65     ng lastMovement 
 808432c:	31746e69 6372735f 2578303d 65720078     int1_src=0x%x.re
 808433c:	696c6163 74617262 00676e69              calibrating.

08084348 <_ZTV8SPIClass>:
	...
 8084350:	08081945 08081947                       E...G...

08084358 <_ZL14clock_divisors>:
 8084358:	18100800 38302820 66006e6c 6f63006e     .... (08ln.fn.co
 8084368:	64006564 69617465 0a0d006c 31302500     de.detail....%01
 8084378:	00207530 2c00205d 29280020 2000203a     0u .] ., .(): . 
 8084388:	6f63005b 3d206564 69250020 74656400     [.code = .%i.det
 8084398:	736c6961 00203d20 64756162 72655300     ails = .baud.Ser
 80843a8:	006c6169 53425355 61697265 7400316c     ial.USBSerial1.t
 80843b8:	00657079 61726170 6d63006d 6e680064     ype.param.cmd.hn
 80843c8:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
 80843d8:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
 80843e8:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
 80843f8:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
 8084408:	48676f4c 6c646e61 61007265 6e007070     LogHandler.app.n
 8084418:	00656e6f 63617274 6e690065 77006f66     one.trace.info.w
 8084428:	006e7261 6f727265 61700072 0063696e     arn.error.panic.
 8084438:	006c6c61 2b25005a 3a643330 75323025     all.Z.%+03d:%02u
 8084448:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
 8084458:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

08084468 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8084470:	08082035 0808203b 0808207f 08082049     5 ..; ... ..I ..
 8084480:	08082037                                7 ..

08084484 <_ZTV9IPAddress>:
	...
 808448c:	08082625 08082615 08082617              %&...&...&..

08084498 <_ZTV9USBSerial>:
	...
 80844a0:	080826b9 08082709 08082717 08081b9b     .&...'...'......
 80844b0:	080826f5 080826bb 080826d1 08082703     .&...&...&...'..
 80844c0:	080826e7 080826b5                       .&...&..

080844c8 <_ZTVN5spark13CellularClassE>:
	...
 80844d0:	080828fb 080828f1 080828e7 08082859     .(...(...(..Y(..
 80844e0:	080828db 080828cf 080828c3 080828bb     .(...(...(...(..
 80844f0:	080828b1 080828a7 08082863              .(...(..c(..

080844fc <_ZTV11USARTSerial>:
	...
 8084504:	08082935 08082985 08082993 08081b9b     5)...)...)......
 8084514:	08082949 0808296b 08082957 0808297f     I)..k)..W)...)..
 8084524:	08082937 0808293b                       7)..;)..

0808452c <_ZTV7TwoWire>:
	...
 8084534:	08082a6d 08082ab7 08082a8f 08082a6f     m*...*...*..o*..
 8084544:	08082a97 08082a9f 08082aa7 08082aaf     .*...*...*...*..

08084554 <_ZTVN5spark12NetworkClassE>:
	...
 808455c:	08082b47 08082b51 08082b5b 08082b65     G+..Q+..[+..e+..
 808456c:	08082b6f 08082b7b 08082b87 08082b93     o+..{+...+...+..
 808457c:	08082b9b 08082ba5 08082bb1              .+...+...+..

08084588 <_ctype_>:
 8084588:	20202000 20202020 28282020 20282828     .         ((((( 
 8084598:	20202020 20202020 20202020 20202020                     
 80845a8:	10108820 10101010 10101010 10101010      ...............
 80845b8:	04040410 04040404 10040404 10101010     ................
 80845c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80845d8:	01010101 01010101 01010101 10101010     ................
 80845e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80845f8:	02020202 02020202 02020202 10101010     ................
 8084608:	00000020 00000000 00000000 00000000      ...............
	...

0808468c <__sf_fake_stdin>:
	...

080846ac <__sf_fake_stdout>:
	...

080846cc <__sf_fake_stderr>:
	...

080846ec <link_const_variable_data_end>:
 80846ec:	0808085d 	.word	0x0808085d
 80846f0:	08080a4d 	.word	0x08080a4d
 80846f4:	08080aa5 	.word	0x08080aa5
 80846f8:	08081145 	.word	0x08081145
 80846fc:	08081465 	.word	0x08081465
 8084700:	08081a91 	.word	0x08081a91
 8084704:	08081d81 	.word	0x08081d81
 8084708:	08081d91 	.word	0x08081d91
 808470c:	08081de9 	.word	0x08081de9
 8084710:	08082905 	.word	0x08082905
 8084714:	08082bfd 	.word	0x08082bfd
 8084718:	08082d05 	.word	0x08082d05
 808471c:	08082d61 	.word	0x08082d61
 8084720:	08082e25 	.word	0x08082e25
 8084724:	08082ea9 	.word	0x08082ea9
 8084728:	08082f6d 	.word	0x08082f6d
 808472c:	08083031 	.word	0x08083031
